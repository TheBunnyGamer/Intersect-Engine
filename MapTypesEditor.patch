From 2b70f55d9cc933d817cf60bbad2e284d533661bc Mon Sep 17 00:00:00 2001
From: JadinRiverJames <40528979+JadinRiverJames@users.noreply.github.com>
Date: Tue, 14 Apr 2020 21:49:39 -0600
Subject: [PATCH] Done and done, bitch

---
 Intersect (Core)/Enums/GameObjectType.cs      |    5 +-
 Intersect (Core)/GameObjects/Maps/MapBase.cs  |    5 +
 Intersect (Core)/GameObjects/Maps/MapType.cs  |   51 +
 Intersect (Core)/Intersect (Core).csproj      |    2 +
 .../Network/Packets/Server/MapTypePacket.cs   |   13 +
 Intersect.Client/Entities/Player.cs           |   13 +-
 .../Interface/Game/EntityPanel/EntityBox.cs   |   50 +
 .../frmMapProperties.Designer.cs              |    4 +-
 .../Forms/DockingElements/frmMapProperties.cs |    9 +
 .../Forms/Editors/frmItem.Designer.cs         |    2 +
 Intersect.Editor/Forms/Editors/frmMapType.cs  |  436 ++++
 .../Forms/Editors/frmMapType.resx             | 1792 +++++++++++++++++
 Intersect.Editor/Forms/frmMain.Designer.cs    |   65 +-
 Intersect.Editor/Forms/frmMain.cs             |   16 +
 Intersect.Editor/Forms/frmMain.resx           |   18 +-
 Intersect.Editor/Intersect.Editor.csproj      |    9 +
 Intersect.Editor/Localization/Strings.cs      |    4 +-
 Intersect.Editor/Maps/MapProperties.cs        |   65 +-
 Intersect.Editor/Networking/PacketHandler.cs  |   14 +
 Intersect.Server/Database/DbInterface.cs      |   23 +
 .../Database/GameData/GameContext.cs          |    4 +
 Intersect.Server/Entities/Entity.cs           |  138 +-
 Intersect.Server/Entities/Player.cs           |   26 +-
 Intersect.Server/Intersect.Server.csproj      |    8 +
 ...414162817_AddingMapTypesEditor.Designer.cs | 1062 ++++++++++
 .../20200414162817_AddingMapTypesEditor.cs    |   45 +
 ...15005435_AddingMoreMapTypeVars.Designer.cs | 1066 ++++++++++
 .../20200415005435_AddingMoreMapTypeVars.cs   |   33 +
 .../Game/GameContextModelSnapshot.cs          |   30 +
 Intersect.Server/Networking/PacketHandler.cs  |    6 +
 Intersect.Server/Networking/PacketSender.cs   |    7 +
 34 files changed, 5427 insertions(+), 141 deletions(-)
 create mode 100644 Intersect (Core)/GameObjects/Maps/MapType.cs
 create mode 100644 Intersect (Core)/Network/Packets/Server/MapTypePacket.cs
 create mode 100644 Intersect.Editor/Forms/Editors/frmMapType.Designer.cs
 create mode 100644 Intersect.Editor/Forms/Editors/frmMapType.cs
 create mode 100644 Intersect.Editor/Forms/Editors/frmMapType.resx
 create mode 100644 Intersect.Server/Migrations/Game/20200414162817_AddingMapTypesEditor.Designer.cs
 create mode 100644 Intersect.Server/Migrations/Game/20200414162817_AddingMapTypesEditor.cs
 create mode 100644 Intersect.Server/Migrations/Game/20200415005435_AddingMoreMapTypeVars.Designer.cs
 create mode 100644 Intersect.Server/Migrations/Game/20200415005435_AddingMoreMapTypeVars.cs

diff --git a/Intersect (Core)/Enums/GameObjectType.cs b/Intersect (Core)/Enums/GameObjectType.cs
index c58511ec..f7d11bcb 100644
--- a/Intersect (Core)/Enums/GameObjectType.cs	
+++ b/Intersect (Core)/Enums/GameObjectType.cs	
@@ -58,7 +58,10 @@ public enum GameObjectType
         [GameObjectInfo(typeof(TilesetBase), "tilesets")]
         Tileset,
 
-        [GameObjectInfo(typeof(TimeBase), "")] Time
+        [GameObjectInfo(typeof(TimeBase), "")] Time,
+
+        [GameObjectInfo(typeof(MapType), "map_types")]
+        MapType
 
     }
 
diff --git a/Intersect (Core)/GameObjects/Maps/MapBase.cs b/Intersect (Core)/GameObjects/Maps/MapBase.cs
index b0af922f..6856d40b 100644
--- a/Intersect (Core)/GameObjects/Maps/MapBase.cs	
+++ b/Intersect (Core)/GameObjects/Maps/MapBase.cs	
@@ -302,6 +302,11 @@ public string NpcSpawnsJson
 
         public MapZones ZoneType { get; set; } = MapZones.Normal;
 
+        // 19 11 25 //
+        // We'll need to just ignore that var unfortunately. Cause this is caveman shit apparently
+        public Guid MapType { get; set; } = Guid.Empty;
+        // Map Type will be our customizable var. Checks will be like so: if getmaptype(#).allowspvp etc
+
         public int PlayerLightSize { get; set; } = 300;
 
         public byte PlayerLightIntensity { get; set; } = 255;
diff --git a/Intersect (Core)/GameObjects/Maps/MapType.cs b/Intersect (Core)/GameObjects/Maps/MapType.cs
new file mode 100644
index 00000000..ba7dd547
--- /dev/null
+++ b/Intersect (Core)/GameObjects/Maps/MapType.cs	
@@ -0,0 +1,51 @@
+﻿using System;
+using System.Collections.Generic;
+using System.ComponentModel.DataAnnotations.Schema;
+
+using Intersect.Enums;
+using Intersect.GameObjects.Conditions;
+using Intersect.GameObjects.Events;
+using Intersect.Models;
+using Intersect.Utilities;
+
+using JetBrains.Annotations;
+
+using Newtonsoft.Json;
+
+namespace Intersect.GameObjects.Maps
+{
+
+    public class MapType : DatabaseObject<MapType>
+    {
+
+        protected static Network.Ceras mCeras = new Network.Ceras(false);    
+
+        [JsonConstructor]
+        public MapType(Guid id) : base(id)
+        {
+            Name = "New Map Type";
+        }
+
+        //EF Constructor
+        public MapType()
+        {
+            Name = "New Map Type";
+        }
+        //Properties
+        public bool WalkThroughPlayers { get; set; }
+
+        public bool CanAttackNpcs{ get; set; }
+
+        public bool CanAttackPlayers { get; set; }
+
+        public bool DropItemsOnDeath { get; set; }
+
+        public bool IsArena { get; set; }
+
+        public bool CanTrade { get; set; }
+
+        public string MapNameColor { get; set; } = "White";
+
+    }
+
+}
diff --git a/Intersect (Core)/Intersect (Core).csproj b/Intersect (Core)/Intersect (Core).csproj
index c6f3dd3c..1730a187 100644
--- a/Intersect (Core)/Intersect (Core).csproj	
+++ b/Intersect (Core)/Intersect (Core).csproj	
@@ -228,6 +228,7 @@
     <Compile Include="Extensions\PropertyInfoExtensions.cs" />
     <Compile Include="Extensions\LogLevelExtensions.cs" />
     <Compile Include="GameObjects\Events\VariableMod.cs" />
+    <Compile Include="GameObjects\Maps\MapType.cs" />
     <Compile Include="GameObjects\Switches and Variables\VariableValue.cs" />
     <Compile Include="IO\ConsoleContext.cs" />
     <Compile Include="IO\ConsoleWriter.cs" />
@@ -328,6 +329,7 @@
     <Compile Include="Network\Packets\Client\HotbarUpdatePacket.cs" />
     <Compile Include="Network\Packets\Client\LoginPacket.cs" />
     <Compile Include="Network\Packets\Client\LogoutPacket.cs" />
+    <Compile Include="Network\Packets\Server\MapTypePacket.cs" />
     <Compile Include="Network\Packets\SlotQuantityPacket.cs" />
     <Compile Include="Network\Packets\Client\SwapBankItemsPacket.cs" />
     <Compile Include="Network\Packets\Client\MovePacket.cs" />
diff --git a/Intersect (Core)/Network/Packets/Server/MapTypePacket.cs b/Intersect (Core)/Network/Packets/Server/MapTypePacket.cs
new file mode 100644
index 00000000..1ef9c3c4
--- /dev/null
+++ b/Intersect (Core)/Network/Packets/Server/MapTypePacket.cs	
@@ -0,0 +1,13 @@
+﻿namespace Intersect.Network.Packets.Server
+{
+
+    public class MapTypePacket : CerasPacket
+    {
+
+        public MapTypePacket()
+        {
+            
+        }
+    }
+
+}
diff --git a/Intersect.Client/Entities/Player.cs b/Intersect.Client/Entities/Player.cs
index e7af06e0..c7161ba7 100644
--- a/Intersect.Client/Entities/Player.cs
+++ b/Intersect.Client/Entities/Player.cs
@@ -1640,10 +1640,17 @@ public void FetchNewMaps()
                                 {
                                     //Return the entity key as this should block the player.  Only exception is if the MapZone this entity is on is passable.
                                     var entityMap = MapInstance.Get(en.Value.CurrentMap);
-                                    if (Options.Instance.Passability.Passable[(int) entityMap.ZoneType])
+                                    if (entityMap.MapType != Guid.Empty)
                                     {
-                                        continue;
-                                    }
+                                        if (MapType.Get(entityMap.MapType).WalkThroughPlayers)
+                                        {
+                                            continue;
+                                        }
+                                    }                                   
+                                    //if (Options.Instance.Passability.Passable[(int) entityMap.ZoneType])
+                                    //{
+                                    //    continue;
+                                   // }
                                 }
 
                                 blockedBy = en.Value;
diff --git a/Intersect.Client/Interface/Game/EntityPanel/EntityBox.cs b/Intersect.Client/Interface/Game/EntityPanel/EntityBox.cs
index 1e2cd8db..50c91dfb 100644
--- a/Intersect.Client/Interface/Game/EntityPanel/EntityBox.cs
+++ b/Intersect.Client/Interface/Game/EntityPanel/EntityBox.cs
@@ -14,6 +14,7 @@
 using Intersect.Client.Networking;
 using Intersect.Enums;
 using Intersect.GameObjects;
+using Intersect.GameObjects.Maps;
 using Intersect.Logging;
 
 using JetBrains.Annotations;
@@ -457,7 +458,9 @@ private void UpdateMap()
         {
             if (Globals.Me.MapInstance != null)
             {
+                EntityMap.SetTextColor(GetMapNameColor(), Framework.Gwen.Control.Label.ControlState.Normal);
                 EntityMap.SetText(Strings.EntityBox.map.ToString(Globals.Me.MapInstance.Name));
+                EntityMap.Redraw();
             }
             else
             {
@@ -465,6 +468,53 @@ private void UpdateMap()
             }
         }
 
+        private Color GetMapNameColor()
+        {
+            if (Globals.Me.MapInstance.MapType == Guid.Empty) { return Color.White; }
+            switch (MapType.Get(Globals.Me.MapInstance.MapType).MapNameColor)
+            {
+                case "White":
+                    return Color.White;
+                    break;
+
+                case "Red":
+                    return Color.Red;
+                    break;
+
+                case "Green":
+                    return new Color(0,128, 0);
+                    break;
+
+                case "Blue":
+                    return Color.Blue;
+                    break;
+
+                case "Cyan":
+                    return Color.Cyan;
+                    break;
+
+                case "Orange":
+                    return Color.Orange;
+                    break;
+
+                case "Lime":
+                    return Color.Green;
+                    break;
+
+                case "Purple":
+                    return new Color(128, 0, 128);
+                    break;
+
+                case "Black":
+                    return Color.Black;
+                    break;
+
+                default:
+                    return Color.White;
+                    break;
+            }
+        }
+
         private void UpdateHpBar(float elapsedTime)
         {
             var targetHpWidth = 0f;
diff --git a/Intersect.Editor/Forms/DockingElements/frmMapProperties.Designer.cs b/Intersect.Editor/Forms/DockingElements/frmMapProperties.Designer.cs
index 5cbdce36..4ef2ea5b 100644
--- a/Intersect.Editor/Forms/DockingElements/frmMapProperties.Designer.cs
+++ b/Intersect.Editor/Forms/DockingElements/frmMapProperties.Designer.cs
@@ -55,8 +55,9 @@ private void InitializeComponent()
             this.gridMapProperties.ViewBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
             this.gridMapProperties.ViewBorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(51)))), ((int)(((byte)(51)))), ((int)(((byte)(51)))));
             this.gridMapProperties.ViewForeColor = System.Drawing.Color.Gainsboro;
+            this.gridMapProperties.Click += new System.EventHandler(this.gridMapProperties_Click);
             // 
-            // frmMapProperties
+            // FrmMapProperties
             // 
             this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
             this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
@@ -68,6 +69,7 @@ private void InitializeComponent()
             this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
             this.Name = "FrmMapProperties";
             this.Text = "Map Properties";
+            this.Load += new System.EventHandler(this.FrmMapProperties_Load);
             this.ResumeLayout(false);
 
         }
diff --git a/Intersect.Editor/Forms/DockingElements/frmMapProperties.cs b/Intersect.Editor/Forms/DockingElements/frmMapProperties.cs
index f849cfe6..61c299d6 100644
--- a/Intersect.Editor/Forms/DockingElements/frmMapProperties.cs
+++ b/Intersect.Editor/Forms/DockingElements/frmMapProperties.cs
@@ -50,6 +50,15 @@ public GridItem Selection()
             return gridMapProperties.SelectedGridItem;
         }
 
+        private void gridMapProperties_Click(object sender, System.EventArgs e)
+        {
+
+        }
+
+        private void FrmMapProperties_Load(object sender, System.EventArgs e)
+        {
+
+        }
     }
 
 }
diff --git a/Intersect.Editor/Forms/Editors/frmMapType.Designer.cs b/Intersect.Editor/Forms/Editors/frmMapType.Designer.cs
new file mode 100644
index 00000000..ed7d9292
--- /dev/null
+++ b/Intersect.Editor/Forms/Editors/frmMapType.Designer.cs
@@ -0,0 +1,391 @@
+﻿using DarkUI.Controls;
+
+namespace Intersect.Editor.Forms.Editors
+{
+    partial class FrmMapType
+    {
+        /// <summary>
+        /// Required designer variable.
+        /// </summary>
+        private System.ComponentModel.IContainer components = null;
+
+        /// <summary>
+        /// Clean up any resources being used.
+        /// </summary>
+        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
+        protected override void Dispose(bool disposing)
+        {
+            if (disposing && (components != null))
+            {
+                components.Dispose();
+            }
+            base.Dispose(disposing);
+        }
+
+        #region Windows Form Designer generated code
+
+        /// <summary>
+        /// Required method for Designer support - do not modify
+        /// the contents of this method with the code editor.
+        /// </summary>
+        private void InitializeComponent()
+        {
+            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmMapType));
+            this.lblMapTypes = new System.Windows.Forms.Label();
+            this.lstMapTypes = new System.Windows.Forms.TreeView();
+            this.toolStrip = new DarkUI.Controls.DarkToolStrip();
+            this.toolStripItemNew = new System.Windows.Forms.ToolStripButton();
+            this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
+            this.toolStripItemDelete = new System.Windows.Forms.ToolStripButton();
+            this.toolStripSeparator2 = new System.Windows.Forms.ToolStripSeparator();
+            this.btnChronological = new System.Windows.Forms.ToolStripButton();
+            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
+            this.toolStripSeparator3 = new System.Windows.Forms.ToolStripSeparator();
+            this.toolStripItemUndo = new System.Windows.Forms.ToolStripButton();
+            this.lblName = new System.Windows.Forms.Label();
+            this.txtName = new DarkUI.Controls.DarkTextBox();
+            this.chkWalkThroughPlayers = new System.Windows.Forms.CheckBox();
+            this.chkAttackNpcs = new System.Windows.Forms.CheckBox();
+            this.chkAttackPlayers = new System.Windows.Forms.CheckBox();
+            this.chkDropItems = new System.Windows.Forms.CheckBox();
+            this.pnlColor = new System.Windows.Forms.Panel();
+            this.scrlColor = new System.Windows.Forms.HScrollBar();
+            this.btnCancel = new DarkUI.Controls.DarkButton();
+            this.btnSave = new DarkUI.Controls.DarkButton();
+            this.label1 = new System.Windows.Forms.Label();
+            this.chkArena = new System.Windows.Forms.CheckBox();
+            this.chkTrade = new System.Windows.Forms.CheckBox();
+            this.toolStrip.SuspendLayout();
+            this.SuspendLayout();
+            // 
+            // lblMapTypes
+            // 
+            this.lblMapTypes.AutoSize = true;
+            this.lblMapTypes.ForeColor = System.Drawing.Color.Gainsboro;
+            this.lblMapTypes.Location = new System.Drawing.Point(11, 42);
+            this.lblMapTypes.Name = "lblMapTypes";
+            this.lblMapTypes.Size = new System.Drawing.Size(60, 13);
+            this.lblMapTypes.TabIndex = 1;
+            this.lblMapTypes.Text = "Map Types";
+            this.lblMapTypes.Click += new System.EventHandler(this.lblMapTypes_Click);
+            // 
+            // lstMapTypes
+            // 
+            this.lstMapTypes.AllowDrop = true;
+            this.lstMapTypes.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+            this.lstMapTypes.BorderStyle = System.Windows.Forms.BorderStyle.None;
+            this.lstMapTypes.ForeColor = System.Drawing.Color.Gainsboro;
+            this.lstMapTypes.HideSelection = false;
+            this.lstMapTypes.LineColor = System.Drawing.Color.FromArgb(((int)(((byte)(150)))), ((int)(((byte)(150)))), ((int)(((byte)(150)))));
+            this.lstMapTypes.Location = new System.Drawing.Point(14, 58);
+            this.lstMapTypes.Name = "lstMapTypes";
+            this.lstMapTypes.Size = new System.Drawing.Size(191, 211);
+            this.lstMapTypes.TabIndex = 30;
+            this.lstMapTypes.AfterSelect += new System.Windows.Forms.TreeViewEventHandler(this.lstMapTypes_AfterSelect);
+            // 
+            // toolStrip
+            // 
+            this.toolStrip.AutoSize = false;
+            this.toolStrip.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+            this.toolStrip.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.toolStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
+            this.toolStripItemNew,
+            this.toolStripSeparator1,
+            this.toolStripItemDelete,
+            this.toolStripSeparator2,
+            this.btnChronological,
+            this.toolStripSeparator4,
+            this.toolStripSeparator3,
+            this.toolStripItemUndo});
+            this.toolStrip.Location = new System.Drawing.Point(0, 0);
+            this.toolStrip.Name = "toolStrip";
+            this.toolStrip.Padding = new System.Windows.Forms.Padding(5, 0, 1, 0);
+            this.toolStrip.Size = new System.Drawing.Size(413, 25);
+            this.toolStrip.TabIndex = 45;
+            this.toolStrip.Text = "toolStrip1";
+            this.toolStrip.ItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler(this.toolStrip_ItemClicked);
+            // 
+            // toolStripItemNew
+            // 
+            this.toolStripItemNew.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
+            this.toolStripItemNew.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.toolStripItemNew.Image = ((System.Drawing.Image)(resources.GetObject("toolStripItemNew.Image")));
+            this.toolStripItemNew.ImageTransparentColor = System.Drawing.Color.Magenta;
+            this.toolStripItemNew.Name = "toolStripItemNew";
+            this.toolStripItemNew.Size = new System.Drawing.Size(23, 22);
+            this.toolStripItemNew.Text = "New";
+            this.toolStripItemNew.Click += new System.EventHandler(this.toolStripItemNew_Click);
+            // 
+            // toolStripSeparator1
+            // 
+            this.toolStripSeparator1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.toolStripSeparator1.Margin = new System.Windows.Forms.Padding(0, 0, 2, 0);
+            this.toolStripSeparator1.Name = "toolStripSeparator1";
+            this.toolStripSeparator1.Size = new System.Drawing.Size(6, 25);
+            // 
+            // toolStripItemDelete
+            // 
+            this.toolStripItemDelete.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
+            this.toolStripItemDelete.Enabled = false;
+            this.toolStripItemDelete.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.toolStripItemDelete.Image = ((System.Drawing.Image)(resources.GetObject("toolStripItemDelete.Image")));
+            this.toolStripItemDelete.ImageTransparentColor = System.Drawing.Color.Magenta;
+            this.toolStripItemDelete.Name = "toolStripItemDelete";
+            this.toolStripItemDelete.Size = new System.Drawing.Size(23, 22);
+            this.toolStripItemDelete.Text = "Delete";
+            this.toolStripItemDelete.Click += new System.EventHandler(this.toolStripItemDelete_Click);
+            // 
+            // toolStripSeparator2
+            // 
+            this.toolStripSeparator2.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.toolStripSeparator2.Margin = new System.Windows.Forms.Padding(0, 0, 2, 0);
+            this.toolStripSeparator2.Name = "toolStripSeparator2";
+            this.toolStripSeparator2.Size = new System.Drawing.Size(6, 25);
+            // 
+            // btnChronological
+            // 
+            this.btnChronological.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
+            this.btnChronological.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.btnChronological.Image = ((System.Drawing.Image)(resources.GetObject("btnChronological.Image")));
+            this.btnChronological.ImageTransparentColor = System.Drawing.Color.Magenta;
+            this.btnChronological.Name = "btnChronological";
+            this.btnChronological.Size = new System.Drawing.Size(23, 22);
+            this.btnChronological.Text = "Order Chronologically";
+            this.btnChronological.Click += new System.EventHandler(this.btnChronological_Click);
+            // 
+            // toolStripSeparator4
+            // 
+            this.toolStripSeparator4.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.toolStripSeparator4.Margin = new System.Windows.Forms.Padding(0, 0, 2, 0);
+            this.toolStripSeparator4.Name = "toolStripSeparator4";
+            this.toolStripSeparator4.Size = new System.Drawing.Size(6, 25);
+            // 
+            // toolStripSeparator3
+            // 
+            this.toolStripSeparator3.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.toolStripSeparator3.Margin = new System.Windows.Forms.Padding(0, 0, 2, 0);
+            this.toolStripSeparator3.Name = "toolStripSeparator3";
+            this.toolStripSeparator3.Size = new System.Drawing.Size(6, 25);
+            // 
+            // toolStripItemUndo
+            // 
+            this.toolStripItemUndo.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
+            this.toolStripItemUndo.Enabled = false;
+            this.toolStripItemUndo.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.toolStripItemUndo.Image = ((System.Drawing.Image)(resources.GetObject("toolStripItemUndo.Image")));
+            this.toolStripItemUndo.ImageTransparentColor = System.Drawing.Color.Magenta;
+            this.toolStripItemUndo.Name = "toolStripItemUndo";
+            this.toolStripItemUndo.Size = new System.Drawing.Size(23, 22);
+            this.toolStripItemUndo.Text = "Undo";
+            this.toolStripItemUndo.Click += new System.EventHandler(this.toolStripItemUndo_Click);
+            // 
+            // lblName
+            // 
+            this.lblName.AutoSize = true;
+            this.lblName.ForeColor = System.Drawing.SystemColors.Control;
+            this.lblName.Location = new System.Drawing.Point(209, 60);
+            this.lblName.Name = "lblName";
+            this.lblName.Size = new System.Drawing.Size(38, 13);
+            this.lblName.TabIndex = 47;
+            this.lblName.Text = "Name:";
+            // 
+            // txtName
+            // 
+            this.txtName.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.txtName.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+            this.txtName.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.txtName.Location = new System.Drawing.Point(254, 58);
+            this.txtName.Name = "txtName";
+            this.txtName.Size = new System.Drawing.Size(145, 20);
+            this.txtName.TabIndex = 46;
+            this.txtName.TextChanged += new System.EventHandler(this.txtName_TextChanged);
+            // 
+            // chkWalkThroughPlayers
+            // 
+            this.chkWalkThroughPlayers.AutoSize = true;
+            this.chkWalkThroughPlayers.ForeColor = System.Drawing.SystemColors.Control;
+            this.chkWalkThroughPlayers.Location = new System.Drawing.Point(212, 84);
+            this.chkWalkThroughPlayers.Name = "chkWalkThroughPlayers";
+            this.chkWalkThroughPlayers.Size = new System.Drawing.Size(153, 17);
+            this.chkWalkThroughPlayers.TabIndex = 48;
+            this.chkWalkThroughPlayers.Text = "Can Walk Through Players";
+            this.chkWalkThroughPlayers.UseVisualStyleBackColor = true;
+            this.chkWalkThroughPlayers.CheckedChanged += new System.EventHandler(this.chkWalkThroughPlayers_CheckedChanged);
+            // 
+            // chkAttackNpcs
+            // 
+            this.chkAttackNpcs.AutoSize = true;
+            this.chkAttackNpcs.ForeColor = System.Drawing.SystemColors.Control;
+            this.chkAttackNpcs.Location = new System.Drawing.Point(211, 107);
+            this.chkAttackNpcs.Name = "chkAttackNpcs";
+            this.chkAttackNpcs.Size = new System.Drawing.Size(107, 17);
+            this.chkAttackNpcs.TabIndex = 49;
+            this.chkAttackNpcs.Text = "Can Attack Npcs";
+            this.chkAttackNpcs.UseVisualStyleBackColor = true;
+            this.chkAttackNpcs.CheckedChanged += new System.EventHandler(this.chkAttackNpcs_CheckedChanged);
+            // 
+            // chkAttackPlayers
+            // 
+            this.chkAttackPlayers.AutoSize = true;
+            this.chkAttackPlayers.ForeColor = System.Drawing.SystemColors.Control;
+            this.chkAttackPlayers.Location = new System.Drawing.Point(212, 130);
+            this.chkAttackPlayers.Name = "chkAttackPlayers";
+            this.chkAttackPlayers.Size = new System.Drawing.Size(116, 17);
+            this.chkAttackPlayers.TabIndex = 50;
+            this.chkAttackPlayers.Text = "Can Attack Players";
+            this.chkAttackPlayers.UseVisualStyleBackColor = true;
+            this.chkAttackPlayers.CheckedChanged += new System.EventHandler(this.chkAttackPlayers_CheckedChanged);
+            // 
+            // chkDropItems
+            // 
+            this.chkDropItems.AutoSize = true;
+            this.chkDropItems.ForeColor = System.Drawing.SystemColors.Control;
+            this.chkDropItems.Location = new System.Drawing.Point(211, 153);
+            this.chkDropItems.Name = "chkDropItems";
+            this.chkDropItems.Size = new System.Drawing.Size(126, 17);
+            this.chkDropItems.TabIndex = 51;
+            this.chkDropItems.Text = "Drop Items On Death";
+            this.chkDropItems.UseVisualStyleBackColor = true;
+            this.chkDropItems.CheckedChanged += new System.EventHandler(this.chkDropItems_CheckedChanged);
+            // 
+            // pnlColor
+            // 
+            this.pnlColor.BackColor = System.Drawing.Color.White;
+            this.pnlColor.Location = new System.Drawing.Point(212, 237);
+            this.pnlColor.Name = "pnlColor";
+            this.pnlColor.Size = new System.Drawing.Size(32, 32);
+            this.pnlColor.TabIndex = 53;
+            this.pnlColor.Paint += new System.Windows.Forms.PaintEventHandler(this.pnlColor_Paint_1);
+            // 
+            // scrlColor
+            // 
+            this.scrlColor.LargeChange = 1;
+            this.scrlColor.Location = new System.Drawing.Point(254, 241);
+            this.scrlColor.Maximum = 8;
+            this.scrlColor.Name = "scrlColor";
+            this.scrlColor.Size = new System.Drawing.Size(145, 28);
+            this.scrlColor.TabIndex = 55;
+            this.scrlColor.Scroll += new System.Windows.Forms.ScrollEventHandler(this.scrlColor_Scroll);
+            // 
+            // btnCancel
+            // 
+            this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
+            this.btnCancel.Location = new System.Drawing.Point(209, 274);
+            this.btnCancel.Name = "btnCancel";
+            this.btnCancel.Padding = new System.Windows.Forms.Padding(5);
+            this.btnCancel.Size = new System.Drawing.Size(190, 28);
+            this.btnCancel.TabIndex = 57;
+            this.btnCancel.Text = "Cancel";
+            this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click_1);
+            // 
+            // btnSave
+            // 
+            this.btnSave.Location = new System.Drawing.Point(13, 274);
+            this.btnSave.Name = "btnSave";
+            this.btnSave.Padding = new System.Windows.Forms.Padding(5);
+            this.btnSave.Size = new System.Drawing.Size(190, 28);
+            this.btnSave.TabIndex = 56;
+            this.btnSave.Text = "Save";
+            this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
+            // 
+            // label1
+            // 
+            this.label1.AutoSize = true;
+            this.label1.ForeColor = System.Drawing.Color.Gainsboro;
+            this.label1.Location = new System.Drawing.Point(209, 221);
+            this.label1.Name = "label1";
+            this.label1.Size = new System.Drawing.Size(86, 13);
+            this.label1.TabIndex = 58;
+            this.label1.Text = "Map Name Color";
+            // 
+            // chkArena
+            // 
+            this.chkArena.AutoSize = true;
+            this.chkArena.ForeColor = System.Drawing.SystemColors.Control;
+            this.chkArena.Location = new System.Drawing.Point(211, 176);
+            this.chkArena.Name = "chkArena";
+            this.chkArena.Size = new System.Drawing.Size(157, 17);
+            this.chkArena.TabIndex = 59;
+            this.chkArena.Text = "Is Arena (No PvP Penalties)";
+            this.chkArena.UseVisualStyleBackColor = true;
+            this.chkArena.CheckedChanged += new System.EventHandler(this.chkArena_CheckedChanged);
+            // 
+            // chkTrade
+            // 
+            this.chkTrade.AutoSize = true;
+            this.chkTrade.ForeColor = System.Drawing.SystemColors.Control;
+            this.chkTrade.Location = new System.Drawing.Point(211, 199);
+            this.chkTrade.Name = "chkTrade";
+            this.chkTrade.Size = new System.Drawing.Size(76, 17);
+            this.chkTrade.TabIndex = 60;
+            this.chkTrade.Text = "Can Trade";
+            this.chkTrade.UseVisualStyleBackColor = true;
+            this.chkTrade.CheckedChanged += new System.EventHandler(this.chkTrade_CheckedChanged);
+            // 
+            // FrmMapType
+            // 
+            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
+            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
+            this.AutoSize = true;
+            this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+            this.ClientSize = new System.Drawing.Size(413, 314);
+            this.ControlBox = false;
+            this.Controls.Add(this.chkTrade);
+            this.Controls.Add(this.chkArena);
+            this.Controls.Add(this.label1);
+            this.Controls.Add(this.btnCancel);
+            this.Controls.Add(this.btnSave);
+            this.Controls.Add(this.scrlColor);
+            this.Controls.Add(this.pnlColor);
+            this.Controls.Add(this.chkDropItems);
+            this.Controls.Add(this.chkAttackPlayers);
+            this.Controls.Add(this.chkAttackNpcs);
+            this.Controls.Add(this.chkWalkThroughPlayers);
+            this.Controls.Add(this.lblName);
+            this.Controls.Add(this.txtName);
+            this.Controls.Add(this.toolStrip);
+            this.Controls.Add(this.lstMapTypes);
+            this.Controls.Add(this.lblMapTypes);
+            this.DoubleBuffered = true;
+            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
+            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
+            this.MaximizeBox = false;
+            this.Name = "FrmMapType";
+            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
+            this.Text = "Map Types Editor";
+            this.Load += new System.EventHandler(this.FrmMapType_Load);
+            this.toolStrip.ResumeLayout(false);
+            this.toolStrip.PerformLayout();
+            this.ResumeLayout(false);
+            this.PerformLayout();
+
+        }
+
+        #endregion
+        private System.Windows.Forms.ColorDialog clrSelector;
+        private System.Windows.Forms.Label lblMapTypes;
+        public System.Windows.Forms.TreeView lstMapTypes;
+        private DarkToolStrip toolStrip;
+        private System.Windows.Forms.ToolStripButton toolStripItemNew;
+        private System.Windows.Forms.ToolStripSeparator toolStripSeparator1;
+        private System.Windows.Forms.ToolStripButton toolStripItemDelete;
+        private System.Windows.Forms.ToolStripSeparator toolStripSeparator2;
+        private System.Windows.Forms.ToolStripButton btnChronological;
+        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
+        private System.Windows.Forms.ToolStripSeparator toolStripSeparator3;
+        public System.Windows.Forms.ToolStripButton toolStripItemUndo;
+        private System.Windows.Forms.Label lblName;
+        private DarkTextBox txtName;
+        private System.Windows.Forms.CheckBox chkWalkThroughPlayers;
+        private System.Windows.Forms.CheckBox chkAttackNpcs;
+        private System.Windows.Forms.CheckBox chkAttackPlayers;
+        private System.Windows.Forms.CheckBox chkDropItems;
+        private System.Windows.Forms.Panel pnlColor;
+        private System.Windows.Forms.HScrollBar scrlColor;
+        private DarkButton btnCancel;
+        private DarkButton btnSave;
+        private System.Windows.Forms.Label label1;
+        private System.Windows.Forms.CheckBox chkArena;
+        private System.Windows.Forms.CheckBox chkTrade;
+    }
+}
\ No newline at end of file
diff --git a/Intersect.Editor/Forms/Editors/frmMapType.cs b/Intersect.Editor/Forms/Editors/frmMapType.cs
new file mode 100644
index 00000000..34b8acd0
--- /dev/null
+++ b/Intersect.Editor/Forms/Editors/frmMapType.cs
@@ -0,0 +1,436 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Windows.Forms;
+
+using DarkUI.Forms;
+
+using Intersect.Editor.Content;
+using Intersect.Editor.General;
+using Intersect.Editor.Localization;
+using Intersect.Editor.Networking;
+using Intersect.Enums;
+using Intersect.GameObjects;
+using Intersect.GameObjects.Events;
+using Intersect.Utilities;
+using Intersect.GameObjects.Maps;
+
+namespace Intersect.Editor.Forms.Editors
+{
+
+    public partial class FrmMapType : EditorForm
+    {
+
+        private List<MapType> mChanged = new List<MapType>();
+
+        private string mCopiedItem;
+
+        private MapType mEditorItem;
+
+        protected override void GameObjectUpdatedDelegate(GameObjectType type)
+        {
+            if (type == GameObjectType.MapType)
+            {
+                InitEditor();
+                if (mEditorItem != null && !MapType.Lookup.Values.Contains(mEditorItem))
+                {
+                    mEditorItem = null;
+                    UpdateEditor();
+                }
+            }
+            else if (type == GameObjectType.Class ||
+                     type == GameObjectType.Projectile ||
+                     type == GameObjectType.Animation ||
+                     type == GameObjectType.Spell)
+            {
+                FrmMapType_Load(null, null);
+            }
+        }
+
+        public FrmMapType()
+        {
+            InitializeComponent();
+            InitLocalization();
+        }
+
+        private void InitLocalization()
+        {
+            
+        }
+
+        public void InitEditor(TimeBase time)
+        {
+           
+        }
+
+        private void lblMapTypes_Click(object sender, EventArgs e)
+        {
+
+        }
+
+        private void pnlColor_Paint(object sender, PaintEventArgs e)
+        {
+
+        }
+
+        private void pnlColor_DoubleClick(object sender, EventArgs e)
+        {
+
+        }
+
+        private void txtName_TextChanged(object sender, EventArgs e)
+        {
+            mChangingName = true;
+            mEditorItem.Name = txtName.Text;
+            if (lstMapTypes.SelectedNode != null && lstMapTypes.SelectedNode.Tag != null)
+            {
+                lstMapTypes.SelectedNode.Text = txtName.Text;
+            }
+
+            mChangingName = false;
+        }
+
+        private void toolStripItemNew_Click(object sender, EventArgs e)
+        {
+            PacketSender.SendCreateObject(GameObjectType.MapType);
+        }
+
+        private void toolStripItemDelete_Click(object sender, EventArgs e)
+        {
+            if (mEditorItem != null && lstMapTypes.Focused)
+            {
+                if (DarkMessageBox.ShowWarning(
+                        "Are you sure you want to delete this map type?", "Delete Map Type?", DarkDialogButton.YesNo,
+                        Properties.Resources.Icon
+                    ) ==
+                    DialogResult.Yes)
+                {
+                    PacketSender.SendDeleteObject(mEditorItem);
+                }
+            }
+        }
+
+        private void btnChronological_Click(object sender, EventArgs e)
+        {
+            btnChronological.Checked = !btnChronological.Checked;
+            InitEditor();
+        }
+
+        public void InitEditor()
+        {
+            var selectedId = Guid.Empty;
+            var folderNodes = new Dictionary<string, TreeNode>();
+            if (lstMapTypes.SelectedNode != null && lstMapTypes.SelectedNode.Tag != null)
+            {
+                selectedId = (Guid)lstMapTypes.SelectedNode.Tag;
+            }
+
+            lstMapTypes.Nodes.Clear();
+
+            lstMapTypes.Sorted = !btnChronological.Checked;           
+
+            foreach (var itm in MapType.ItemPairs)
+            {
+                var node = new TreeNode(itm.Value);
+                node.Tag = itm.Key;
+                node.ImageIndex = 1;
+                node.SelectedImageIndex = 1;
+
+                lstMapTypes.Nodes.Add(node);               
+
+                if (itm.Key == selectedId)
+                {
+                    lstMapTypes.SelectedNode = node;
+                }
+            }
+
+            var selectedNode = lstMapTypes.SelectedNode;
+
+            if (!btnChronological.Checked)
+            {
+                lstMapTypes.Sort();
+            }
+
+            lstMapTypes.SelectedNode = selectedNode;           
+        }
+
+        private void UpdateEditor()
+        {
+            if (mEditorItem != null)
+            {
+                txtName.Text = mEditorItem.Name;
+                chkWalkThroughPlayers.Checked = mEditorItem.WalkThroughPlayers;
+                chkAttackNpcs.Checked = mEditorItem.CanAttackNpcs;
+                chkAttackPlayers.Checked = mEditorItem.CanAttackPlayers;
+                chkDropItems.Checked = mEditorItem.DropItemsOnDeath;
+                chkArena.Checked = mEditorItem.IsArena;
+                chkTrade.Checked = mEditorItem.CanTrade;
+                pnlColor.BackColor = UpdateColor(mEditorItem.MapNameColor);
+                if (mChanged.IndexOf(mEditorItem) == -1)
+                {
+                    mChanged.Add(mEditorItem);
+                    mEditorItem.MakeBackup();
+                }
+            }
+            else
+            {
+                //pnlContainer.Hide();
+            }
+
+            UpdateToolStripItems();
+        }
+
+        private void UpdateToolStripItems()
+        {
+            toolStripItemDelete.Enabled = mEditorItem != null && lstMapTypes.Focused;
+            toolStripItemUndo.Enabled = mEditorItem != null && lstMapTypes.Focused;
+        }
+
+        private void lstMapTypes_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)
+        {
+            var node = e.Node;
+            if (node != null)
+            {
+                if (e.Button == MouseButtons.Right)
+                {
+                    if (e.Node.Tag != null && e.Node.Tag.GetType() == typeof(Guid))
+                    {
+                        Clipboard.SetText(e.Node.Tag.ToString());
+                    }
+                }
+
+                var hitTest = lstMapTypes.HitTest(e.Location);
+                if (hitTest.Location != TreeViewHitTestLocations.PlusMinus)
+                {
+                    if (node.Nodes.Count > 0)
+                    {
+                        if (node.IsExpanded)
+                        {
+                            node.Collapse();
+                        }
+                        else
+                        {
+                            node.Expand();
+                        }
+                    }
+                }                
+            }
+        }
+
+        private void lstMapTypes_AfterSelect(object sender, TreeViewEventArgs e)
+        {
+            if (mChangingName)
+            {
+                return;
+            }
+
+            if (lstMapTypes.SelectedNode == null || lstMapTypes.SelectedNode.Tag == null)
+            {
+                return;
+            }
+
+            mEditorItem = MapType.Get((Guid)lstMapTypes.SelectedNode.Tag);
+            UpdateEditor();
+        }
+
+        private void toolStripItemUndo_Click(object sender, EventArgs e)
+        {
+            if (mChanged.Contains(mEditorItem) && mEditorItem != null)
+            {
+                if (DarkMessageBox.ShowWarning(
+                        Strings.ItemEditor.undoprompt, Strings.ItemEditor.undotitle, DarkDialogButton.YesNo,
+                        Properties.Resources.Icon
+                    ) ==
+                    DialogResult.Yes)
+                {
+                    mEditorItem.RestoreBackup();
+                    UpdateEditor();
+                }
+            }
+        }
+
+        private void toolStrip_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
+        {
+
+        }
+
+        private void FrmMapType_Load(object sender, EventArgs e)
+        {
+            
+            InitLocalization();
+            UpdateEditor();
+        }
+
+        private System.Drawing.Color UpdateColor(string color)
+        {
+            switch (color)
+            {
+                case "White":
+                    scrlColor.Value = 0;
+                    return System.Drawing.Color.White;
+                    break;
+
+                case "Red":
+                    scrlColor.Value = 1;
+                    return System.Drawing.Color.Red;
+                    break;
+
+                case "Green":
+                    scrlColor.Value = 2;
+                    return System.Drawing.Color.Green;
+                    break;
+
+                case "Blue":
+                    scrlColor.Value = 3;
+                    return System.Drawing.Color.Blue;
+                    break;
+
+                case "Cyan":
+                    scrlColor.Value = 4;
+                    return System.Drawing.Color.Cyan;
+                    break;
+
+                case "Orange":
+                    scrlColor.Value = 5;
+                    return System.Drawing.Color.Orange;
+                    break;
+
+                case "Lime":
+                    scrlColor.Value = 6;
+                    return System.Drawing.Color.Lime;
+                    break;
+
+                case "Purple":
+                    scrlColor.Value = 7;
+                    return System.Drawing.Color.Purple;
+                    break;
+
+                case "Black":
+                    scrlColor.Value = 8;
+                    return System.Drawing.Color.Black;
+                    break;
+
+                default:
+                    return System.Drawing.Color.White;
+                    break;
+            }
+        }
+
+        private void scrlColor_Scroll(object sender, ScrollEventArgs e)
+        {
+            switch (scrlColor.Value)
+            {
+                case 0:
+                    mEditorItem.MapNameColor = "White";
+                    pnlColor.BackColor = UpdateColor("White");
+                    break;
+
+                case 1:
+                    mEditorItem.MapNameColor = "Red";
+                    pnlColor.BackColor = UpdateColor("Red");
+                    break;
+
+                case 2:
+                    mEditorItem.MapNameColor = "Green";
+                    pnlColor.BackColor = UpdateColor("Green");
+                    break;
+
+                case 3:
+                    mEditorItem.MapNameColor = "Blue";
+                    pnlColor.BackColor = UpdateColor("Blue");
+                    break;
+
+                case 4:
+                    mEditorItem.MapNameColor = "Cyan";
+                    pnlColor.BackColor = UpdateColor("Cyan");
+                    break;
+
+                case 5:
+                    mEditorItem.MapNameColor = "Orange";
+                    pnlColor.BackColor = UpdateColor("Orange");
+                    break;
+
+                case 6:
+                    mEditorItem.MapNameColor = "Lime";
+                    pnlColor.BackColor = UpdateColor("Lime");
+                    break;
+
+                case 7:
+                    mEditorItem.MapNameColor = "Purple";
+                    pnlColor.BackColor = UpdateColor("Purple");
+                    break;
+
+                case 8:
+                    mEditorItem.MapNameColor = "Black";
+                    pnlColor.BackColor = UpdateColor("Black");
+                    break;
+
+                default:
+
+                    break;
+            }
+        }
+
+        private void chkWalkThroughPlayers_CheckedChanged(object sender, EventArgs e)
+        {
+            mEditorItem.WalkThroughPlayers = chkWalkThroughPlayers.Checked;
+        }
+
+        private void chkAttackNpcs_CheckedChanged(object sender, EventArgs e)
+        {
+            mEditorItem.CanAttackNpcs = chkAttackNpcs.Checked;
+        }
+
+        private void chkAttackPlayers_CheckedChanged(object sender, EventArgs e)
+        {
+            mEditorItem.CanAttackPlayers = chkAttackPlayers.Checked;
+        }
+
+        private void chkDropItems_CheckedChanged(object sender, EventArgs e)
+        {
+            mEditorItem.DropItemsOnDeath = chkDropItems.Checked;
+        }
+
+        private void pnlColor_Paint_1(object sender, PaintEventArgs e)
+        {
+
+        }
+
+        private void btnSave_Click(object sender, EventArgs e)
+        {
+            //Send Changed items
+            foreach (var item in mChanged)
+            {
+                PacketSender.SendSaveObject(item);
+                item.DeleteBackup();
+            }
+
+            Hide();
+            Globals.CurrentEditor = -1;
+            Dispose();
+        }
+
+        private void btnCancel_Click_1(object sender, EventArgs e)
+        {
+            foreach (var item in mChanged)
+            {
+                item.RestoreBackup();
+                item.DeleteBackup();
+            }
+
+            Hide();
+            Globals.CurrentEditor = -1;
+            Dispose();
+        }
+
+        private void chkArena_CheckedChanged(object sender, EventArgs e)
+        {
+            mEditorItem.IsArena = chkArena.Checked;
+        }
+
+        private void chkTrade_CheckedChanged(object sender, EventArgs e)
+        {
+            mEditorItem.CanTrade = chkTrade.Checked;
+        }
+    }
+
+}
diff --git a/Intersect.Editor/Forms/Editors/frmMapType.resx b/Intersect.Editor/Forms/Editors/frmMapType.resx
new file mode 100644
index 00000000..36deee2f
--- /dev/null
+++ b/Intersect.Editor/Forms/Editors/frmMapType.resx
@@ -0,0 +1,1792 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<root>
+  <!-- 
+    Microsoft ResX Schema 
+    
+    Version 2.0
+    
+    The primary goals of this format is to allow a simple XML format 
+    that is mostly human readable. The generation and parsing of the 
+    various data types are done through the TypeConverter classes 
+    associated with the data types.
+    
+    Example:
+    
+    ... ado.net/XML headers & schema ...
+    <resheader name="resmimetype">text/microsoft-resx</resheader>
+    <resheader name="version">2.0</resheader>
+    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
+    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
+    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
+    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
+    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
+        <value>[base64 mime encoded serialized .NET Framework object]</value>
+    </data>
+    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
+        <comment>This is a comment</comment>
+    </data>
+                
+    There are any number of "resheader" rows that contain simple 
+    name/value pairs.
+    
+    Each data row contains a name, and value. The row also contains a 
+    type or mimetype. Type corresponds to a .NET class that support 
+    text/value conversion through the TypeConverter architecture. 
+    Classes that don't support this are serialized and stored with the 
+    mimetype set.
+    
+    The mimetype is used for serialized objects, and tells the 
+    ResXResourceReader how to depersist the object. This is currently not 
+    extensible. For a given mimetype the value must be set accordingly:
+    
+    Note - application/x-microsoft.net.object.binary.base64 is the format 
+    that the ResXResourceWriter will generate, however the reader can 
+    read any of the formats listed below.
+    
+    mimetype: application/x-microsoft.net.object.binary.base64
+    value   : The object must be serialized with 
+            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
+            : and then encoded with base64 encoding.
+    
+    mimetype: application/x-microsoft.net.object.soap.base64
+    value   : The object must be serialized with 
+            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
+            : and then encoded with base64 encoding.
+
+    mimetype: application/x-microsoft.net.object.bytearray.base64
+    value   : The object must be serialized into a byte array 
+            : using a System.ComponentModel.TypeConverter
+            : and then encoded with base64 encoding.
+    -->
+  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
+    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
+    <xsd:element name="root" msdata:IsDataSet="true">
+      <xsd:complexType>
+        <xsd:choice maxOccurs="unbounded">
+          <xsd:element name="metadata">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" />
+              </xsd:sequence>
+              <xsd:attribute name="name" use="required" type="xsd:string" />
+              <xsd:attribute name="type" type="xsd:string" />
+              <xsd:attribute name="mimetype" type="xsd:string" />
+              <xsd:attribute ref="xml:space" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="assembly">
+            <xsd:complexType>
+              <xsd:attribute name="alias" type="xsd:string" />
+              <xsd:attribute name="name" type="xsd:string" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="data">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
+              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
+              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
+              <xsd:attribute ref="xml:space" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="resheader">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" use="required" />
+            </xsd:complexType>
+          </xsd:element>
+        </xsd:choice>
+      </xsd:complexType>
+    </xsd:element>
+  </xsd:schema>
+  <resheader name="resmimetype">
+    <value>text/microsoft-resx</value>
+  </resheader>
+  <resheader name="version">
+    <value>2.0</value>
+  </resheader>
+  <resheader name="reader">
+    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+  <resheader name="writer">
+    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+  <metadata name="toolStrip.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
+    <value>17, 17</value>
+  </metadata>
+  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <data name="toolStripItemNew.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+    <value>
+        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
+        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAACMSURBVDhP7Y3BCYAwFEM7h1M4Q/fy2rUEp3AFT1UovSrR
+        /22orQpeDTxqNS8aToxxVeTVu7A4dM35DKRyHxbzUyr1oASmsd8lBXf9JtVyUGCxdCd8CKEV9QgXaqK1
+        dsc5h3t5RKX8nP1yUh1BUcn/ng/wiOgpLKLIMoNv6Ih2zT+QBu54HHiD1L/EmA2wn/hWQ4oVCwAAAABJ
+        RU5ErkJggg==
+</value>
+  </data>
+  <data name="toolStripItemDelete.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+    <value>
+        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
+        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFbSURBVDhPrZK9SgNBFIV9AcEHSJHKwkpIZZfOSkhtZeED
+        BPQBVh9A7S2CjaYQJI2VEEyRQoTFRhEEkUCCWExk/8rxfpOZxVlmY+OBC8Pcc879mVn5NxRF0cyyLJLo
+        KqXW7LUH7iXfkxgSotkzCTm0vz9n+un8zESSJO9VExF05rOpejw51h+jO53neVxycEV4sb5qYnx0AOGG
+        HCQ5n07jB33d3tCDnS2NUZqmm0YMqgYEVeQ+opvnfk9fthomMKIbK13AjYC7M4DMHd1UTLtW5oOFhEzc
+        mS7o1NLDCJkQ94f7/tLqsMxAqg8tLQw2/fX2+tcI4fmZje3+FmBEN7y7M4PjPR+oE/PWkuswO9W55x/M
+        JxP/k/E0TkhgRGWeljxkisAjd7u7XX4yA9eiE9MNy7TpEsxPji7QlBznvEzsQFeMxogvg6vFd0YgLSlC
+        qkSWWwvhN9mLhIySxz9ZBc31XkEs1QAAAABJRU5ErkJggg==
+</value>
+  </data>
+  <data name="btnChronological.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+    <value>
+        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
+        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABrSURBVDhPnc9BCoAwDETR3rM37omyU1KcMFGJGQf+JtCH
+        Dp+ZHdw+KvNHc87dHfsqAI8BgFUl0O0V2EdlANB17s8f8X8pBeAxALAqATioJSCpylj8DfAXKAWw1koA
+        wKoS6BbAQ1XGogaMcQIneCosACuo6QAAAABJRU5ErkJggg==
+</value>
+  </data>
+  <data name="toolStripItemUndo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+    <value>
+        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
+        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAEfSURBVDhPjVK7DgFBFN0/4A/4AvEJfkAi0ZLoNArR6hUq
+        tUgkElGJ1jYaDYVsI9Fq2EYyin2Ua864d9g1u/YkJ5nHOfcxcy2G53nVIAiEZBSGYdn3/TnviQJnuCPL
+        BzDf3aeoDNZaPFweo0J7EVnNmSLWOMMd9GR9AyaYIXQfT702kZKIWCUIwIJSd6XX9dE2sk9XRaz5HJWg
+        HbLHAzCn9pnbURklHQ6CdnBGdnMAsDXZKSF6lhkbqITvlIdhCvBthuZvAAO1WQhRlPv0FrKAIBCjIs7+
+        84hpkF9VS5qN32iCFHSSM4FAGLifQUpCltc3mZE5j3l+uNxiYzzeODA7f8um1xa96V6baaAc3JEsG/zq
+        PMaoKLeZQa+f46ss6wVeddKu0bn3NAAAAABJRU5ErkJggg==
+</value>
+  </data>
+  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+    <value>
+        AAABAAEAlZ4AAAEAIABYfAEAFgAAACgAAACVAAAAPAEAAAEAIAAAAAAA2G8BABILAAASCwAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAABAAAAAgAAAAQAAAAFAAAABwAAAAgAAAAKAAAACgAAAAsAAAALAAAACwAA
+        AAsAAAALAAAACgAAAAoAAAAJAAAABwAAAAYAAAAEAAAAAgAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAEAAAACAAAABQAAAAkAAAANAAAAEgAAABYAAAAaAAAAHAAAAB8AAAAhAAAAIgAAACIAAAAjAAAAIgAA
+        ACIAAAAhAAAAHwAAAB0AAAAaAAAAFwAAABMAAAAOAAAACgAAAAUAAAADAAAAAQAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADAAAABwAA
+        AA0AAAATAAAAHAAAACUAAAAsAAAAMwAAADkAAAA9AAAAQAAAAEMAAABFAAAARgAAAEYAAABGAAAARQAA
+        AEMAAABBAAAAPgAAADoAAAA0AAAALgAAACUAAAAdAAAAFQAAAA0AAAAHAAAABAAAAAEAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADAAAABwAAAA4AAAAWAAAAIgAA
+        AC4AAAA6AAAARwAAAFIAAABcAAAAZAAAAGoAAABuAAAAcQAAAHMAAAB1AAAAdgAAAHYAAAB0AAAAcgAA
+        AG8AAABqAAAAZQAAAF4AAABUAAAASQAAAD0AAAAwAAAAIwAAABgAAAAPAAAABwAAAAMAAAABAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAABQAAAAwAAAAWAAAAIwAAADIAAABDAAAAVAAA
+        AGQUCwV/NBwOpUQlEr5TLRbWWzEY4mE0GutmNxv0ajkc+ms6Hf1sOx39bDod/Wo5HPtnOBv2YjUa7lwy
+        GORVLhfYRycTxDceD6obDweHAAAAZgAAAFYAAABGAAAANAAAACUAAAAYAAAADgAAAAcAAAADAAAAAQAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAABAAAABAAAAAkAAAASAAAAHwAAADAAAABEAAAAWAQCAW8pFgubSigUyl0y
+        GednOBz3bTsd/207Hf9tOx3/bTsd/207Hf9tOx3/bTsd/207Hf9tOx3/bTsd/207Hf9tOx3/bTsd/207
+        Hf9tOx3/aTkc+WA0GetQKxXSMhsNpgkFA3QAAABbAAAASAAAADQAAAAjAAAAFgAAAAwAAAAFAAAAAQAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAABAAAABAAAAAgAAAAQAAAAGgAAACsAAAA9AAAAVAUDAW4sFwufVC0W2GU2G/RuOx3/bjsd/247
+        Hf9uOx3/bjsd/247Hf9uOx3/bjsd/247Hf9uOx3/bjsd/247Hf9uOx3/bjsd/247Hf9uOx3/bjsd/247
+        Hf9uOx3/bjsd/247Hf9oOBz3WTAX3zUcDqoJBQN2AAAAWQAAAEQAAAAwAAAAHwAAABIAAAAJAAAABAAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAgAA
+        AAYAAAANAAAAFwAAACUAAAA3AAAATAAAAGMeEAiNSykUzGc4G/ZuPB3/bjwd/248Hf9uPB3/bjwd/248
+        Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248
+        Hf9uPB3/bjwd/248Hf9uPB3/aTkc+FItFtgmFQqaAgEBbAAAAFQAAAA9AAAAKgAAABoAAAAPAAAACAAA
+        AAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAQAAAAKAAAAEwAA
+        ACEAAAAyAAAARwAAAF0XDAaCQiQRvGQ3GvBuPB3/bjwd/248Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248
+        Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248
+        Hf9uPB3/bjwd/248Hf9uPB3/bjwd/2c4G/ZJKBPKIBIJjwAAAGIAAABMAAAANwAAACUAAAAXAAAADQAA
+        AAYAAAACAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAQAAAAJAAAAEAAAABwAAAAsAAAAQAAA
+        AFYLBgN1NBwOqloxGONuPB3+bjwd/248Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248
+        Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248
+        Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248Hf9hNRrtPiIQuRQLBYAAAABcAAAARgAAADIAAAAgAAAAEwAA
+        AAoAAAAEAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAMAAAAHAAAADwAAABoAAAAoAAAAOgAAAE8AAABlLBgLnFIt
+        FtZrOhz7bjwd/248Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248
+        Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248
+        Hf9uPB3/bjwd/248Hf9uPB3/bjwd/248Hf9uPB3/WDAX4TYeDqwEAgFvAAAAVgAAAEAAAAAsAAAAHAAA
+        ABAAAAAJAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAQAAAAIAAAAGAAAADQAAABcAAAAlAAAANwAAAEsAAABgHRAIiUooE8dmNxvzbzwd/288
+        Hf9vPB3/bzwd/288Hf9vPB3/bzwd/288Hf9vPB3/bzwd/288Hf9vPB3/bzwd/288Hf9vPB3/bzwd/288
+        Hf9vPB3/bzwd/288Hf9vPB3/bzwd/288Hf9vPB3/bzwd/288Hf9vPB3/bzwd/288Hf9vPB3/bzwd/288
+        Hf9vPB3/bzwd/288Hf9vPB3/bzwd/288Hf9vPB3/azoc+VIsFdYpFguZAAAAZQAAAE8AAAA6AAAAKAAA
+        ABkAAAAPAAAABwAAAAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
+        AAEAAAAEAAAACgAAABMAAAAgAAAAMQAAAEYAAABcDQcEekAjEbliNRrsbzwe/288Hv9vPB7/bzwe/288
+        Hv9vPB7/bzwe/288Hv9vPB7/bzwe/288Hv9vPB7/bzwe/288Hv9vPB7/bzwe/288Hv9vPB7/bzwe/288
+        Hv9vPB7/bzwe/288Hv9vPB7/bzwe/288Hv9vPB7/bzwe/288Hv9vPB7/bzwe/288Hv9vPB7/bzwe/288
+        Hv9vPB7/bzwe/288Hv9vPB7/bzwe/288Hv9vPB7/bzwe/2Y3HPNLKBTHGg4HhwAAAF8AAABKAAAANgAA
+        ACUAAAAXAAAADQAAAAYAAAACAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAEAAAACAAA
+        ABAAAAAcAAAAKwAAAD8AAABVCgYDczAbDaVbMhnjbDwd/G89Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289
+        Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289
+        Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289
+        Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9iNhrrPyMRtxIKBX0AAABbAAAARgAA
+        ADEAAAAgAAAAEwAAAAoAAAAEAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAABwAAAA0AAAAZAAAAJwAA
+        ADkAAABOAAAAZCITCZJRLBbSajod+G89Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289
+        Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289
+        Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289
+        Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9tPB79WTEY3zAbDaUIBAJyAAAAVQAA
+        AD8AAAArAAAAHAAAABAAAAAIAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAABQAAAAoAAAAUAAAAIgAAADQAAABJAAAAXhwP
+        CIdHJxPCaDkc9W89Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289
+        Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289
+        Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289
+        Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bz0e/289Hv9vPR7/bDsd+1EtFtMpFwuZAAAAZAAA
+        AE4AAAA5AAAAKAAAABkAAAAPAAAABwAAAAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAABAAAABAAAAAoAAAARAAAAHQAAAC4AAABBAAAAWBAJBHo9IRCzYDQa6HA9
+        Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9
+        Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9
+        Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9
+        Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/2Y4G/JGJhPBHRAIiAAA
+        AF8AAABJAAAANgAAACUAAAAWAAAADAAAAAYAAAACAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAABAAAABAAAAAgAAAAQAAAAGwAAACoAAAA7AAAAUQAAAGcyGw2iWTEY3W48Hv1wPR7/cD0e/3A9
+        Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9
+        Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9
+        Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9
+        Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9wPR7/cD0e/3A9Hv9hNRrpPiIRtQwH
+        A3gAAABbAAAARgAAADEAAAAfAAAAEwAAAAoAAAAEAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAA
+        AAcAAAAOAAAAGQAAACcAAAA4AAAATAAAAGEjEwmOUCwVzmg6HPVwPh7/cD4e/3A+Hv9wPh7/cD4e/3A+
+        Hv9wPh7/cD4e/3A+Hv9wPh7/cD4e/3A+Hv9wPh7/cD4e/3A+Hv9wPh7/cD4e/3A+Hv9wPh7/cD4e/3A+
+        Hv9wPh7/cD4e/3A+Hv9wPh7/cD4e/3A+Hv9wPh7/cD4e/3A+Hv9wPh7/cD4e/3A+Hv9wPh7/cD4e/3A+
+        Hv9wPh7/cD4e/3A+Hv9wPh7/cD4e/3A+Hv9wPh7/cD4e/3A+Hv9wPh7/cD4e/3A+Hv9wPh7/cD4e/3A+
+        Hv9wPh7/cD4e/3A+Hv9wPh7/cD4e/3A+Hv9wPh7/cD4e/3A+Hv9wPh7/cD4e/3A+Hv9tPR38WTEY3TEb
+        DaUFAwFwAAAAVQAAAD4AAAArAAAAHAAAABAAAAAIAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAUAAAAMAAAAFgAA
+        ACQAAAA1AAAASQAAAF4UCwaARycUwGc5HPFwPh//cD4f/3A+H/9wPh//cD4f/3A+H/9wPh//cD4f/3A+
+        H/9wPh//cD4f/3A+H/9wPh//cD4f/3A+H/9wPh//cD4f/3A+H/9wPh//cD4f/3A+H/9wPh//cD4f/3A+
+        H/9wPh//cD4f/3A+H/9wPh//cD4f/3A+H/9wPh//cD4f/3A+H/9wPh//cD4f/3A+H/9wPh//cD4f/3A+
+        H/9wPh//cD4f/3A+H/9wPh//cD4f/3A+H/9wPh//cD4f/3A+H/9wPh//cD4f/3A+H/9wPh//cD4f/3A+
+        H/9wPh//cD4f/3A+H/9wPh//cD4f/3A+H/9wPh//cD4f/3A+H/9wPh//cD4f/3A+H/9wPh//azse+VMu
+        F9QjEwqSAAAAZAAAAE4AAAA5AAAAKAAAABkAAAAPAAAABwAAAAMAAAABAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAQAAAAJAAAAEgAAAB8AAAAwAAAARQAA
+        AFoQCQR6OR8Qr2A1GudwPR/9cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+
+        H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+
+        H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+
+        H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+
+        H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/2c4
+        HPFGJxPBGw8HhgAAAF4AAABJAAAANgAAACUAAAAWAAAADAAAAAYAAAACAAAAAQAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAMAAAAIAAAAEAAAABoAAAAqAAAAPQAAAFQBAABtKBYLnVcw
+        GNtvPR/8cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+
+        H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+
+        H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+
+        H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+
+        H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+H/9xPh//cT4f/3E+
+        H/9iNhvpOB8PrwwHA3gAAABbAAAARQAAADEAAAAfAAAAEwAAAAkAAAAEAAAAAQAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAQAAAAMAAAAHAAAADgAAABkAAAAmAAAANwAAAEwAAABjIxQKkU0rFcxpOx32cT8f/3E/
+        H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/
+        H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/
+        H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/
+        H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/
+        H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/H/9xPx//cT8f/3E/
+        H/9vPh/8WDEY2zIcDqYFAwFvAAAAVQAAAD4AAAArAAAAGwAAABAAAAAIAAAABAAAAAEAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
+        AAEAAAAFAAAACwAAABYAAAAjAAAANAAAAEgAAABdEgoFfkMlErtlOBvtcj8f/3I/H/9yPx//cj8f/3I/
+        H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/
+        H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/
+        H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/
+        H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/
+        H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/
+        H/9yPx//bTwe+E8sFs0jFAqRAAAAZAAAAE0AAAA4AAAAJwAAABkAAAAOAAAABwAAAAMAAAABAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAEAAAACQAA
+        ABIAAAAeAAAALwAAAEQAAABZBAIBcjogEK5eNBrjcT4f/nI/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/
+        H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/
+        H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/
+        H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/
+        H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/
+        H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/H/9yPx//cj8f/3I/
+        H/9yPx//cj8f/2U4HO5HJxO/Fw0GggAAAF4AAABJAAAANQAAACQAAAAWAAAADAAAAAUAAAACAAAAAQAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADAAAABwAAAA8AAAAZAAAAKQAA
+        AD0AAABTAwIBbSYVC5pVLxjYbTwf+HI/IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/
+        IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/
+        IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/
+        IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/
+        IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/
+        IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/IP9yPyD/cj8g/3I/
+        IP9yPyD/cj8g/3E+IP5gNRvmOB8QrgoFA3YAAABbAAAARQAAADEAAAAfAAAAEwAAAAkAAAAEAAAAAQAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAABgAAAA0AAAAXAAAAJQAAADYAAABMAAAAYRoP
+        B4pNKxbLajse9XJAIP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JA
+        IP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JA
+        IP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JA
+        IP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JA
+        IP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JA
+        IP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JAIP9yQCD/ckAg/3JA
+        IP9yQCD/ckAg/3JAIP9uPh/7WjIZ3SwZDJ8EAgFuAAAAVAAAAD0AAAArAAAAGwAAABAAAAAIAAAAAwAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAABAAAABAAAAAkAAAATAAAAHwAAADEAAABGAAAAWxQLBn8+IxG1ZTgc7HNA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/bDwe9k8sFswhEwmQAAAAYwAAAEwAAAA3AAAAJQAAABcAAAAMAAAABQAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAQAAAAUAAAAMAAAAGAAAACkAAAA9AAAAVQQCAW8yHA6lXDMa33I/IP5zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/2k6HfBDJRO7GA0HggAAAF0AAABGAAAAMAAAAB0AAAAPAAAABgAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAEAAAAEAAAADQAAABwAAAAxAAAASQAAAGIqFwyXUy4X0m49H/lzQCD/c0Ag/3NAIP9zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NA
+        IP9zQCD/c0Ag/3NAIP9zQCD/c0Ag/3NAIP5gNRvkOiAQrQoGA3IAAABSAAAANwAAACAAAAAPAAAABQAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAA
+        AAoAAAAaAAAAMgAAAE8ZDgd8TCsVw2o7HfF0QSD/dEEg/3RBIP90QSD/dEEg/3RBIP90QSD/dEEg/3RB
+        IP90QSD/dEEg/3RBIP90QSD/dEEg/3RBIP90QSD/dEEg/3RBIP90QSD/dEEg/3RBIP90QSD/dEEg/3RB
+        IP90QSD/dEEg/3RBIP90QSD/dEEg/3RBIP90QSD/dEEg/3RBIP90QSD/dEEg/3RBIP90QSD/dEEg/3RB
+        IP90QSD/dEEg/3RBIP90QSD/dEEg/3RBIP90QSD/dEEg/3RBIP90QSD/dEEg/3RBIP90QSD/dEEg/3RB
+        IP90QSD/dEEg/3RBIP90QSD/dEEg/3RBIP90QSD/dEEg/3RBIP90QSD/dEEg/3RBIP90QSD/dEEg/3RB
+        IP90QSD/dEEg/3RBIP90QSD/dEEg/3RBIP90QSD/dEEg/3RBIP90QSD/dEEg/3RBIP90QSD/dEEg/3RB
+        IP90QSD/dEEg/3RBIP90QSD/dEEg/3RBIP90QSD/dEEg/3RBIP90QSD/dEEg/3RBIP90QSD/dEEg/3RB
+        IP90QSD/dEEg/3RBIP90QSD/dEEg/3RBIP9xPx/7WDEY1SoXDJAAAABVAAAANwAAABwAAAAMAAAAAwAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAEgAA
+        ACkAAABKIRMJgl41G9x0QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RB
+        If90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RB
+        If90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RB
+        If90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RB
+        If90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RB
+        If90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RB
+        If90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RB
+        If90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/aTse7TAbDpQAAABPAAAALAAAABQAAAAGAAAAAQAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAZAAAANgEB
+        AF9MKxbBdEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RB
+        If90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RB
+        If90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RB
+        If90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RB
+        If90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RB
+        If90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RB
+        If90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/dEEh/3RB
+        If90QSH/dEEh/3RBIf90QSH/dEEh/3RBIf90QSH/WDEZ0gwHA2sAAAA7AAAAHAAAAAoAAAABAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABwAAAA7DQcEbV00
+        Gtp1QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf9oOx3tIRIJhAAAAEMAAAAhAAAACwAAAAEAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAAAAGQAAADcHBAJkWDIZ0HVC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/2o8Hu4hEwmEAAAAQwAAACEAAAALAAAAAQAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAATAAAAKwAAAE41Hg+WbD0e8HVC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VCIf91QiH/dUIh/3VC
+        If91QiH/dUIh/3VCIf91QiH/WDEZzw0IBGgAAAA6AAAAHAAAAAkAAAABAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAwAAAAcAAAANgAAAFM0HQ6UVzAYzWE2
+        G+JtPR70dkIh/nZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZC
+        If92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZC
+        If92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZC
+        If92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZC
+        If92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZC
+        If92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZC
+        If92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZCIf92QiH/dkIh/3ZC
+        If9xPyD5ZTkc6FYwGMwmFQuDAAAASgAAACsAAAATAAAABgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABQAAAA8AAAAfAAAANAAAAEsAAABgGA4Hfy0a
+        DZo8IhGxTSwWyFw0Gt1mOh3rcUAh+XZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZD
+        Iv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZD
+        Iv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZD
+        Iv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZD
+        Iv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZD
+        Iv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZD
+        Iv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL+bD0f82E3HORTLxjTQiYTuzId
+        D6QgEgmKAQEAYwAAAEoAAAAxAAAAGgAAAAsAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABgAAAA4AAAAbAAAAKQAAADgAAABGAAAAUQAA
+        AFwAAABnFAsGfCITCo8wGw6jPSIRtUsrFspdNRvfajwf8HBAIPh0QiH9dkMi/3ZDIv92QyL/dkMi/3ZD
+        Iv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZD
+        Iv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZD
+        Iv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZD
+        Iv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZD
+        Iv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZDIv92QyL/dkMi/3ZD
+        Iv92QyL/dkMi/3VCIv5zQSH8bz8g9mc7HuxXMhnXRigUwDggEK0pFwyaGw8IiAoGA3QAAABjAAAAWAAA
+        AEoAAAA7AAAAKgAAABoAAAANAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABQAAAAoAAAASAAAAGgAAACMAAAArAAAANAAA
+        ADwAAABFAAAATgAAAFgAAABiAwIBbxEJBX8aDweMKhgMnz8jErdNKxbKWTIZ2Wc6HetwPyD2ckAh+XVC
+        Ifx3QyL/d0Mi/3dDIv93QyL/d0Mi/3dDIv93QyL/d0Mi/3dDIv93QyL/d0Mi/3dDIv93QyL/d0Mi/3dD
+        Iv93QyL/d0Mi/3dDIv93QyL/d0Mi/3dDIv93QyL/d0Mi/3dDIv93QyL/d0Mi/3dDIv93QyL/d0Mi/3dD
+        Iv93QyL/d0Mi/3dDIv93QyL/d0Mi/3dDIv93QyL/d0Mi/3dDIv93QyL/d0Mi/3dDIv93QyL/d0Mi/3dD
+        Iv93QyL/d0Mi/3dDIv93QyL/d0Mi/3dDIv93QyL/d0Mi/3dDIv93QyL/d0Mi/3dDIv93QyL/d0Mi/3dD
+        Iv93QyL/d0Mi/3dDIv93QyL/d0Mi/3dDIv93QyL/d0Mi/3dDIv93QyL/d0Mi/3VCIfxyQCH5bz8g9WM4
+        HOhWMRnXSSkVxjshEbIlFQuaGQ4HiA0HBHYAAABkAAAAWwAAAFMAAABKAAAAQwAAADkAAAAwAAAAJwAA
+        AB0AAAATAAAACgAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAgAAAAUAAAAIAAAADQAAABEAAAAWAAAAHAAA
+        ACIAAAApAAAAMAAAADgAAABAAAAASAAAAE8AAABYAAAAYQMCAW4LBgN5FAsGhR0RCJEuGg2jQSUTuE8t
+        F8xaMxrbYjgc5Wk8Hu9uPx/0cUEg+HRCIfx3RCL/d0Qi/3dEIv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dE
+        Iv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dE
+        Iv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dE
+        Iv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dE
+        Iv93RCL/d0Qi/3dEIv91QyH8cUEg+W4/H/VpPB7vYjgc5lozGttPLRfMQSUTuC4aDaIbDwiPEQoFgwkF
+        A3gCAQFsAAAAYQAAAFYAAABMAAAAQwAAADoAAAAzAAAALAAAACYAAAAgAAAAGgAAABQAAAAPAAAACgAA
+        AAYAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAwAAAAUAAAAIAAAADAAA
+        ABAAAAAUAAAAGQAAAB8AAAAkAAAAKgAAADEAAAA3AAAAQAAAAEYAAABMAAAAUgAAAFkAAABhAQEAbQQC
+        AXUOCASBIBIJki8bDaE8IhGwSCkVv1MvGM1cNRrcYjgc5Gc7HetrPR/xcEAg9nRCIft3RCL+d0Qi/3dE
+        Iv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dE
+        Iv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dE
+        Iv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dEIv93RCL/d0Qi/3dEIv93RCL/dUMh/HFBIPdsPh/yZzsd62M5
+        HOZeNhveVDAY0EoqFcI/JBKxMBsOoSETCZIPCQSCBAIBdQEBAG0AAABhAAAAWAAAAFIAAABLAAAARgAA
+        AD8AAAA3AAAALwAAACgAAAAhAAAAGwAAABYAAAASAAAADgAAAAoAAAAHAAAABAAAAAIAAAABAAAAAQAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAgAA
+        AAQAAAAHAAAACgAAAA0AAAAQAAAAFAAAABkAAAAfAAAAIwAAACcAAAArAAAAMQAAADcAAAA/AAAARgAA
+        AEsAAABPAAAAVAAAAFkAAABgAAAAZwEBAHEFAwJ5Fw0HiCgWDJg1Hg+mQCQTsUYoFLtLKxbCUi8YzVky
+        GtheNRvgYjgd5WY6HuppPB/ubT4g8XA/IfZzQSH5dUIi+3dDI/54RCP/eEQj/3hEI/94RCP/eEQj/3hE
+        I/94RCP/eEQj/3hEI/94RCP/eEQj/3hEI/94RCP/eEQj/3hEI/94RCP/eEQj/3hEI/51QiL8c0Ei+XBA
+        IfZtPiDyajwf72c6HutjOB3mYDYc4ls0G9xWMRnTTiwXyEcoFb1CJRO0OB8QqCkXDJoaDwiLCQUDewIB
+        AXEAAABoAAAAYQAAAFoAAABVAAAAUAAAAEsAAABGAAAAPwAAADcAAAAxAAAAKwAAACcAAAAiAAAAHgAA
+        ABkAAAATAAAADwAAAAsAAAAHAAAABQAAAAMAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAABAAAAAQAAAAIAAAAEAAAABwAAAAoAAAAMAAAADgAAABEAAAAVAAAAGQAAAB4AAAAiAAAAJgAA
+        ACoAAAAtAAAAMQAAADYAAAA8AAAAQgAAAEgAAABMAAAAUQAAAFUAAABYAAAAXQAAAGIAAABpBgQCcw4I
+        BH4WDQaHHxIJjicWC5YtGg2dNB4PpDkhEao+IxKvQiYTtEYoFLlIKhW+SysWwE0sFsNPLRfFUS8Yx1Au
+        F8dRLxjIUi8YylEvGMhQLhfHUC4Xx08tF8VNLBbDTCwWwUkqFb5HKRW7QiYTtT4kErA6IhGrNR4Ppi8b
+        Dp8oFwyZIRMKkRgOB4oRCgWDCgYDegIBAXAAAABnAAAAYQAAAFsAAABVAAAAUgAAAE0AAABIAAAAQwAA
+        AD0AAAA3AAAAMQAAAC4AAAAqAAAAJwAAACIAAAAeAAAAGQAAABQAAAARAAAADgAAAAwAAAAJAAAABwAA
+        AAQAAAACAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAgAAAAQAAAAHAAAACQAAAAwAAAAOAAAAEAAA
+        ABIAAAAVAAAAGAAAABwAAAAgAAAAJAAAACgAAAArAAAALgAAADEAAAA0AAAAOAAAAD0AAABDAAAASAAA
+        AEwAAABPAAAAUQAAAFIAAABVAAAAVwAAAFgAAABaAAAAWwAAAF0AAABeAAAAXwAAAGAAAABgAAAAYQAA
+        AGEAAABhAAAAYQAAAGEAAABgAAAAYAAAAF8AAABeAAAAXQAAAFwAAABbAAAAWAAAAFcAAABVAAAAUwAA
+        AFEAAABPAAAATQAAAEoAAABGAAAAQgAAADwAAAA3AAAAMgAAAC4AAAArAAAAKAAAACUAAAAhAAAAHAAA
+        ABkAAAAVAAAAEgAAABAAAAAOAAAADAAAAAkAAAAHAAAABAAAAAIAAAABAAAAAQAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAACAAAAAwAA
+        AAQAAAAGAAAACAAAAAoAAAANAAAADgAAABAAAAATAAAAFAAAABYAAAAZAAAAHAAAACEAAAAkAAAAJwAA
+        ACkAAAArAAAALAAAAC4AAAAvAAAAMQAAADEAAAAzAAAANAAAADQAAAA1AAAANgAAADYAAAA3AAAANwAA
+        ADcAAAA3AAAANwAAADYAAAA2AAAANQAAADQAAAA0AAAAMwAAADIAAAAxAAAALwAAAC4AAAAsAAAAKwAA
+        ACkAAAAoAAAAJgAAACMAAAAgAAAAHAAAABkAAAAWAAAAEwAAABEAAAAPAAAADQAAAAoAAAAIAAAABgAA
+        AAQAAAADAAAAAgAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAEAAAABAAAAAgAAAAMAAAAEAAAABQAAAAcAAAAIAAAACgAAAA0AAAAOAAAAEAAA
+        ABAAAAARAAAAEwAAABMAAAAUAAAAFQAAABYAAAAWAAAAFwAAABcAAAAYAAAAGAAAABkAAAAZAAAAGQAA
+        ABkAAAAZAAAAGAAAABgAAAAYAAAAFwAAABYAAAAWAAAAFQAAABQAAAATAAAAEwAAABIAAAAQAAAAEAAA
+        AA8AAAANAAAADAAAAAoAAAAIAAAABgAAAAQAAAAEAAAAAgAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAEAAAABAAAAAgAA
+        AAMAAAADAAAABAAAAAQAAAAEAAAABQAAAAUAAAAFAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
+        AAYAAAAGAAAABgAAAAYAAAAGAAAABQAAAAUAAAAEAAAABAAAAAQAAAADAAAAAwAAAAIAAAACAAAAAQAA
+        AAEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAQAAAAEAAAABAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAQAAAAEAAAABAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADAAAABgAAAAoAAAALAAAACwAAAAkAAAAGAAAAAwAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAAEAAAABwAAAAoAAAAKAAAACgAAAAcAAAAEAAAAAQAA
+        AAEAAAAAAAAAAAAAAAAAAAABAAAABgAAAAwAAAAUAAAAHAAAACEAAAAiAAAAHQAAABYAAAANAAAABwAA
+        AAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAEAAAAEAAAACQAAABAAAAAXAAAAHgAAACAAAAAeAAAAGAAAABAAAAAIAAAABAAA
+        AAEAAAAAAAAAAQAAAAUAAAAOAAAAHAAAACwAAAA6AAAAQwAAAEMAAAA9AAAAMAAAACIAAAAUAAAACgAA
+        AAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAABAAAABgAAAA0AAAAYAAAAJgAAADQAAAA+AAAAQgAAAD4AAAAzAAAAJAAAABUAAAAKAAAABAAA
+        AAEAAAADAAAACwAAABwAAAAzAAAATBEKBWwhEwqCHREJgAcEAmsAAABWAAAAQQAAACsAAAAZAAAADAAA
+        AAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAEAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
+        AAYAAAAQAAAAHgAAADEAAABHAAAAWxQMBnQhEwqBHREJeQAAAFgAAABAAAAAKAAAABQAAAAHAAAAAQAA
+        AAUAAAATAAAAKwAAAEw7IxKUZDsf1XFCI+tsQCHnWjUczzchEaEDAgFpAAAASwAAADAAAAAZAAAACgAA
+        AAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAA
+        AAUAAAAIAAAACwAAAA0AAAANAAAADAAAAAsAAAAJAAAABwAAAAUAAAAEAAAAAgAAAAEAAAABAAAAAQAA
+        AAEAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAEAAAABAAAAAQAA
+        AAIAAAACAAAABAAAAAUAAAAHAAAACgAAAAsAAAANAAAADQAAAAsAAAAJAAAABgAAAAMAAAABAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAGAAAAEAAA
+        ACEAAAA4AAAAUx4SCX5LLBe2ZDsf23FCI+xtQCHkVTIavBwQCW4AAAA+AAAAIQAAAA0AAAADAAAACAAA
+        ABoAAAA3AAAAYXZGJO9/Syf/f0sn/39LJ/9/Syf/eUcl904uGL8IBQJxAAAATAAAAC4AAAAXAAAACQAA
+        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAQAAAAKAAAAEwAA
+        ABsAAAAhAAAAJAAAACUAAAAkAAAAIgAAAB4AAAAZAAAAFgAAABMAAAAQAAAAEAAAAA8AAAAOAAAADQAA
+        AA0AAAANAAAADQAAAAwAAAAKAAAACQAAAAcAAAAFAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAA
+        AAQAAAAEAAAABAAAAAYAAAAHAAAACQAAAAsAAAAMAAAADQAAAA0AAAANAAAADQAAAA4AAAAPAAAAEAAA
+        ABEAAAATAAAAFgAAABoAAAAfAAAAIgAAACUAAAAlAAAAIgAAAB0AAAAWAAAADQAAAAcAAAADAAAAAQAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABgAAABAAAAAhAAAAOgAA
+        AFgqGQ2PZz0g3n9LJ/9/Syf/f0sn/39LJ/9/Syf/VzMbuwAAAFIAAAAtAAAAEwAAAAUAAAAKAAAAHwAA
+        AEEAAABugEsn/4BLJ/+ASyf/gEsn/4BLJ/+ASyf/fkom/VAvGMIEAgFtAAAASQAAACoAAAAUAAAABwAA
+        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAFAAAADQAAABoAAAApAAAAOAAA
+        AEMAAABIAAAASQAAAEgAAABEAAAAPwAAADkAAAAzAAAALgAAACsAAAApAAAAKAAAACcAAAAmAAAAJQAA
+        ACUAAAAlAAAAIwAAACIAAAAfAAAAGgAAABcAAAAVAAAAEwAAABMAAAATAAAAEwAAABMAAAATAAAAEwAA
+        ABMAAAAVAAAAFwAAABoAAAAfAAAAIgAAACQAAAAlAAAAJQAAACYAAAAmAAAAKAAAACgAAAAqAAAAKwAA
+        AC8AAAA0AAAAOgAAAEAAAABFAAAASAAAAEkAAABFAAAAPAAAAC8AAAAhAAAAEwAAAAgAAAADAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAUAAAAOAAAAIAAAADoAAABZJxcMkG5B
+        IuiASyf/gEsn/4BLJ/+ASyf/gEsn/4BLJ/9rPyHeAAAAXwAAADYAAAAZAAAABwAAAAsAAAAiAAAARgAA
+        AHWATCf/gEwn/4BMJ/+ATCf/gEwn/4BMJ/+ATCf/fEom+0cqFrcAAABlAAAAQwAAACYAAAASAAAABwAA
+        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAsAAAAbAAAAMQAAAEoEAgFjEQoFeBcN
+        B4ILBwN/BwQCegUDAXUBAQBtAAAAYwAAAFsAAABVAAAAUQAAAE8AAABNAAAATAAAAEsAAABKAAAASQAA
+        AEkAAABHAAAARAAAAEAAAAA6AAAANAAAADEAAAAvAAAALgAAAC4AAAAuAAAALgAAAC4AAAAvAAAALwAA
+        ADEAAAA1AAAAOgAAAEAAAABEAAAARwAAAEkAAABJAAAASgAAAEsAAABMAAAATgAAAE8AAABSAAAAVwAA
+        AF0AAABkAwEBbgYDAnYJBQN7EgsGgRYNB34KBgNsAAAAUwAAAD0AAAAlAAAAEgAAAAcAAAABAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAEAAAADQAAAB8AAAA4AAAAWB0RCYlpPiDigEwn/4BM
+        J/+ATCf/gEwn/4BMJ/+ATCf/gEwn/2k+IOAAAABnAAAAOwAAABwAAAAHAAAADAAAACQAAABHAAAAd4FM
+        KP+BTCj/gUwo/4FMKP+BTCj/gUwo/4FMKP+BTCj/fEkm+UUpFbAAAABhAAAAQAAAACQAAAARAAAABwAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAHAAAAFQAAACwAAABMIhQLf103HcpvQiPocUMj7Gs/
+        IeZjOh/dXDYc1VEwGclHKha6PSQTrDAcD54lFgyVIBMKjxsQCIsVDQeGDwkFggwHBH8JBQN+BgQCfAUD
+        AXgEAgF0AQEAbQAAAGQAAABeAAAAWQAAAFcAAABWAAAAVgAAAFUAAABVAAAAVgAAAFYAAABXAAAAWgAA
+        AF4AAABkAwEBbgQCAXUGAwJ5BwQCfQoGA34NCASAEQoFgxcNB4cdEQmMIhQLkCkYDZc2IBGjQSYUskwt
+        GL9WMxvNYDke2Wc9IOJvQSLqckMj62k+IN1BJhSkBgMCYAAAAD0AAAAgAAAADQAAAAMAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAABAAAABAAAAA0AAAAdAAAANgAAAFUXDQeCZjwg3YFMKP+BTCj/gUwo/4FM
+        KP+BTCj/gUwo/4FMKP+BTCj/aT4g4AAAAGkAAAA9AAAAHAAAAAgAAAAMAAAAJAAAAEgAAAB3gUwo/4FM
+        KP+BTCj/gUwo/4FMKP+BTCj/gUwo/4FMKP+BTCj/eEcl9DcgEaIAAABeAAAAPQAAACIAAAAQAAAABgAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAoAAAAeAAAAPRQMBm5mPCDWgUwo/4FMKP+BTCj/gUwo/4FM
+        KP+ATCj/f0so/X1KJ/x8SSf6e0gm+HhHJfV1RSTxcEIj7Gk+IeRjOh/eXjcd2lg0G9RRMBnOTC0YyUkr
+        F8VHKha/RCgVuUEmFLI+JBOtPiQTqzsjEqc6IhKmOSESpjoiEqY6IhKmPCMTqT4kE6s/JROtQicVs0Up
+        FbpIKhbASywXxU4uGMpUMRrQWjUc1184HdtlOx/gbD8h53JDI+52RiXzekgm93tJJvl9Sif6fksn/IBL
+        KP6BTCj/gUwo/4FMKP+BTCj/gUwo/3lHJfRCJxSjAAAAUQAAAC0AAAATAAAABQAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAMAAAAKAAAAGgAAADMAAABSDggEe1w2HdOBTCj/gUwo/4FMKP+BTCj/gUwo/4FM
+        KP+BTCj/gUwo/4FMKP9pPiDgAAAAagAAAD0AAAAdAAAACAAAAAwAAAAkAAAASAAAAHeBTSj/gU0o/4FN
+        KP+BTSj/gU0o/4FNKP+BTSj/gU0o/4FNKP+BTSj/dkcl8S4bDpgAAABbAAAAOwAAACEAAAAPAAAABQAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAABAAAADQAAACMAAABGPiUTm3pJJvWBTSj/gU0o/4FNKP+BTSj/gU0o/4FN
+        KP+BTSj/gU0o/4FNKP+BTSj/gU0o/4FNKP+BTSj/gU0o/4FNKP+BTSj/gU0o/4BNKP+ATSj+gEwo/oBM
+        KP5/TCj+f0wn/X5LJ/1+Syf8fksn/H5LJ/x+Syf8fksn/H5LJ/x+Syf8fksn/H5LJ/1/TCf9f0wo/oBM
+        KP6ATCj+gE0o/oFNKP+BTSj/gU0o/4FNKP+BTSj/gU0o/4FNKP+BTSj/gU0o/4FNKP+BTSj/gU0o/4FN
+        KP+BTSj/gU0o/4FNKP+BTSj/gU0o/2E6HtACAQBfAAAANgAAABkAAAAHAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAACAAAACAAAABYAAAAuAAAATgIBAXJZNRvNgE0o/4FNKP+BTSj/gU0o/4FNKP+BTSj/gU0o/4FN
+        KP+BTSj/gU0o/2k/IOAAAABqAAAAPQAAAB0AAAAIAAAADAAAACQAAABIAAAAd4JNKP+CTSj/gk0o/4JN
+        KP+CTSj/gk0o/4JNKP+CTSj/gk0o/4JNKP+CTSj/cEIi6CcXDJAAAABZAAAAOQAAAB8AAAAOAAAABAAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAEAAAANAAAAJAAAAEY6IhKXeEcl8oJNKP+CTSj/gk0o/4JNKP+CTSj/gk0o/4JN
+        KP+CTSj/gk0o/4JNKP+CTSj/gk0o/4JNKP+CTSj/gk0o/4JNKP+CTSj/gk0o/4JNKP+CTSj/gk0o/4JN
+        KP+CTSj/gk0o/4JNKP+CTSj/gk0o/4JNKP+CTSj/gk0o/4JNKP+CTSj/gk0o/4JNKP+CTSj/gk0o/4JN
+        KP+CTSj/gk0o/4JNKP+CTSj/gk0o/4JNKP+CTSj/gk0o/4JNKP+CTSj/gk0o/4JNKP+CTSj/gk0o/4JN
+        KP+CTSj/gk0o/4JNKP+CTSj/XzgdzwMCAWIAAAA3AAAAGQAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
+        AAcAAAATAAAAKQAAAEgEAgFuTS4Yv4BMKP6CTSj/gk0o/4JNKP+CTSj/gk0o/4JNKP+CTSj/gk0o/4JN
+        KP+CTSj/aj8g4AAAAGoAAAA9AAAAHQAAAAgAAAAMAAAAJAAAAEgAAAB3gk0p/4JNKf+CTSn/gk0p/4JN
+        Kf+CTSn/gk0p/4JNKf+CTSn/gk0p/4JNKf+CTSn/az8i4x0RCYgAAABXAAAANwAAAB0AAAANAAAABAAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAQAAAAoAAAAfAAAAPhAKBW9qPyHdgk0p/4JNKf+CTSn/gk0p/4JNKf+CTSn/gk0p/4JN
+        Kf+CTSn/gk0p/4JNKf+CTSn/gk0p/4JNKf+CTSn/gk0p/4JNKf+CTSn/gk0p/4JNKf+CTSn/gk0p/4JN
+        Kf+CTSn/gk0p/4JNKf+CTSn/gk0p/4JNKf+CTSn/gk0p/4JNKf+CTSn/gk0p/4JNKf+CTSn/gk0p/4JN
+        Kf+CTSn/gk0p/4JNKf+CTSn/gk0p/4JNKf+CTSn/gk0p/4JNKf+CTSn/gk0p/4JNKf+CTSn/gk0p/4JN
+        Kf+CTSn/gk0p/39LKPxFKRatAAAAVQAAAC8AAAAUAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAHAAAAEQAA
+        ACUAAABCAAAAZEUpFrR+Syj7gk0p/4JNKf+CTSn/gk0p/4JNKf+CTSn/gk0p/4JNKf+CTSn/gk0p/4JN
+        Kf9qPyHgAAAAagAAAD0AAAAdAAAACAAAAAwAAAAkAAAASAAAAHeDTin/g04p/4NOKf+DTin/g04p/4NO
+        Kf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/Yzsf2BQMBn8AAABTAAAANAAAABoAAAAKAAAAAwAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAABAAAABwAAABYAAAAvAAAAVDoiEp18Sif3g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NO
+        Kf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NO
+        Kf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NO
+        Kf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NO
+        Kf+DTin/YToe1BILBnQAAABFAAAAJAAAAA4AAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABgAAABAAAAAiAAAAPQAA
+        AF47IxKleUgm9INOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/2o/
+        IeAAAABqAAAAPQAAAB0AAAAIAAAADAAAACQAAABIAAAAd4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NO
+        Kf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/WzYczwcEAnQAAABPAAAALgAAABYAAAAIAAAAAgAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAEAAAADQAAAB8AAAA9AAAAYUosF7Z/TCj7g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NO
+        Kf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NO
+        Kf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NO
+        Kf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/21B
+        IuMYDgiCAAAAUgAAADAAAAAWAAAACAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAUAAAAOAAAAIAAAADoAAABbMR0PmXdH
+        JfCDTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/aj8h4AAA
+        AGoAAAA9AAAAHQAAAAgAAAAMAAAAJAAAAEgAAAB3g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NO
+        Kf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+ATCj9UC8ZwQUDAW4AAABIAAAAKQAAABMAAAAHAAAAAQAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAEAAAAGAAAAEgAAACgAAABIBQMBb1c0G8mCTSn+g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NO
+        Kf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NO
+        Kf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NO
+        Kf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf9zRSTsKBgMkgAA
+        AFgAAAA3AAAAHAAAAAwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAEAAAADQAAAB4AAAA3AAAAWCMVC41vQiPng04p/4NO
+        Kf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf+DTin/g04p/4NOKf9qPyHgAAAAagAA
+        AD0AAAAdAAAACAAAAAwAAAAkAAAASAAAAHeETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RP
+        Kv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv9/TCn5QygVsQAAAGQAAABBAAAAJAAAABAAAAAGAAAAAQAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAIAAAAIAAAAFwAAAC8AAABQFg0Hf2Y9INuETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RP
+        Kv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RP
+        Kv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RP
+        Kv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/fkso9z0kE6YAAABeAAAAPQAA
+        ACEAAAAPAAAABQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAoAAAAbAAAANAAAAFQSCwZ/aD4h3YRPKv+ETyr/hE8q/4RP
+        Kv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/2tAIuAAAABqAAAAPQAA
+        AB0AAAAIAAAADAAAACQAAABIAAAAd4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RP
+        Kv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv97Sif1NSARnwAAAF4AAAA8AAAAIQAAAA8AAAAFAAAAAQAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
+        AAMAAAALAAAAHAAAADYAAABXHhIKiXJEJOqETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RP
+        Kv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RP
+        Kv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RP
+        Kv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4FNKftMLRi5AAAAZAAAAEIAAAAlAAAAEAAA
+        AAYAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAIAAAAIAAAAFgAAAC4AAABPCwcDeF44HtGETyr/hE8q/4RPKv+ETyr/hE8q/4RP
+        Kv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/hE8q/4RPKv+ETyr/a0Ai4AAAAGoAAAA9AAAAHQAA
+        AAgAAAAMAAAAJAAAAEgAAAB3hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQ
+        Kv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv91RiXsKhkNkgAAAFgAAAA3AAAAHQAAAAwAAAAEAAAAAQAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
+        AAQAAAAOAAAAIAAAADsAAABdOSISonxLJ/WFUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQ
+        Kv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQ
+        Kv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQ
+        Kv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/XDcdzAUDAW8AAABJAAAAKgAAABMAAAAHAAAAAQAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAABAAAABwAAABMAAAApAAAASAQCAW5TMhrEhE8q/oVQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQ
+        Kv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv9sQSLgAAAAagAAAD0AAAAdAAAACAAA
+        AAwAAAAkAAAASAAAAHeFUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQ
+        Kv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv9rQCLgGQ8IggAAAFIAAAAxAAAAGQAAAAkAAAACAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
+        AAUAAAAQAAAAJAAAAEEAAABkTC0YuYJOKfyFUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQ
+        Kv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQ
+        Kv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQ
+        Kv+FUCr/hVAq/4VQKv+FUCr/hVAq/2k/Id4VDQeAAAAAUgAAADAAAAAYAAAACQAAAAIAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
+        AAYAAAAQAAAAJAAAAEAAAABjQygVsIFNKfqFUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQ
+        Kv+FUCr/hVAq/4VQKv+FUCr/hVAq/4VQKv+FUCr/hVAq/2xBIuAAAABqAAAAPQAAAB0AAAAIAAAADAAA
+        ACQAAABIAAAAd4ZQKv+GUCr/hlAq/4ZQKv+GUCr/hlAq/4ZQKv+GUCr/hlAq/4ZQKv+GUCr/hlAq/4ZQ
+        Kv+GUCr/hlAq/4ZQKv+GUCr/hlAq/4VQKv9hOh7RCAUDcwAAAEoAAAArAAAAFAAAAAcAAAACAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
+        AAcAAAATAAAAKgAAAEkNCAR0Yjof0oZQKv+GUCr/hlAq/4ZQKv+GUCr/hlAq/4ZQKv+GUCr/hlAq/4ZQ
+        Kv+GUCr/hlAq/4ZQKv+GUCr/hlAq/4ZQKv+GUCr/hlAq/4ZQKv+GUCr/hlAq/4ZQKv+GUCr/hlAq/4ZQ
+        Kv+GUCr/hlAq/4ZQKv+GUCr/hlAq/4ZQKv+GUCr/hlAq/4ZQKv+GUCr/hlAq/4ZQKv+GUCr/hlAq/4ZQ
+        Kv+GUCr/hlAq/4ZQKv92RyXtKxkNlAAAAFkAAAA3AAAAHAAAAAwAAAADAAAAAQAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAEAAAADgAA
+        ACAAAAA7AAAAXTUfEJ56SSbxhlAq/4ZQKv+GUCr/hlAq/4ZQKv+GUCr/hlAq/4ZQKv+GUCr/hlAq/4ZQ
+        Kv+GUCr/hlAq/4ZQKv+GUCr/hlAq/4ZQKv+GUCr/bUEi4AAAAGoAAAA9AAAAHQAAAAgAAAAMAAAAJAAA
+        AEgAAAB3hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZR
+        K/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4VRK/5TMhvAAAAAZgAAAEMAAAAlAAAAEQAAAAYAAAABAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
+        AAkAAAAYAAAAMQAAAFMaEAiDcEQk5YZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZR
+        K/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZR
+        K/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZR
+        K/+GUSv/gE4p+EAnFa0AAABhAAAAPwAAACIAAAAOAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAAsAAAAcAAAANgAA
+        AFciFAuLdEYl6YZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZR
+        K/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/9tQiPgAAAAagAAAD0AAAAdAAAACAAAAAwAAAAkAAAASAAA
+        AHeGUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZR
+        K/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4FOKflGKhatAAAAXwAAAD0AAAAiAAAADwAAAAUAAAABAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABAAA
+        AAwAAAAdAAAAOQAAAFsxHhCcfEso9IZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZR
+        K/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZR
+        K/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4VR
+        K/5XNBzHBAIBbgAAAEcAAAAoAAAAEgAAAAYAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAIAAAAFwAAADAAAABRFAwGfmpA
+        It2GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZRK/+GUSv/hlEr/4ZR
+        K/+GUSv/hlEr/4ZRK/+GUSv/hlEr/21CI+AAAABqAAAAPQAAAB0AAAAIAAAADAAAACQAAABIAAAAd4dR
+        K/+HUSv/h1Er/4dRK/+HUSv/h1Er/4dRK/+HUSv/h1Er/4dRK/+HUSv/h1Er/4dRK/+HUSv/h1Er/4dR
+        K/+HUSv/h1Er/4dRK/+HUSv/h1Er/3pJJ/AuHA+WAAAAWQAAADcAAAAdAAAADAAAAAQAAAABAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABQAA
+        AA8AAAAjAAAAQAAAAGRPMBm7hVAq/YdRK/+HUSv/h1Er/4dRK/+HUSv/h1Er/4dRK/+HUSv/h1Er/4dR
+        K/+HUSv/h1Er/4dRK/+HUSv/h1Er/4dRK/+HUSv/h1Er/4dRK/+HUSv/h1Er/4dRK/+HUSv/h1Er/4dR
+        K/+HUSv/h1Er/4dRK/+HUSv/h1Er/4dRK/+HUSv/h1Er/4dRK/+HUSv/h1Er/4dRK/+HUSv/b0Ij4hIL
+        Bn4AAABRAAAALwAAABYAAAAIAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABgAAABMAAAApAAAASQQCAW9aNh3Jh1Er/4dR
+        K/+HUSv/h1Er/4dRK/+HUSv/h1Er/4dRK/+HUSv/h1Er/4dRK/+HUSv/h1Er/4dRK/+HUSv/h1Er/4dR
+        K/+HUSv/h1Er/4dRK/+HUSv/bkIj4AAAAGoAAAA9AAAAHQAAAAgAAAAMAAAAJAAAAEgAAAB3h1Ir/4dS
+        K/+HUiv/h1Ir/4dSK/+HUiv/h1Ir/4dSK/+HUiv/h1Ir/4dSK/+HUiv/h1Ir/4dSK/+HUiv/h1Ir/4dS
+        K/+HUiv/h1Ir/4dSK/+HUiv/h1Ir/3BEJOMgEwqHAAAAUgAAADEAAAAYAAAACQAAAAIAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABgAA
+        ABMAAAAqAAAASgoGA3RkPSDVh1Ir/4dSK/+HUiv/h1Ir/4dSK/+HUiv/h1Ir/4dSK/+HUiv/h1Ir/4dS
+        K/+HUiv/h1Ir/4dSK/+HUiv/h1Ir/4dSK/+HUiv/h1Ir/4dSK/+HUiv/h1Ir/4dSK/+HUiv/h1Ir/4dS
+        K/+HUiv/h1Ir/4dSK/+HUiv/h1Ir/4dSK/+HUiv/h1Ir/4dSK/+HUiv/h1Ir/3pKJ/AuHA+YAAAAWgAA
+        ADcAAAAcAAAACwAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAUAAAAPAAAAIwAAAEAAAABkSSwXtYJPKfqHUiv/h1Ir/4dS
+        K/+HUiv/h1Ir/4dSK/+HUiv/h1Ir/4dSK/+HUiv/h1Ir/4dSK/+HUiv/h1Ir/4dSK/+HUiv/h1Ir/4dS
+        K/+HUiv/h1Ir/4dSK/9uQyPgAAAAagAAAD0AAAAdAAAACAAAAAwAAAAkAAAASAAAAHeIUiz/iFIs/4hS
+        LP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hS
+        LP+IUiz/iFIs/4hSLP+IUiz/iFIs/2U9IdQJBQNyAAAASQAAACoAAAATAAAABwAAAAEAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAACQAA
+        ABgAAAAyAAAAVSMVC4x2RybriFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hS
+        LP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hS
+        LP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+GUSv9SCsXtAAAAGMAAABAAAAAIgAA
+        AA4AAAAEAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAEAAAAEAAAADAAAAB0AAAA5AAAAWzUgEZ5+TCn0iFIs/4hSLP+IUiz/iFIs/4hS
+        LP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hS
+        LP+IUiz/iFIs/25DJOAAAABqAAAAPQAAAB0AAAAIAAAADAAAACQAAABIAAAAd4hSLP+IUiz/iFIs/4hS
+        LP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hS
+        LP+IUiz/iFIs/4hSLP+IUiz/hlEr/VExGrwAAABkAAAAQQAAACQAAAAQAAAABQAAAAEAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAEAAAADAAA
+        AB8AAAA8AAAAYD0lFKmCTir5iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hS
+        LP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hS
+        LP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/2Y+IdcLBgN1AAAASQAAACkAAAATAAAABgAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAgAAAAkAAAAYAAAAMQAAAFMeEgqHdEYl54hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hS
+        LP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hSLP+IUiz/iFIs/4hS
+        LP+IUiz/bkMk4AAAAGoAAAA9AAAAHQAAAAgAAAAMAAAAJAAAAEgAAAB3iFMs/4hTLP+IUyz/iFMs/4hT
+        LP+IUyz/iFMs/4hTLP+IUyz/iFMs/4hTLP+IUyz/iFMs/4hTLP+IUyz/iFMs/4hTLP+IUyz/iFMs/4hT
+        LP+IUyz/iFMs/4hTLP+IUyz/f04p9TskE6MAAABcAAAAOgAAAB4AAAANAAAABAAAAAEAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAFAAAAEQAA
+        ACgAAABHAwIBbl05HsyIUyz/iFMs/4hTLP+IUyz/iFMs/4hTLP+IUyz/iFMs/4hTLP+IUyz/iFMs/4hT
+        LP+IUyz/iFMs/4hTLP+IUyz/iFMs/4hTLP+IUyz/iFMs/4hTLP+IUyz/iFMs/4hTLP+IUyz/iFMs/4hT
+        LP+IUyz/iFMs/4hTLP+IUyz/iFMs/4hTLP95SifuKhoOkgAAAFUAAAAyAAAAGAAAAAkAAAACAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAEAAAAHAAAAEwAAACoAAABJDAcEdGQ9INSIUyz/iFMs/4hTLP+IUyz/iFMs/4hTLP+IUyz/iFMs/4hT
+        LP+IUyz/iFMs/4hTLP+IUyz/iFMs/4hTLP+IUyz/iFMs/4hTLP+IUyz/iFMs/4hTLP+IUyz/iFMs/4hT
+        LP9uQyTgAAAAagAAAD0AAAAdAAAACAAAAAwAAAAkAAAASAAAAHeJUyz/iVMs/4lTLP+JUyz/iVMs/4lT
+        LP+JUyz/iVMs/4lTLP+JUyz/iVMs/4lTLP+JUyz/iVMs/4lTLP+JUyz/iVMs/4lTLP+JUyz/iVMs/4lT
+        LP+JUyz/iVMs/4lTLP+JUyz/dkgm6SYXDIsAAABUAAAAMQAAABkAAAAJAAAAAgAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAIAAAAFgAA
+        ADAAAABSHhIJhnRGJeeJUyz/iVMs/4lTLP+JUyz/iVMs/4lTLP+JUyz/iVMs/4lTLP+JUyz/iVMs/4lT
+        LP+JUyz/iVMs/4lTLP+JUyz/iVMs/4lTLP+JUyz/iVMs/4lTLP+JUyz/iVMs/4lTLP+JUyz/iVMs/4lT
+        LP+JUyz/iVMs/4lTLP+JUyz/h1Ir/UksF7MAAABhAAAAPQAAAB8AAAANAAAABAAAAAEAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABQAA
+        AA8AAAAjAAAAQQAAAGRSMRq9h1Ir/olTLP+JUyz/iVMs/4lTLP+JUyz/iVMs/4lTLP+JUyz/iVMs/4lT
+        LP+JUyz/iVMs/4lTLP+JUyz/iVMs/4lTLP+JUyz/iVMs/4lTLP+JUyz/iVMs/4lTLP+JUyz/iVMs/29D
+        JOAAAABqAAAAPQAAAB0AAAAIAAAADAAAACQAAABIAAAAd4lULf+JVC3/iVQt/4lULf+JVC3/iVQt/4lU
+        Lf+JVC3/iVQt/4lULf+JVC3/iVQt/4lULf+JVC3/iVQt/4lULf+JVC3/iVQt/4lULf+JVC3/iVQt/4lU
+        Lf+JVC3/iVQt/4lULf+JVC3/aUAi1xAKBXcAAABKAAAAKgAAABMAAAAGAAAAAQAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAALAAAAHQAA
+        ADkAAABcPiYUpYNQK/iJVC3/iVQt/4lULf+JVC3/iVQt/4lULf+JVC3/iVQt/4lULf+JVC3/iVQt/4lU
+        Lf+JVC3/iVQt/4lULf+JVC3/iVQt/4lULf+JVC3/iVQt/4lULf+JVC3/iVQt/4lULf+JVC3/iVQt/4lU
+        Lf+JVC3/iVQt/4lULf9pQSPZEAoFeAAAAEkAAAApAAAAEgAAAAUAAAABAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAQAAAAMAAAAHQAA
+        ADkAAABbOyQTooBOKvWJVC3/iVQt/4lULf+JVC3/iVQt/4lULf+JVC3/iVQt/4lULf+JVC3/iVQt/4lU
+        Lf+JVC3/iVQt/4lULf+JVC3/iVQt/4lULf+JVC3/iVQt/4lULf+JVC3/iVQt/4lULf+JVC3/b0Ql4AAA
+        AGoAAAA9AAAAHQAAAAgAAAAMAAAAJAAAAEgAAAB3ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pU
+        Lf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pU
+        Lf+KVC3/ilQt/4pULf+IUyz+UjIbvAAAAGQAAABAAAAAIwAAAA8AAAAFAAAAAQAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAUAAAAQAAAAJQAA
+        AEMAAABoYzwgzopULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pU
+        Lf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pU
+        Lf+KVC3/f00p8zIeEJgAAABXAAAAMwAAABgAAAAJAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAACQAAABgAAAAxAAAAUhsQ
+        CYR3SCfoilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pU
+        Lf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf9wRCXgAAAAagAA
+        AD0AAAAdAAAACAAAAAwAAAAkAAAASAAAAHeKVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pU
+        Lf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pU
+        Lf+KVC3/ilQt/4pULf+ATir0OCISoAAAAFsAAAA5AAAAHQAAAAwAAAADAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAcAAAAVAAAALgAA
+        AFAjFQuIeEkn6opULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pU
+        Lf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4lT
+        Lf5YNh3DAAAAZAAAAEAAAAAhAAAADQAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAYAAAASAAAAKQAAAEkMBwR0ZD0g0YpU
+        Lf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pU
+        Lf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/4pULf+KVC3/ilQt/3FFJeAAAABqAAAAPgAA
+        AB0AAAAJAAAADAAAACQAAABIAAAAd4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tV
+        Lf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tV
+        Lf+LVS3/i1Ut/4tVLf92SCbmGxAJgwAAAFIAAAAwAAAAFwAAAAgAAAABAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAoAAAAcAAAAOgAA
+        AGBJLRixiVQs/ItVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tV
+        Lf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/eEkn6R0S
+        CoQAAABOAAAAKwAAABMAAAAGAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAEAAAADQAAACAAAAA+AAAAYk0vGbaJVCz9i1Ut/4tV
+        Lf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tV
+        Lf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/dEcl4wAAAGoAAAA+AAAAHQAA
+        AAkAAAAMAAAAJAAAAEgAAAB3i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tV
+        Lf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tV
+        Lf+LVS3/i1Ut/4tVLf9hOx/NCQUDcQAAAEgAAAAoAAAAEgAAAAUAAAABAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABAAAABAAAAAoAAAASg4J
+        BXhuQyTei1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tV
+        Lf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4hTLPtKLRiyAAAAXgAA
+        ADkAAAAcAAAACgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAkAAAAZAAAANAAAAFcwHRCXgE4p8otVLf+LVS3/i1Ut/4tV
+        Lf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tV
+        Lf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf+LVS3/i1Ut/4tVLf90RybjAAAAawAAAD4AAAAeAAAACQAA
+        AAwAAAAkAAAASAAAAHeLVS7/i1Uu/4tVLv+LVS7/i1Uu/4tVLv+LVS7/i1Uu/4tVLv+LVS7/i1Uu/4tV
+        Lv+LVS7/i1Uu/4tVLv+LVS7/i1Uu/4tVLv+LVS7/i1Uu/4tVLv+LVS7/i1Uu/4tVLv+LVS7/i1Uu/4tV
+        Lv+LVS7/i1Uu/4ZSLPpHKxewAAAAYQAAAD0AAAAfAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAACAAAABkAAAA2AAAAWzoj
+        E6OEUSz4i1Uu/4tVLv+LVS7/i1Uu/4tVLv+LVS7/i1Uu/4tVLv+LVS7/i1Uu/4tVLv+LVS7/i1Uu/4tV
+        Lv+LVS7/i1Uu/4tVLv+LVS7/i1Uu/4tVLv+LVS7/i1Uu/4tVLv+LVS7/cUUl4Q8JBXgAAABJAAAAKAAA
+        ABAAAAAEAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAEAAAAGAAAAEwAAACsAAABLFw4IfG5DJNyLVS7/i1Uu/4tVLv+LVS7/i1Uu/4tV
+        Lv+LVS7/i1Uu/4tVLv+LVS7/i1Uu/4tVLv+LVS7/i1Uu/4tVLv+LVS7/i1Uu/4tVLv+LVS7/i1Uu/4tV
+        Lv+LVS7/i1Uu/4tVLv+LVS7/i1Uu/4tVLv+LVS7/i1Uu/3RHJuMAAABrAAAAPgAAAB4AAAAJAAAADAAA
+        ACQAAABIAAAAd4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xW
+        Lv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xW
+        Lv+MVi7/jFYu/39OKvAlFwyNAAAAVQAAADEAAAAXAAAACAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADwAAACUAAABHBgQCcl46
+        H86MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xW
+        Lv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4ZSLPk8JRSmAAAAXAAAADcAAAAZAAAACAAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAABAAAABAAAAA0AAAAhAAAAPwAAAGRYNh3Bi1Yu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xW
+        Lv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xW
+        Lv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/dUgm4wAAAGsAAAA+AAAAHgAAAAkAAAAMAAAAJAAA
+        AEgAAAB3jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xW
+        Lv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xW
+        Lv+MVi7/jFYu/2c/ItUMBwR0AAAASQAAACgAAAARAAAABQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAHAAAAGAAAADMAAABYKRkOlX5O
+        KfGMVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xW
+        Lv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/Zj4h1AsHBHUAAABIAAAAJQAAAA8AAAAEAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAIAAAAJAAAAGQAAADQAAABYNiESm4RRK/aMVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xW
+        Lv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xW
+        Lv+MVi7/jFYu/4xWLv+MVi7/jFYu/4xWLv91SCbjAAAAawAAAD4AAAAeAAAACQAAAAwAAAAkAAAASAAA
+        AHeNVi7/jVYu/41WLv+NVi7/jVYu/41WLv+NVi7/jVYu/41WLv+NVi7/jVYu/41WLv+NVi7/jVYu/41W
+        Lv+NVi7/jVYu/41WLv+NVi7/jVYu/41WLv+NVi7/jVYu/41WLv+NVi7/jVYu/41WLv+NVi7/jVYu/41W
+        Lv+NVi7/iVQt+0suGbIAAABhAAAAPAAAAB8AAAAMAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAANAAAAIgAAAEMBAQBrVDMbwY1W
+        Lv+NVi7/jVYu/41WLv+NVi7/jVYu/41WLv+NVi7/jVYu/41WLv+NVi7/jVYu/41WLv+NVi7/jVYu/41W
+        Lv+NVi7/jVYu/41WLv+NVi7/jVYu/4RRK/YwHRCcAAAAWgAAADQAAAAYAAAABwAAAAEAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABgAA
+        ABMAAAAqAAAASxMLBnl0RybhjVYu/41WLv+NVi7/jVYu/41WLv+NVi7/jVYu/41WLv+NVi7/jVYu/41W
+        Lv+NVi7/jVYu/41WLv+NVi7/jVYu/41WLv+NVi7/jVYu/41WLv+NVi7/jVYu/41WLv+NVi7/jVYu/41W
+        Lv+NVi7/jVYu/41WLv+NVi7/jVYu/3ZIJuMAAABrAAAAPgAAAB4AAAAJAAAADAAAACQAAABIAAAAd41X
+        L/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41X
+        L/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41X
+        L/+NVy//e0wp7CUXDIwAAABUAAAAMQAAABYAAAAHAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAcAAAAVAAAALgAAAFIbEQmGd0ko541X
+        L/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41X
+        L/+NVy//jVcv/41XL/+NVy//XzsgzQUDAnAAAABGAAAAJQAAAA4AAAADAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAANAAAAIAAA
+        AD4AAABjVjUdvoxXL/6NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41X
+        L/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41X
+        L/+NVy//jVcv/41XL/+NVy//dkkn4wAAAGsAAAA+AAAAHgAAAAkAAAAMAAAAJAAAAEgAAAB3jVcv/41X
+        L/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41X
+        L/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41X
+        L/+NVy//ZT4i0QoGA3IAAABHAAAAJwAAABAAAAAEAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAsAAAAdAAAAPAAAAGFLLhm0ilUu/I1X
+        L/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41X
+        L/+NVy//jVcv/35NKvArGg6WAAAAWAAAADMAAAAXAAAABwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAACAAAABgAAAAyAAAAVjMg
+        EZeBUCvyjVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41X
+        L/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41XL/+NVy//jVcv/41X
+        L/+NVy//jVcv/41XL/92SSfjAAAAawAAAD4AAAAeAAAACQAAAAwAAAAkAAAASAAAAHeOVy//jlcv/45X
+        L/+OVy//jlcv/45XL/+OVy//jlcv/45XL/+OVy//jlcv/45XL/+OVy//jlcv/45XL/+OVy//jlcv/45X
+        L/+OVy//jlcv/45XL/+OVy//jlcv/45XL/+OVy//jlcv/45XL/+OVy//jlcv/45XL/+OVy//jlcv/45X
+        L/+JVC36QykWqwAAAF4AAAA6AAAAHQAAAAoAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABQAAABEAAAApAAAASxELBnpyRibfjlcv/45X
+        L/+OVy//jlcv/45XL/+OVy//jlcv/45XL/+OVy//jlcv/45XL/+OVy//jlcv/45XL/+OVy//jlcv/45X
+        L/+OVy//VzYdxAEBAGsAAABDAAAAIgAAAA0AAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAUAAAARAAAAKAAAAEkMCAR1cEUl3I5X
+        L/+OVy//jlcv/45XL/+OVy//jlcv/45XL/+OVy//jlcv/45XL/+OVy//jlcv/45XL/+OVy//jlcv/45X
+        L/+OVy//jlcv/45XL/+OVy//jlcv/45XL/+OVy//jlcv/45XL/+OVy//jlcv/45XL/+OVy//jlcv/45X
+        L/+OVy//jlcv/3dJJ+MAAABrAAAAPgAAAB4AAAAJAAAADAAAACQAAABIAAAAd45YL/+OWC//jlgv/45Y
+        L/+OWC//jlgv/45YL/+OWC//jlgv/45YL/+OWC//jlgv/45YL/+OWC//jlgv/45YL/+OWC//jlgv/45Y
+        L/+OWC//jlgv/45YL/+OWC//jlgv/45YL/+OWC//jlgv/45YL/+OWC//jlgv/45YL/+OWC//jlgv/45Y
+        L/91SCfkGA8IgwAAAFIAAAAuAAAAFQAAAAcAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAACAAAABkAAAA3AAAAXEIpFqmHVC34jlgv/45Y
+        L/+OWC//jlgv/45YL/+OWC//jlgv/45YL/+OWC//jlgv/45YL/+OWC//jlgv/45YL/+OWC//jlgv/35O
+        Ku0oGQ2PAAAAVAAAADAAAAAWAAAABwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAACwAAAB4AAAA8AAAAYEsuGbGLVi78jlgv/45Y
+        L/+OWC//jlgv/45YL/+OWC//jlgv/45YL/+OWC//jlgv/45YL/+OWC//jlgv/45YL/+OWC//jlgv/45Y
+        L/+OWC//jlgv/45YL/+OWC//jlgv/45YL/+OWC//jlgv/45YL/+OWC//jlgv/45YL/+OWC//jlgv/45Y
+        L/+OWC//d0on4wAAAGsAAAA+AAAAHgAAAAkAAAAMAAAAJAAAAEgAAAB3j1gw/49YMP+PWDD/j1gw/49Y
+        MP+PWDD/j1gw/49YMP+PWDD/j1gw/49YMP+PWDD/j1gw/49YMP+PWDD/j1gw/49YMP+PWDD/j1gw/49Y
+        MP+PWDD/j1gw/49YMP+PWDD/j1gw/49YMP+PWDD/j1gw/49YMP+PWDD/j1gw/49YMP+PWDD/j1gw/45Y
+        MP9XNR3BAQEAawAAAEMAAAAiAAAADQAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADwAAACUAAABIBAIBcmxDJNmPWDD/j1gw/49Y
+        MP+PWDD/j1gw/49YMP+PWDD/j1gw/49YMP+PWDD/j1gw/49YMP+PWDD/j1gw/49YMP+NVy/9VjUdvgAA
+        AGQAAAA9AAAAHwAAAAwAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAcAAAAWAAAALwAAAFIkFgyLfEwq649YMP+PWDD/j1gw/49Y
+        MP+PWDD/j1gw/49YMP+PWDD/j1gw/49YMP+PWDD/j1gw/49YMP+PWDD/j1gw/49YMP+PWDD/j1gw/49Y
+        MP+PWDD/j1gw/49YMP+PWDD/j1gw/49YMP+PWDD/j1gw/49YMP+PWDD/j1gw/49YMP+PWDD/j1gw/49Y
+        MP93SijjAAAAawAAAD4AAAAeAAAACQAAAAwAAAAkAAAASAAAAHePWTD/j1kw/49ZMP+PWTD/j1kw/49Z
+        MP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49Z
+        MP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/4NR
+        LPIrGw6WAAAAWAAAADMAAAAYAAAABwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAHAAAAGQAAADQAAABaOSMToYdULfaPWTD/j1kw/49Z
+        MP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/3lLKeceEwqEAAAATgAA
+        ACsAAAATAAAABQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAADAAAADgAAACMAAABDAwIBa106H8iPWTD/j1kw/49ZMP+PWTD/j1kw/49Z
+        MP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49Z
+        MP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/3dK
+        KOMAAABrAAAAPgAAAB4AAAAJAAAADAAAACQAAABIAAAAd49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49Z
+        MP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49Z
+        MP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/2U/
+        ItIEAgFxAAAARwAAACUAAAAPAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAOAAAAJAAAAEUEAgFuZkAi0Y9ZMP+PWTD/j1kw/49Z
+        MP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+OWDD+VDQcugAAAGAAAAA6AAAAHAAA
+        AAoAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAQAAAAcAAAAYAAAANAAAAFkvHRCZhFIs9I9ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49Z
+        MP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49Z
+        MP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/j1kw/49ZMP+PWTD/d0oo4wAA
+        AGsAAAA+AAAAHgAAAAkAAAAMAAAAJAAAAEgAAAB3kFkw/5BZMP+QWTD/kFkw/5BZMP+QWTD/kFkw/5BZ
+        MP+QWTD/kFkw/5BZMP+QWTD/kFkw/5BZMP+QWTD/kFkw/5BZMP+QWTD/kFkw/5BZMP+QWTD/kFkw/5BZ
+        MP+QWTD/kFkw/5BZMP+QWTD/kFkw/5BZMP+QWTD/kFkw/5BZMP+QWTD/kFkw/5BZMP+QWTD/iFQt9zwl
+        FKQAAABbAAAANgAAABkAAAAIAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAcAAAAWAAAAMQAAAFYsGw+ThVIs9JBZMP+QWTD/kFkw/5BZ
+        MP+QWTD/kFkw/5BZMP+QWTD/kFkw/5BZMP+QWTD/kFkw/3xNKekbEQmAAAAATAAAACkAAAARAAAABAAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAEAAAADwAAACYAAABIEAoFd2hAI9SQWTD/kFkw/5BZMP+QWTD/kFkw/5BZMP+QWTD/kFkw/5BZ
+        MP+QWTD/kFkw/5BZMP+QWTD/kFkw/5BZMP+QWTD/kFkw/5BZMP+QWTD/kFkw/5BZMP+QWTD/kFkw/5BZ
+        MP+QWTD/kFkw/5BZMP+QWTD/kFkw/5BZMP+QWTD/kFkw/5BZMP+QWTD/kFkw/5BZMP94SijjAAAAawAA
+        AD4AAAAeAAAACQAAAAwAAAAkAAAASAAAAHeQWjD/kFow/5BaMP+QWjD/kFow/5BaMP+QWjD/kFow/5Ba
+        MP+QWjD/kFow/5BaMP+QWjD/kFow/5BaMP+QWjD/kFow/5BaMP+QWjD/kFow/5BaMP+QWjD/kFow/5Ba
+        MP+QWjD/kFow/5BaMP+QWjD/kFow/5BaMP+QWjD/kFow/5BaMP+QWjD/kFow/5BaMP+QWjD/dkon4QsH
+        BHYAAABJAAAAJwAAABAAAAAEAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAwAAAAhAAAAQQAAAGdgPCDJkFow/5BaMP+QWjD/kFow/5Ba
+        MP+QWjD/kFow/5BaMP+QWjD/kFow/5BaMP+NWC/8UTIbtgAAAF8AAAA5AAAAGwAAAAkAAAABAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
+        AAgAAAAZAAAANwAAAFxEKheqjFgv+5BaMP+QWjD/kFow/5BaMP+QWjD/kFow/5BaMP+QWjD/kFow/5Ba
+        MP+QWjD/kFow/5BaMP+QWjD/kFow/5BaMP+QWjD/kFow/5BaMP+QWjD/kFow/5BaMP+QWjD/kFow/5Ba
+        MP+QWjD/kFow/5BaMP+QWjD/kFow/5BaMP+QWjD/kFow/5BaMP+QWjD/kFow/3hLKOMAAABrAAAAPgAA
+        AB4AAAAJAAAADAAAACQAAABIAAAAd5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5Fa
+        Mf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5Fa
+        Mf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+OWDD8Si4ZsQAA
+        AF4AAAA3AAAAGgAAAAkAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAABAAAABgAAABUAAAAvAAAAUykZDpGDUSzwkVox/5FaMf+RWjH/kVox/5Fa
+        Mf+RWjH/kVox/5FaMf+RWjH/kVox/31NKugXDgiAAAAATAAAACkAAAAQAAAABAAAAAEAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAEAAAAEAAA
+        ACgAAABJEAoFeHdKKOGRWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5Fa
+        Mf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5Fa
+        Mf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/eUsp4wAAAGsAAAA+AAAAHgAA
+        AAkAAAAMAAAAJAAAAEgAAAB3kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5Fa
+        Mf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5Fa
+        Mf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf94SinjFg4HfQAA
+        AEwAAAAqAAAAEgAAAAUAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAACAAAADAAAACAAAABAAwIBaVk3HsORWjH/kVox/5FaMf+RWjH/kVox/5Fa
+        Mf+RWjH/kVox/5FaMf+RWjH/UjMcuwAAAGIAAAA6AAAAHAAAAAkAAAABAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAkAAAAbAAAAOAAA
+        AF5MLxqxjlgw/JFaMf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5Fa
+        Mf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5Fa
+        Mf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf+RWjH/kVox/5FaMf95SynjAAAAawAAAD4AAAAeAAAACQAA
+        AAwAAAAkAAAASAAAAHeRWzH/kVsx/5FbMf+RWzH/kVsx/5FbMf+RWzH/kVsx/5FbMf+RWzH/kVsx/5Fb
+        Mf+RWzH/kVsx/5FbMf+RWzH/kVsx/5FbMf+RWzH/kVsx/5FbMf+RWzH/kVsx/5FbMf+RWzH/kVsx/5Fb
+        Mf+RWzH/kVsx/5FbMf+RWzH/kVsx/5FbMf+RWzH/kVsx/5FbMf+RWzH/kVsx/49aMP1WNh29AAAAYgAA
+        AD0AAAAeAAAACwAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAEAAAAGAAAAFAAAAC4AAABSJBcMi4BQK+yRWzH/kVsx/5FbMf+RWzH/kVsx/5Fb
+        Mf+RWzH/kVsx/3xOKukeEwqIAAAAUAAAACsAAAASAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAEAAAAEQAAACkAAABMHBEJgX5P
+        KumRWzH/kVsx/5FbMf+RWzH/kVsx/5FbMf+RWzH/kVsx/5FbMf+RWzH/kVsx/5FbMf+RWzH/kVsx/5Fb
+        Mf+RWzH/kVsx/5FbMf+RWzH/kVsx/5FbMf+RWzH/kVsx/5FbMf+RWzH/kVsx/5FbMf+RWzH/kVsx/5Fb
+        Mf+RWzH/kVsx/5FbMf+RWzH/kVsx/5FbMf+RWzH/kVsx/3lMKeMAAABqAAAAPgAAAB0AAAAJAAAADAAA
+        ACMAAABHAAAAdpJbMf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5Jb
+        Mf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5Jb
+        Mf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/39PK+sjFgyKAAAAUwAA
+        AC8AAAAWAAAABwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAMAAAALAAAAHwAAAD0AAABkWTcev5FaMf6SWzH/klsx/5JbMf+SWzH/klsx/5Jb
+        Mf+RWzH+TjEauAEBAGgAAAA+AAAAHwAAAAsAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAoAAAAcAAAAOgAAAGFYNx28kVox/pJb
+        Mf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5Jb
+        Mf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5Jb
+        Mf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/eUsp4QAAAGkAAAA9AAAAHAAAAAgAAAALAAAAIgAA
+        AEYAAAB2klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5Jb
+        Mf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5Jb
+        Mf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/1k4HsMBAQBrAAAAQwAA
+        ACIAAAANAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAQAAAAUAAAATAAAAKwAAAE4hFQuFfE0q55JbMf+SWzH/klsx/5JbMf+SWzH/klsx/35P
+        KuocEQmGAAAAUQAAAC0AAAATAAAABgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAFAAAAEgAAACsAAABNIxYMh39PKumSWzH/klsx/5Jb
+        Mf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5Jb
+        Mf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf+SWzH/klsx/5Jb
+        Mf+SWzH/klsx/5JbMf+SWzH/klsx/5JbMf90SCfcAAAAZwAAADsAAAAbAAAABwAAAAoAAAAiAAAARAAA
+        AHOPWjH7klwy/5JcMv+SXDL/klwy/5JcMv+SXDL/klwy/5JcMv+SXDL/klwy/5JcMv+SXDL/klwy/5Jc
+        Mv+SXDL/klwy/5JcMv+SXDL/klwy/5JcMv+SXDL/klwy/5JcMv+SXDL/klwy/5JcMv+SXDL/klwy/5Jc
+        Mv+SXDL/klwy/5JcMv+SXDL/klwy/5JcMv+SXDL/klwy/5JcMv+SXDL/glIt7ywcD5YAAABYAAAAMgAA
+        ABcAAAAHAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAgAAAAoAAAAcAAAAOQAAAF5YOB67kVwy/5JcMv+SXDL/klwy/5JcMv+SXDL/VzceugAA
+        AGEAAAA8AAAAHgAAAAsAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAoAAAAdAAAAOwAAAGJfPCHDkFsx/pJcMv+SXDL/klwy/5Jc
+        Mv+SXDL/klwy/5JcMv+SXDL/klwy/5JcMv+SXDL/klwy/5JcMv+SXDL/klwy/5JcMv+SXDL/klwy/5Jc
+        Mv+SXDL/klwy/5JcMv+SXDL/klwy/5JcMv+SXDL/klwy/5JcMv+SXDL/klwy/5JcMv+SXDL/klwy/5Jc
+        Mv+SXDL/klwy/5JcMv+SXDL/klwy/2xEJdIAAABjAAAAOAAAABkAAAAHAAAACgAAAB8AAABAAAAAboVT
+        Le6TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5Nc
+        Mv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5Nc
+        Mv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/YDwhygEBAG4AAABFAAAAIwAA
+        AA0AAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAABAAAABAAAABAAAAAnAAAARxYOCHZ4Synek1wy/5NcMv+TXDL/k1wy/3dLKd0cEQl6AAAASQAA
+        ACgAAAASAAAABQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAEAAAAGAAAAEwAAAC0AAABPLBwPjoVTLe+TXDL/k1wy/5NcMv+TXDL/k1wy/5Nc
+        Mv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5Nc
+        Mv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5Nc
+        Mv+TXDL/k1wy/5NcMv+SWzL+XjsgwgAAAF4AAAA0AAAAFwAAAAUAAAAIAAAAHAAAADwAAABod0sp35Nc
+        Mv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5Nc
+        Mv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5Nc
+        Mv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+GVC7yJhgNkgAAAFgAAAAxAAAAFgAA
+        AAYAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAABAAAACQAAABgAAAAxAAAAUCoaDoR0SSjXilcv9YpXL/V2SijaLRwPhgAAAFAAAAAxAAAAGAAA
+        AAkAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAwAAAAwAAAAfAAAAPwAAAGVeOyDDk1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5Nc
+        Mv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5Nc
+        Mv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5NcMv+TXDL/k1wy/5Nc
+        Mv+TXDL/k1wy/5BaMfxLLxmvAAAAWAAAADAAAAAUAAAABAAAAAYAAAAYAAAANgAAAF9nQSPJlF0y/5Rd
+        Mv+UXTL/lF0y/5RdMv+UXTL/lF0y/5RdMv+UXTL/lF0y/5RdMv+UXTL/lF0y/5RdMv+UXTL/lF0y/5Rd
+        Mv+UXTL/lF0y/5RdMv+UXTL/lF0y/5RdMv+UXTL/lF0y/5RdMv+UXTL/lF0y/5RdMv+UXTL/lF0y/5Rd
+        Mv+UXTL/lF0y/5RdMv+UXTL/lF0y/5RdMv+UXTL/lF0y/5RdMv9fOyDIAwIBbAAAAEIAAAAhAAAADAAA
+        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAEAAAAEAAAADAAAABwAAAA0AAAATQ8JBWs+JxWSPSYVkhELBmsAAABNAAAANAAAABwAAAANAAAABAAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAEAAAAHAAAAFgAAADAAAABVLBwPkYNSLO6UXTL/lF0y/5RdMv+UXTL/lF0y/5RdMv+UXTL/lF0y/5Rd
+        Mv+UXTL/lF0y/5RdMv+UXTL/lF0y/5RdMv+UXTL/lF0y/5RdMv+UXTL/lF0y/5RdMv+UXTL/lF0y/5Rd
+        Mv+UXTL/lF0y/5RdMv+UXTL/lF0y/5RdMv+UXTL/lF0y/5RdMv+UXTL/lF0y/5RdMv+UXTL/lF0y/5Rd
+        Mv+UXTL/ilcv9jAeEJUAAABRAAAAKwAAABAAAAADAAAABAAAABMAAAAuAAAAVUsvGquPWjH7lF0z/5Rd
+        M/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5Rd
+        M/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5Rd
+        M/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/4hWL/MtHBCTAAAAUwAAAC4AAAATAAAABQAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAEAAAAFAAAADgAAABwAAAAsAAAAPAAAAEUAAABFAAAAPAAAACwAAAAcAAAADgAAAAUAAAABAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAA
+        AA0AAAAiAAAAQwMCAWxfPCHIlF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5Rd
+        M/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5Rd
+        M/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5Rd
+        M/94SyniEwwHfQAAAEgAAAAlAAAADQAAAAEAAAACAAAADgAAACUAAABJJxkOh4FRLOqUXTP/lF0z/5Rd
+        M/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5Rd
+        M/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5Rd
+        M/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/2M+IsgAAABlAAAAPQAAAB4AAAAKAAAAAgAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAEAAAAFAAAADAAAABQAAAAdAAAAIgAAACIAAAAdAAAAFQAAAAwAAAAFAAAAAQAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAHAAAAFwAA
+        ADIAAABYKRoOlIdVLvKUXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5Rd
+        M/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5Rd
+        M/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/5RdM/+UXTP/lF0z/1g3
+        HsIBAQBpAAAAPQAAAB0AAAAKAAAAAQAAAAEAAAAJAAAAHAAAADwAAABlaEEkzJVdM/+VXTP/lV0z/5Vd
+        M/+VXTP/lV0z/5VdM/+VXTP/lV0z/5VdM/+VXTP/lV0z/5VdM/+VXTP/lV0z/5VdM/+VXTP/lV0z/5Vd
+        M/+VXTP/lV0z/5VdM/+VXTP/lV0z/5VdM/+VXTP/lV0z/5VdM/+VXTP/lV0z/5VdM/+VXTP/lV0z/5Vd
+        M/+VXTP/lV0z/5VdM/+VXTP/lV0z/5VdM/+VXTP/hlQu7ykaDo0AAABPAAAAKwAAABIAAAAFAAAAAQAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAEAAAADAAAABwAAAAoAAAAMAAAADQAAAAoAAAAHAAAAAwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAA0AAAAjAAAARQUD
+        Am9aOB/FlV0z/5VdM/+VXTP/lV0z/5VdM/+VXTP/lV0z/5VdM/+VXTP/lV0z/5VdM/+VXTP/lV0z/5Vd
+        M/+VXTP/lV0z/5VdM/+VXTP/lV0z/5VdM/+VXTP/lV0z/5VdM/+VXTP/lV0z/5VdM/+VXTP/lV0z/5Vd
+        M/+VXTP/lV0z/5VdM/+VXTP/lV0z/5VdM/+VXTP/lV0z/5VdM/+VXTP/lV0z/5VdM/+KVi/1NSESnAAA
+        AFgAAAAxAAAAFgAAAAYAAAAAAAAAAQAAAAUAAAAUAAAALwAAAFU/KBahi1gw9pVeM/+VXjP/lV4z/5Ve
+        M/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5Ve
+        M/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5Ve
+        M/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+TXTL+Yj4ixQAAAGIAAAA7AAAAHAAAAAoAAAACAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAGAAAAFQAAADEAAABXKBkOk4VU
+        LvCVXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5Ve
+        M/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5Ve
+        M/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/25FJtYPCgV3AAAARwAA
+        ACUAAAAOAAAAAwAAAAAAAAAAAAAAAgAAAA0AAAAjAAAARAYEAnBzSCfZlV4z/5VeM/+VXjP/lV4z/5Ve
+        M/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5Ve
+        M/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5Ve
+        M/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+GVS7vJRgNiAAAAE4AAAAqAAAAEQAAAAQAAAABAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAsAAAAgAAAAQAEBAGteOyDHlV4z/5Ve
+        M/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5Ve
+        M/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5Ve
+        M/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+VXjP/lV4z/5VeM/+QWzH6RCsXqAAAAFwAAAA1AAAAGQAA
+        AAgAAAABAAAAAAAAAAAAAAABAAAABwAAABcAAAA0AAAAWkcsGKiQWjL5ll40/5ZeNP+WXjT/ll40/5Ze
+        NP+WXjT/ll40/5ZeNP+WXjT/ll40/5ZeNP+WXjT/ll40/5ZeNP+WXjT/ll40/5ZeNP+WXjT/ll40/5Ze
+        NP+WXjT/ll40/5ZeNP+WXjT/ll40/5ZeNP+WXjT/ll40/5ZeNP+WXjT/ll40/5ZeNP+WXjT/ll40/5Ze
+        NP+WXjT/ll40/5ZeNP+WXjT/ll40/5VdNP5bOR++AAAAYQAAADoAAAAcAAAACgAAAAEAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAEAAAAEgAAACwAAABRHRIKiIRTLu6WXjT/ll40/5Ze
+        NP+WXjT/ll40/5ZeNP+WXjT/ll40/5ZeNP+WXjT/ll40/5ZeNP+WXjT/ll40/5ZeNP+WXjT/ll40/5Ze
+        NP+WXjT/ll40/5ZeNP+WXjT/ll40/5ZeNP+WXjT/ll40/5ZeNP+WXjT/ll40/5ZeNP+WXjT/ll40/5Ze
+        NP+WXjT/ll40/5ZeNP+WXjT/ll40/5ZeNP+WXjT/ll40/3ZKKd0TDAd4AAAASAAAACUAAAAPAAAABAAA
+        AAAAAAAAAAAAAAAAAAAAAAAEAAAADwAAACUAAABGCQYDcXNJKNiWXzT/ll80/5ZfNP+WXzT/ll80/5Zf
+        NP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5Zf
+        NP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5Zf
+        NP+WXzT/ll80/5ZfNP+WXzT/ll80/39QLOcgFAuEAAAATAAAACkAAAARAAAABAAAAAEAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAkAAAAcAAAAOwAAAGJWNh68lF4z/ZZfNP+WXzT/ll80/5Zf
+        NP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5Zf
+        NP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5Zf
+        NP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+OWjH4RCsXpgAAAFsAAAA1AAAAGQAAAAgAAAABAAAAAAAA
+        AAAAAAAAAAAAAAAAAAEAAAAHAAAAFwAAADEAAABVNSISloxZMfSWXzT/ll80/5ZfNP+WXzT/ll80/5Zf
+        NP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5Zf
+        NP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5Zf
+        NP+WXzT/ll80/5ZfNP+WXzT/lF4z/Vg4H7sAAABgAAAAOQAAABsAAAAJAAAAAQAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAEAAAAEAAAACgAAABMHBIKgoFSLemWXzT/ll80/5ZfNP+WXzT/ll80/5Zf
+        NP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5Zf
+        NP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5ZfNP+WXzT/ll80/5Zf
+        NP+WXzT/ll80/5ZfNP+WXzT/ll80/2xEJdAFAwJuAAAARQAAACQAAAAPAAAABAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAMAAAANAAAAIAAAAD4AAABjYj0iw5dfNP+XXzT/l180/5dfNP+XXzT/l180/5df
+        NP+XXzT/l180/5dfNP+XXzT/l180/5dfNP+XXzT/l180/5dfNP+XXzT/l180/5dfNP+XXzT/l180/5df
+        NP+XXzT/l180/5dfNP+XXzT/l180/5dfNP+XXzT/l180/5dfNP+XXzT/l180/5dfNP+XXzT/l180/5df
+        NP+XXzT/l180/5dfNP+XXzT/f1As5RwSCoAAAABLAAAAKAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAQAAAAgAAAAaAAAANwAAAF5VNR22lF0z/ZdfNP+XXzT/l180/5dfNP+XXzT/l180/5df
+        NP+XXzT/l180/5dfNP+XXzT/l180/5dfNP+XXzT/l180/5dfNP+XXzT/l180/5dfNP+XXzT/l180/5df
+        NP+XXzT/l180/5dfNP+XXzT/l180/5dfNP+XXzT/l180/5dfNP+XXzT/l180/5dfNP+XXzT/l180/5df
+        NP+XXzT/l180/5dfNP+JVi/wKxsPjwAAAFQAAAAwAAAAFgAAAAcAAAABAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAQAAAAYAAAATAAAAKgAAAEocEgp9ek4q35dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dg
+        NP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dg
+        NP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dg
+        NP+XYDT/l2A0/5dgNP+UXjP8TTEbsAAAAF4AAAA3AAAAGgAAAAgAAAABAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAEAAAADwAAACcAAABJEAoGeXlNKuCXYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dg
+        NP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dg
+        NP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dg
+        NP+XYDT/kl0y+lI0HLMAAABgAAAAPAAAAB8AAAAMAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAgAAAAkAAAAZAAAAMwAAAFU0IRKTiVcv8JdgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dg
+        NP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dg
+        NP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dg
+        NP+XYDT/l2A0/5dgNP91SijcFg4IfAAAAEkAAAAmAAAADwAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
+        AAgAAAAZAAAANgAAAF1GLRiqkFsy+JdgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dg
+        NP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dg
+        NP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dgNP+XYDT/l2A0/5dg
+        NP9pQyTNBwQCbwAAAEcAAAAoAAAAEQAAAAUAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAABAAAABAAAAA0AAAAfAAAAOgAAAFtJLhmlj1oy9phgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hg
+        Nf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hg
+        Nf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hg
+        Nf+YYDX/mGA1/5NdM/tDKxenAAAAXAAAADUAAAAZAAAABwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAADgAA
+        ACUAAABHCwcEdHJIKNiYYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hg
+        Nf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hg
+        Nf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/dksp2hkQ
+        CX8AAABQAAAALwAAABYAAAAIAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAABAAAABgAAABAAAAAjAAAAPwAAAGBXNx60lF00+phgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hg
+        Nf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hg
+        Nf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hg
+        Nf+YYDX/mGA1/25FJtUIBQNzAAAARgAAACUAAAAOAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAcAAAAWAAAAMgAA
+        AFk7JRWgjVkx9ZhgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hg
+        Nf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hg
+        Nf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/5hgNf+YYDX/mGA1/4BRLeUkFwyIAAAAVgAA
+        ADYAAAAcAAAACwAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAABAAAABwAAABIAAAAmAAAAQwAAAGNbOiC5k14z+phhNf+YYTX/mGE1/5hhNf+YYTX/mGE1/5hh
+        Nf+YYTX/mGE1/5hhNf+YYTX/mGE1/5hhNf+YYTX/mGE1/5hhNf+YYTX/mGE1/5hhNf+YYTX/mGE1/5hh
+        Nf+YYTX/mGE1/5hhNf+YYTX/mGE1/5hhNf+YYTX/mGE1/5hhNf+YYTX/mGE1/5hhNf+YYTX/mGE1/5hh
+        Nf+YYTX/jlsx9iwcD5YAAABYAAAAMQAAABYAAAAGAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAADAAAACEAAABCAwIBbWRA
+        I8qYYTX/mGE1/5hhNf+YYTX/mGE1/5hhNf+YYTX/mGE1/5hhNf+YYTX/mGE1/5hhNf+YYTX/mGE1/5hh
+        Nf+YYTX/mGE1/5hhNf+YYTX/mGE1/5hhNf+YYTX/mGE1/5hhNf+YYTX/mGE1/5hhNf+YYTX/mGE1/5hh
+        Nf+YYTX/mGE1/5hhNf+YYTX/mGE1/5hhNf+YYTX/mGE1/5hhNf9+USzjLBwPjwAAAFgAAAA5AAAAHwAA
+        AA4AAAAEAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAACAAAABwAAABQAAAApAAAARQIBAWZUNR2yjlox85lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lh
+        Nf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lh
+        Nf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lh
+        Nf+YYTX/Yj4iyQQDAWwAAABBAAAAIAAAAAsAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAATAAAALQAAAFIsHA+SiVcv75lh
+        Nf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lh
+        Nf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lh
+        Nf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/d0wp3CkaDosAAABYAAAAOgAAACEAAAAPAAAABQAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAACAAAACQAAABUAAAApAAAAQwAAAGE9JhWdglMt5plhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lh
+        Nf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lh
+        Nf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lh
+        Nf+IVi/vIhYMiwAAAFEAAAArAAAAEgAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAACQAAABwAAAA6AAAAY1g4H72ZYTX/mWE1/5lh
+        Nf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lh
+        Nf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lhNf+ZYTX/mWE1/5lh
+        Nf+ZYTX/mWE1/5lhNf+ZYTX/lV40+2VAI8cXDwh9AAAAVQAAADkAAAAhAAAAEAAAAAYAAAABAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAEAAAADAAAACQAAABUAAAAnAAAAPwAAAFoqGw+KZ0EkyZFcM/eZYTb/mWE2/5lhNv+ZYTb/mWE2/5lh
+        Nv+ZYTb/mWE2/5lhNv+ZYTb/mWE2/5lhNv+ZYTb/mWE2/5lhNv+ZYTb/mWE2/5lhNv+ZYTb/mWE2/5lh
+        Nv+ZYTb/mWE2/5lhNv+ZYTb/mWE2/5lhNv+ZYTb/mWE2/5lhNv+ZYTb/mWE2/5lhNv+ZYTb/mWE2/5df
+        Nf1UNR64AAAAYQAAADoAAAAbAAAACAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAQAAAAKAAAAEsaEQmAf1At5JlhNv+ZYTb/mWE2/5lh
+        Nv+ZYTb/mWE2/5lhNv+ZYTb/mWE2/5lhNv+ZYTb/mWE2/5lhNv+ZYTb/mWE2/5lhNv+ZYTb/mWE2/5lh
+        Nv+ZYTb/mWE2/5lhNv+ZYTb/mWE2/5lhNv+ZYTb/mWE2/5lhNv+ZYTb/mWE2/5lhNv+ZYTb/mWE2/5lh
+        Nv+ZYTb/mGA2/oFSLuZKLxqrCAUDbgAAAE8AAAA1AAAAHwAAAA8AAAAGAAAAAQAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAEAAAADAAAACAAAABMAAAAiAAAANwAAAFEDAgFrOiUUn3hMKtyWYDX8mmI2/5piNv+aYjb/mmI2/5pi
+        Nv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5pi
+        Nv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/35Q
+        LOMLBwR4AAAASgAAACcAAAAPAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAABAAAABwAAABkAAAA2AAAAXUMrGKiXYDX8mmI2/5piNv+aYjb/mmI2/5pi
+        Nv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5pi
+        Nv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/41a
+        MfJdOyG+HxQLgQAAAFwAAABEAAAALgAAABsAAAAOAAAABQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAACAAAABgAAAA8AAAAcAAAALgAAAEQAAABaEQsGd00xG6+CUy7mmGE1/ppiNv+aYjb/mmI2/5pi
+        Nv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5pi
+        Nv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/kl0z+Ect
+        GagAAABbAAAANAAAABcAAAAHAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAMAAAAOAAAAJQAAAEcQCgZ3c0ko2JpiNv+aYjb/mmI2/5piNv+aYjb/mmI2/5pi
+        Nv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5pi
+        Nv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5BbMvVvRifQLh0QkAAA
+        AGMAAABMAAAANwAAACUAAAAWAAAACwAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAABAAAABQAAAAsAAAAWAAAAJAAAADUAAABJAAAAXh4TCoJkPyPDjFkx8ZpiNv+aYjb/mmI2/5pi
+        Nv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5pi
+        Nv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/cUgo1QMC
+        AW4AAABDAAAAIgAAAAwAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAABAAAABgAAABYAAAAxAAAAWDQhEpuPWzL1mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5pi
+        Nv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5pi
+        Nv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5dgNfx8TyvgQysYpQUDAm4AAABVAAAAPgAA
+        ACsAAAAaAAAADwAAAAcAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAABAAAAAwAAAAcAAAAOAAAAGQAAACcAAAA4AAAATQAAAGQyIBKUbUYm0JJdM/eaYjb/mmI2/5pi
+        Nv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5pi
+        Nv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+MWTHxLx4RkwAA
+        AFIAAAAtAAAAEwAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAEAAAALAAAAIAAAAEABAQBrZ0Eky5liNv6aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5pi
+        Nv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+aYjb/mmI2/5pi
+        Nv+aYjb/mmI2/5piNv+aYjb/mmI2/5piNv+CUy7nVjcetQ0IBHcAAABbAAAARQAAADEAAAAfAAAAEwAA
+        AAkAAAAEAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAQAAAAQAAAAIAAAAEAAAABsAAAArAAAAPgAAAFUDAgFuRy0Zp3pOK92ZYjX9m2M2/5tj
+        Nv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tj
+        Nv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/5piNv5ePCHAAAAAZAAA
+        ADsAAAAcAAAACQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAA
+        ABEAAAArAAAATxoQCYWIVy/tm2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tj
+        Nv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tj
+        Nv+bYzb/m2M2/5tjNv+NWjHxYz8jwyYYDYcAAABfAAAASQAAADYAAAAlAAAAFgAAAAwAAAAFAAAAAgAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAEAAAAEAAAACgAAABMAAAAfAAAAMQAAAEYAAABbEgwGeVM1HbOFVS7om2M2/5tj
+        Nv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tj
+        Nv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/35RLOIaEAmAAAAATAAA
+        ACgAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAHAAAAGQAA
+        ADcAAABfUDMcs5dgNfybYzb/m2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tj
+        Nv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tjNv+bYzb/m2M2/5tj
+        Nv+WYDT5b0cn0TUiEpUAAABkAAAATgAAADkAAAAoAAAAGQAAAA8AAAAHAAAAAwAAAAEAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAEAAAACAAAABgAAAAwAAAAWAAAAJQAAADYAAABJAAAAXykaD4hlQCTFj1wz85tj
+        N/+bYzf/m2M3/5tjN/+bYzf/m2M3/5tjN/+bYzf/m2M3/5tjN/+bYzf/m2M3/5tjN/+bYzf/m2M3/5tj
+        N/+bYzf/m2M3/5tjN/+bYzf/m2M3/5tjN/+bYzf/m2M3/5tjN/+bYzf/lV81+kguGqsAAABbAAAANAAA
+        ABcAAAAHAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAA0AAAAjAAAARgcE
+        AnN3TCram2M3/5tjN/+bYzf/m2M3/5tjN/+bYzf/m2M3/5tjN/+bYzf/m2M3/5tjN/+bYzf/m2M3/5tj
+        N/+bYzf/m2M3/5tjN/+bYzf/m2M3/5tjN/+bYzf/m2M3/5tjN/+bYzf/m2M3/5tjN/+ZYTb8flAt4Uct
+        GagQCgZ0AAAAVQAAAD8AAAArAAAAHAAAABAAAAAIAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAAcAAAAPAAAAGQAAACgAAAA5AAAATwAAAGQ1IhOWdUsp1pZg
+        NfqcYzf/nGM3/5xjN/+cYzf/nGM3/5xjN/+cYzf/nGM3/5xjN/+cYzf/nGM3/5xjN/+cYzf/nGM3/5xj
+        N/+cYzf/nGM3/5xjN/+cYzf/nGM3/5xjN/+cYzf/nGM3/5xjN/+cYzf/b0Yn0QcEAnAAAABDAAAAIgAA
+        AAwAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAEAAAAEwAAAC4AAABUNSITmI9a
+        MvKcYzf/nGM3/5xjN/+cYzf/nGM3/5xjN/+cYzf/nGM3/5xjN/+cYzf/nGM3/5xjN/+cYzf/nGM3/5xj
+        N/+cYzf/nGM3/5xjN/+cYzf/nGM3/5xjN/+cYzf/nGM3/5xjN/+cYzf/i1gx7Vk5H7gUDQd7AAAAWwAA
+        AEYAAAAxAAAAIAAAABMAAAAKAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAQAAAAIAAAAEAAAABwAAAAsAAAAPwAAAFUMCARyRi0Zp4BS
+        LeGYYjb8nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xk
+        N/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+NWzLxMB8RkwAAAFIAAAAtAAAAEwAA
+        AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAoAAAAcAAAAPAAAAGRmQSTHm2Q3/pxk
+        N/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xk
+        N/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/j1sy8WhDJccjFgyGAAAAYAAAAEoAAAA3AAAAJQAA
+        ABcAAAANAAAABgAAAAIAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAEAAAACgAAABMAAAAgAAAAMQAAAEYAAABcFA0He148
+        IbyJWDDrnGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xk
+        N/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/9UNh63AAAAYgAAADoAAAAcAAAACQAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAEAAAACgAAABMGhEJgoJULuWcZDf/nGQ3/5xk
+        N/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xk
+        N/+cZDf/nGQ3/5xkN/+cZDf/lmA1+nhNKtk8JhWaAAAAZQAAAE8AAAA6AAAAKAAAABoAAAAPAAAABwAA
+        AAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAABgAAAA0AAAAXAAAAJQAAADcAAABLAAAAYCka
+        DolpQyXIkF0z85xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xk
+        N/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/3xPLN8aEAl/AAAASgAAACYAAAAPAAAAAwAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAcAAAAYAAAANAAAAFxOMhuvlmA1+pxkN/+cZDf/nGQ3/5xk
+        N/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xkN/+cZDf/nGQ3/5xk
+        N/+cZDf/nGQ3/39SLeJMMRurCwcEcgAAAFYAAABAAAAALAAAABwAAAAQAAAACQAAAAQAAAABAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAAcAAAAPAAAAGgAAACgAAAA6AAAATwAA
+        AGZAKRaddksp15liNvudZDf/nWQ3/51kN/+dZDf/nWQ3/51kN/+dZDf/nWQ3/51kN/+dZDf/nWQ3/51k
+        N/+dZDf/nWQ3/51kN/+dZDf/nWQ3/51kN/+dZDf/ll80+D0nFaAAAABaAAAAMgAAABYAAAAGAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAACAAAADAAAACIAAABDBwQCcG9HJ9KdZDf/nWQ3/51kN/+dZDf/nWQ3/51k
+        N/+dZDf/nWQ3/51kN/+dZDf/nWQ3/51kN/+dZDf/nWQ3/51kN/+dZDf/nWQ3/51kN/+dZDf/nWQ3/4xZ
+        Me5fPCG+HhMLgQAAAFwAAABGAAAAMgAAACAAAAATAAAACgAAAAQAAAABAAAAAQAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAQAAAAJAAAAEAAAABwAAAAtAAAAQAAA
+        AFcPCgV0SjAaqoJULuScZTf+nWU3/51lN/+dZTf/nWU3/51lN/+dZTf/nWU3/51lN/+dZTf/nWU3/51l
+        N/+dZTf/nWU3/51lN/+dZTf/nWU3/51lN/+dZTf/ZUEjyQMCAWwAAABBAAAAIAAAAAsAAAABAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAQAAAATAAAALQAAAFIyIBGUjFox751lN/+dZTf/nWU3/51lN/+dZTf/nWU3/51l
+        N/+dZTf/nWU3/51lN/+dZTf/nWU3/51lN/+dZTf/nWU3/51lN/+dZTf/nWU3/5VgNPdpQyXKKxwPjgAA
+        AGMAAABMAAAANwAAACUAAAAXAAAADQAAAAYAAAACAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAAEAAAACgAAABMAAAAhAAAAMgAA
+        AEcAAABdIhYMgl89Ir2OWzPwnWU4/51lOP+dZTj/nWU4/51lOP+dZTj/nWU4/51lOP+dZTj/nWU4/51l
+        OP+dZTj/nWU4/51lOP+dZTj/nWU4/51lOP+JWDHsGRAJhQAAAE8AAAAqAAAAEAAAAAQAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAABAAAACAAAABsAAAA6AAAAYlU3HrecZTj/nWU4/51lOP+dZTj/nWU4/51lOP+dZTj/nWU4/51l
+        OP+dZTj/nWU4/51lOP+dZTj/nWU4/51lOP+dZTj/nWU4/5dhNvp8UCzdPigWoQkGA28AAABUAAAAPQAA
+        ACsAAAAaAAAAEAAAAAgAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAABgAAAA0AAAAYAAAAJgAA
+        ADcAAABMAAAAYyQXDYtuRyfPlF81951lOP+dZTj/nWU4/51lOP+dZTj/nWU4/51lOP+dZTj/nWU4/51l
+        OP+dZTj/nWU4/51lOP+dZTj/nWU4/5ljN/tGLRmrAAAAXgAAADUAAAAYAAAABwAAAAEAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAMAAAAOAAAAJgAAAEkTDAd7eU4r3J1lOP+dZTj/nWU4/51lOP+dZTj/nWU4/51lOP+dZTj/nWU4/51l
+        OP+dZTj/nWU4/51lOP+dZTj/nWU4/5xlOP+HVzDoTDEbrQ4JBXYAAABbAAAARQAAADEAAAAfAAAAEgAA
+        AAkAAAAEAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABAAAAAgAAAAQAAAAGwAA
+        ACsAAAA9AAAAVAcEAm8+KBahek4r25dhNvmdZTj/nWU4/51lOP+dZTj/nWU4/51lOP+dZTj/nWU4/51l
+        OP+dZTj/nWU4/51lOP+dZTj/nWU4/3FJKNQJBgNwAAAAQwAAACIAAAALAAAAAQAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAA
+        ABYAAAAxAAAAWTYjE5yTXjT1nWU4/51lOP+dZTj/nWU4/51lOP+dZTj/nWU4/51lOP+dZTj/nWU4/51l
+        OP+dZTj/nWU4/51lOP+MWjLuZEEkwh0TCoEAAABeAAAASQAAADUAAAAkAAAAFgAAAAwAAAAFAAAAAQAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAQAAAAJAAAAEwAA
+        AB8AAAAwAAAARQAAAFoMCAR1VDYesohXMOieZTj/nmU4/55lOP+eZTj/nmU4/55lOP+eZTj/nmU4/55l
+        OP+eZTj/nmU4/55lOP+eZTj/jVoy7iQXDYwAAABRAAAAKwAAABIAAAAEAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAKAAAAHwAA
+        AEABAQBrWzogwZ5lOP+eZTj/nmU4/55lOP+eZTj/nmU4/55lOP+eZTj/nmU4/55lOP+eZTj/nmU4/55l
+        OP+XYTb4c0kp0zMgEpMAAABkAAAATQAAADgAAAAnAAAAGQAAAA8AAAAHAAAAAwAAAAEAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAAFAAAADAAA
+        ABYAAAAkAAAANQAAAEkAAABeJRcNhWM/I8GPWzPwnmU4/55lOP+eZTj/nmU4/55lOP+eZTj/nmU4/55l
+        OP+eZTj/nmU4/55lOP+ZYjb7VDUetAAAAF8AAAA3AAAAGQAAAAcAAAABAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAABAAAAApAAAAThgP
+        CYSBUi7lnmU4/55lOP+eZTj/nmU4/55lOP+eZTj/nmU4/55lOP+eZTj/nmU4/55lOP+cYzf9e08s3Ect
+        GaYHBAJwAAAAVQAAAD4AAAArAAAAGwAAABAAAAAIAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADAAAABwAA
+        AA4AAAAZAAAAJwAAADgAAABOAAAAZDQiEpRxSSjRmGI2+Z5mOP+eZjj/nmY4/55mOP+eZjj/nmY4/55m
+        OP+eZjj/nmY4/55mOP96TyvbAwIBbgAAAEIAAAAgAAAACgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAFgAAADMAAABbOiYVophi
+        NvqeZjj/nmY4/55mOP+eZjj/nmY4/55mOP+eZjj/nmY4/55mOP+dZjj/iVgx6lQ2HrQXDwh8AAAAWwAA
+        AEYAAAAxAAAAHwAAABMAAAAKAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABAAA
+        AAgAAAAQAAAAGwAAACsAAAA+AAAAVQoGBHFCKhejfVEs3ppkN/ueZjj/nmY4/55mOP+eZjj/nmY4/55m
+        OP+eZjj/nmY4/49cM/A1IhOOAAAASAAAACUAAAANAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAbAAAAOgYEAmhnQyXInWY4/55m
+        OP+eZjj/nmY4/55mOP+eZjj/nmY4/55mOP+eZjj/kl4082NAI8UlGA2KAAAAYQAAAEsAAAA2AAAAJQAA
+        ABYAAAAMAAAABgAAAAIAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
+        AAQAAAAKAAAAEwAAAB8AAAAxAAAARgAAAFsZEAl9VzgftI1bMu2dZjj+nmY4/55mOP+eZjj/nmY4/55m
+        OP+eZjj/mGI2+VY3HqUAAABJAAAAJQAAAA0AAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABwAAAA7DgkFbX5RLdueZjj/nmY4/55m
+        OP+eZjj/nmY4/55mOP+eZjj/l2I2+XZMKtg1IhOZBgQCbAAAAFMAAAA8AAAAKQAAABkAAAAPAAAABwAA
+        AAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
+        AAIAAAAGAAAADAAAABYAAAAlAAAANgAAAEoAAABfJBcNhmlEJsaTXjXzn2Y5/59mOf+fZjn/n2Y5/59m
+        Of+PXDPtOSQUhwAAAEIAAAAhAAAADAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAAAAGQAAADUHBAJgaEIlv59mOf+fZjn/n2Y5/59m
+        Of+fZjn/nGQ4/YNUL+RILhqpCQYDdAAAAFkAAABEAAAALwAAAB4AAAASAAAACQAAAAQAAAABAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAEAAAADAAAABwAAAA8AAAAZAAAAKAAAADoAAABPAAAAZjgkFJd4TSvXmWI3+J9mOf+fZjn/jVoz7FU3
+        H6kAAABXAAAANAAAABkAAAAIAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAASAAAAKAAAAEkfFAt6d0wr0pliN/mfZjn/n2Y5/4tZ
+        MuxbOiG9Fg4IgQAAAGAAAABJAAAANAAAACMAAAAWAAAACwAAAAUAAAABAAAAAQAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAABAAAABAAAAAkAAAAQAAAAHAAAACwAAABAAAAAVy4eEYNtRifAhVUw3n5RLdVWNx+lEAoGYwAA
+        AD8AAAAjAAAAEAAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAoAAAAZAAAAMQAAAE4xIBKBb0cowYVVMN59UC3WUjQdpgwI
+        BG0AAABSAAAAOwAAACgAAAAYAAAADgAAAAcAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAABAAAAAQAAAAQAAAAKAAAAEwAAACIAAAAzAAAARgAAAFQAAABcAAAAWgAAAE4AAAA7AAAAJQAA
+        ABMAAAAIAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAABAAAABAAAAA0AAAAcAAAALwAAAEMAAABUAAAAXAAAAFsAAABQAAAAQAAA
+        AC4AAAAdAAAAEAAAAAgAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAQAAAAIAAAAGAAAADQAAABgAAAAkAAAALgAAADQAAAAyAAAAKgAAAB8AAAASAAAACQAA
+        AAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAABAAAABQAAAAwAAAAXAAAAIwAAAC4AAAA0AAAAMgAAACsAAAAgAAAAFQAA
+        AAsAAAAEAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAEAAAAEAAAACAAAAA4AAAATAAAAFgAAABYAAAASAAAADQAAAAcAAAADAAAAAQAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAABAAAABAAAAAgAAAAOAAAAEwAAABYAAAAWAAAAEgAAAA0AAAAHAAAAAwAA
+        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAEAAAABAAAAAwAAAAQAAAAFAAAABQAAAAQAAAACAAAAAQAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAMAAAAEAAAABQAAAAUAAAAEAAAAAgAAAAEAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////4AAAf/////////+AD/////////8AAA
+        Af/////////4AP/////////AAAAAf/////////gA/////////wAAAAAf////////+AD////////8AAAA
+        AAf////////4AP////////gAAAAAAf////////gA////////4AAAAAAA////////+AD///////+AAAAA
+        AAA////////4AP///////gAAAAAAAA////////gA///////8AAAAAAAAA///////+AD///////AAAAAA
+        AAAB///////4AP//////wAAAAAAAAAB///////gA//////8AAAAAAAAAAB//////+AD//////gAAAAAA
+        AAAAD//////4AP/////4AAAAAAAAAAAD//////gA/////+AAAAAAAAAAAAD/////+AD/////wAAAAAAA
+        AAAAAD/////4AP////8AAAAAAAAAAAAAH/////gA/////AAAAAAAAAAAAAAH////+AD////wAAAAAAAA
+        AAAAAAH////4AP///+AAAAAAAAAAAAAAAH////gA////gAAAAAAAAAAAAAAAP///+AD///4AAAAAAAAA
+        AAAAAAAP///4AP//+AAAAAAAAAAAAAAAAAP///gA///wAAAAAAAAAAAAAAAAAP//+AD//8AAAAAAAAAA
+        AAAAAAAAf//4AP//AAAAAAAAAAAAAAAAAAAf//gA//4AAAAAAAAAAAAAAAAAAA//+AD//AAAAAAAAAAA
+        AAAAAAAAB//4AP/4AAAAAAAAAAAAAAAAAAAD//gA//gAAAAAAAAAAAAAAAAAAAP/+AD/+AAAAAAAAAAA
+        AAAAAAAAAf/4AP/4AAAAAAAAAAAAAAAAAAAB//gA//gAAAAAAAAAAAAAAAAAAAH/+AD/+AAAAAAAAAAA
+        AAAAAAAAAf/4AP/4AAAAAAAAAAAAAAAAAAAB//gA//gAAAAAAAAAAAAAAAAAAAH/+AD/+AAAAAAAAAAA
+        AAAAAAAAA//4AP/8AAAAAAAAAAAAAAAAAAAD//gA//4AAAAAAAAAAAAAAAAAAAf/+AD//wAAAAAAAAAA
+        AAAAAAAAD//4AP//4AAAAAAAAAAAAAAAAAA///gA///+AAAAAAAAAAAAAAAAA///+AD////wAAAAAAAA
+        AAAAAAB////4AP/////AAAAAAAAAAAAAH/////gA//////8AAAAAAAAAAAf/////+AD///////8AAAAA
+        AAAD///////4AP////////8AAAAAB/////////gA////////////////////////+AD/////////////
+        ///////////4AP////////////////////////gA////////////////////////+AD/////////////
+        ///////////4AP////////////////////////gA////////////////////////+AD/////////////
+        ///////////4APB/////////////////////4PgAwA////////////////////8AGACAA///////////
+        /////////gAIAAAB///////////////////8AAAAAAD////+H///////h/////gAAAAAAH///+AAAf//
+        +AAA////8AAAAAAAf///wAAAAAAAAAA////gAAAAAAA///+AAAAAAAAAAD///8AAAAAAAB///4AAAAAA
+        AAAAH///gAAAAAAAD///AAAAAAAAAAAf//8AAAAAAAAH//8AAAAAAAAAAB///wAAAAAAAAP//wAAAAAA
+        AAAAH//+AAAAAAAAAf//AAAAAAAAAAAf//wAAAAAAAAA//8AAAAAAAAAAB//+AAAAAAAAAB//wAAAAAA
+        AAAAH//wAAAAAAAAAH//gAAAAAAAAAAf/+AAAAAAAAAAP/+AAAAAAAAAAD//wAAAAAAAAAAf/8AAAAAA
+        AAAAP//AAAAAAAAAAA//wAAAAAAAAAB//4AAAAAAAAAAB//gAAAAAAAAAP//AAAAAAAAAAAH//AAAAAA
+        AAAB//4AAAAAAAAAAAP/+AAAAAAAAAH//AAAAAAAAAAAAf/8AAAAAAAAA//4AAAAAAAAAAAA//wAAAAA
+        AAAH//gAAAAAAAAAAAB//gAAAAAAAA//8AAAAAAAAAAAAH//AAAAAAAAH//gAAAAAAAAAAAAP/+AAAAA
+        AAAf/8AAAAAAAAAAAAAf/4AAAAAAAD//wAAAAAAAAAAAAA//wAAAAAAAf/+AAAAAAAAAAAAAD//gAAAA
+        AAB//wAAAAAAAAAAAAAH//AAAAAAAP/+AAAAAAAAAAAAAAP/8AAAAAAB//4AAAAAAAAAAAAAA//4AAAA
+        AAH//AAAAAAAAAAAAAAB//wAAAAAA//4AAAAAAAAAAAAAAD//AAAAAAH//gAAAAAAAAAAAAAAP/+AAAA
+        AAf/8AAAAAAAAAAAAAAAf/8AAAAAD//gAAAAAAAAAAAAAAA//wAAAAAf/+AAAAAAAAAAAAAAAD//gAAA
+        AB//wAAAAAAAAAAAAAAAH/+AAAAAP//AAAAAAAAAAAAAAAAP/8AAAAA//4AAAAAAAAAAAAAAAA//wAAA
+        AH//AAAAAAAAAAAAAAAAB//gAAAAf/8AAAAAAAAAAAAAAAAH//AAAAD//gAAAAAAAAAAAAAAAAP/8AAA
+        AP/+AAAAAAAAAAAAAAAAA//4AAAB//wAAAAAAAAAAAAAAAAB//gAAAH//AAAAAAAAAAAAAAAAAD//AAA
+        A//4AAAAAAAAAAAAAAAAAP/8AAAD//AAAAAAAAAAAAAAAAAAf/4AAAf/8AAAAAAAAAAAAAAAAAB//gAA
+        B//gAAAAAAAAAAAAAAAAAD//AAAP/+AAAAAAAAAAAAAAAAAAP/8AAA//wAAAAAAAAAAAAAAAAAAf/4AA
+        H//AAAAAAAAAAAAAAAAAAB//gAAf/4AAAAAAAAAAAAAAAAAAD//AAD//gAAAAAAAAAAAAAAAAAAP/8AA
+        P/8AAAAAAAAAAAAAAAAAAAf/4AB//wAAAAAAAAAAAAAAAAAAB//wAP/+AAAAAAAAAAAAAAAAAAAD//gB
+        //4AAAAAAAAIAAAAAAAAAAP//gf//AAAAAAAAAgAgAAAAAAAAf/////8AAAAAAAACACAAAAAAAAB////
+        //gAAAAAAAAYAMAAAAAAAAD/////+AAAAAAAABgAwAAAAAAAAP/////4AAAAAAAAOADgAAAAAAAA////
+        //AAAAAAAAA4AOAAAAAAAAB/////8AAAAAAAAHgA8AAAAAAAAH/////gAAAAAAAAeADwAAAAAAAAP///
+        /+AAAAAAAAD4APgAAAAAAAA/////wAAAAAAAAfgA/AAAAAAAAB/////AAAAAAAAB+AD+AAAAAAAAH///
+        /8AAAAAAAAP4AP8AAAAAAAAf////gAAAAAAAB/gA/wAAAAAAAA////+AAAAAAAAP+AD/gAAAAAAAD///
+        /wAAAAAAAB/4AP/gAAAAAAAH////AAAAAAAAP/gA//AAAAAAAAf///4AAAAAAAB/+AD/+AAAAAAAB///
+        /gAAAAAAAf/4AP/+AAAAAAAD///+AAAAAAAD//gA//+AAAAAAAP///wAAAAAAA//+AD//8AAAAAAAf//
+        /AAAAAAAP//4AP//8AAAAAAB///4AAAAAAD///gA///8AAAAAAH///gAAAAAAf//+AD///8AAAAAAP//
+        +AAAAAAH///4AP///4AAAAAA///wAAAAAB////gA////4AAAAAD///AAAAAAP///+AD////4AAAAAH//
+        8AAAAAD////4AP////wAAAAAf//gAAAAA/////gA/////wAAAAA//+AAAAAP////+AD/////wAAAAD//
+        4AAAAB/////4AP/////wAAAAP//AAAAAf/////gA//////gAAAAf/8AAAAH/////+AD//////gAAAB//
+        wAAAB//////4AP//////gAAAH//AAAAP//////gA///////gAAAf/8AAAD//////+AD///////AAAB//
+        wAAA///////4AP///////AAAH//AAAH///////gA////////AAAf/8AAB///////+AD///////+AAD//
+        wAAf///////4AP///////+AAP//gAH////////gA////////+AB///AA////////+AD////////8Af//
+        +AP////////4AA==
+</value>
+  </data>
+</root>
\ No newline at end of file
diff --git a/Intersect.Editor/Forms/frmMain.Designer.cs b/Intersect.Editor/Forms/frmMain.Designer.cs
index 1549b812..38d60494 100644
--- a/Intersect.Editor/Forms/frmMain.Designer.cs
+++ b/Intersect.Editor/Forms/frmMain.Designer.cs
@@ -121,6 +121,7 @@ private void InitializeComponent()
             this.menuStrip = new DarkUI.Controls.DarkMenuStrip();
             this.toolsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
             this.packClientTexturesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
+            this.mapTypeEditorToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
             this.statusStrip1.SuspendLayout();
             this.toolStrip1.SuspendLayout();
             this.menuStrip.SuspendLayout();
@@ -559,7 +560,7 @@ private void InitializeComponent()
             // 
             this.saveMapToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
             this.saveMapToolStripMenuItem.Name = "saveMapToolStripMenuItem";
-            this.saveMapToolStripMenuItem.Size = new System.Drawing.Size(137, 22);
+            this.saveMapToolStripMenuItem.Size = new System.Drawing.Size(180, 22);
             this.saveMapToolStripMenuItem.Text = "Save Map";
             this.saveMapToolStripMenuItem.Click += new System.EventHandler(this.saveMapToolStripMenuItem_Click);
             // 
@@ -567,7 +568,7 @@ private void InitializeComponent()
             // 
             this.newMapToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
             this.newMapToolStripMenuItem.Name = "newMapToolStripMenuItem";
-            this.newMapToolStripMenuItem.Size = new System.Drawing.Size(137, 22);
+            this.newMapToolStripMenuItem.Size = new System.Drawing.Size(180, 22);
             this.newMapToolStripMenuItem.Text = "New Map";
             this.newMapToolStripMenuItem.ToolTipText = "Create a new, unconnected map.";
             this.newMapToolStripMenuItem.Click += new System.EventHandler(this.NewMapToolStripMenuItem_Click);
@@ -576,7 +577,7 @@ private void InitializeComponent()
             // 
             this.importMapToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
             this.importMapToolStripMenuItem.Name = "importMapToolStripMenuItem";
-            this.importMapToolStripMenuItem.Size = new System.Drawing.Size(137, 22);
+            this.importMapToolStripMenuItem.Size = new System.Drawing.Size(180, 22);
             this.importMapToolStripMenuItem.Text = "Import Map";
             this.importMapToolStripMenuItem.Visible = false;
             this.importMapToolStripMenuItem.Click += new System.EventHandler(this.importMapToolStripMenuItem_Click);
@@ -585,7 +586,7 @@ private void InitializeComponent()
             // 
             this.exportMapToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
             this.exportMapToolStripMenuItem.Name = "exportMapToolStripMenuItem";
-            this.exportMapToolStripMenuItem.Size = new System.Drawing.Size(137, 22);
+            this.exportMapToolStripMenuItem.Size = new System.Drawing.Size(180, 22);
             this.exportMapToolStripMenuItem.Text = "Export Map";
             this.exportMapToolStripMenuItem.Visible = false;
             this.exportMapToolStripMenuItem.Click += new System.EventHandler(this.exportMapToolStripMenuItem_Click);
@@ -594,7 +595,7 @@ private void InitializeComponent()
             // 
             this.optionsToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
             this.optionsToolStripMenuItem.Name = "optionsToolStripMenuItem";
-            this.optionsToolStripMenuItem.Size = new System.Drawing.Size(137, 22);
+            this.optionsToolStripMenuItem.Size = new System.Drawing.Size(180, 22);
             this.optionsToolStripMenuItem.Text = "Options";
             this.optionsToolStripMenuItem.Click += new System.EventHandler(this.optionsToolStripMenuItem_Click);
             // 
@@ -602,7 +603,7 @@ private void InitializeComponent()
             // 
             this.exitToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
             this.exitToolStripMenuItem.Name = "exitToolStripMenuItem";
-            this.exitToolStripMenuItem.Size = new System.Drawing.Size(137, 22);
+            this.exitToolStripMenuItem.Size = new System.Drawing.Size(180, 22);
             this.exitToolStripMenuItem.Text = "Exit";
             this.exitToolStripMenuItem.Click += new System.EventHandler(this.exitToolStripMenuItem_Click);
             // 
@@ -625,45 +626,45 @@ private void InitializeComponent()
             // undoToolStripMenuItem
             // 
             this.undoToolStripMenuItem.Enabled = false;
-            this.undoToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.undoToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(153)))), ((int)(((byte)(153)))), ((int)(((byte)(153)))));
             this.undoToolStripMenuItem.Name = "undoToolStripMenuItem";
-            this.undoToolStripMenuItem.Size = new System.Drawing.Size(132, 22);
+            this.undoToolStripMenuItem.Size = new System.Drawing.Size(180, 22);
             this.undoToolStripMenuItem.Text = "Undo";
             this.undoToolStripMenuItem.Click += new System.EventHandler(this.undoToolStripMenuItem_Click);
             // 
             // redoToolStripMenuItem
             // 
             this.redoToolStripMenuItem.Enabled = false;
-            this.redoToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.redoToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(153)))), ((int)(((byte)(153)))), ((int)(((byte)(153)))));
             this.redoToolStripMenuItem.Name = "redoToolStripMenuItem";
-            this.redoToolStripMenuItem.Size = new System.Drawing.Size(132, 22);
+            this.redoToolStripMenuItem.Size = new System.Drawing.Size(180, 22);
             this.redoToolStripMenuItem.Text = "Redo";
             this.redoToolStripMenuItem.Click += new System.EventHandler(this.redoToolStripMenuItem_Click);
             // 
             // cutToolStripMenuItem
             // 
             this.cutToolStripMenuItem.Enabled = false;
-            this.cutToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.cutToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(153)))), ((int)(((byte)(153)))), ((int)(((byte)(153)))));
             this.cutToolStripMenuItem.Name = "cutToolStripMenuItem";
-            this.cutToolStripMenuItem.Size = new System.Drawing.Size(132, 22);
+            this.cutToolStripMenuItem.Size = new System.Drawing.Size(180, 22);
             this.cutToolStripMenuItem.Text = "Cut";
             this.cutToolStripMenuItem.Click += new System.EventHandler(this.cutToolStripMenuItem_Click);
             // 
             // copyToolStripMenuItem
             // 
             this.copyToolStripMenuItem.Enabled = false;
-            this.copyToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.copyToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(153)))), ((int)(((byte)(153)))), ((int)(((byte)(153)))));
             this.copyToolStripMenuItem.Name = "copyToolStripMenuItem";
-            this.copyToolStripMenuItem.Size = new System.Drawing.Size(132, 22);
+            this.copyToolStripMenuItem.Size = new System.Drawing.Size(180, 22);
             this.copyToolStripMenuItem.Text = "Copy";
             this.copyToolStripMenuItem.Click += new System.EventHandler(this.copyToolStripMenuItem_Click);
             // 
             // pasteToolStripMenuItem
             // 
             this.pasteToolStripMenuItem.Enabled = false;
-            this.pasteToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.pasteToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(153)))), ((int)(((byte)(153)))), ((int)(((byte)(153)))));
             this.pasteToolStripMenuItem.Name = "pasteToolStripMenuItem";
-            this.pasteToolStripMenuItem.Size = new System.Drawing.Size(132, 22);
+            this.pasteToolStripMenuItem.Size = new System.Drawing.Size(180, 22);
             this.pasteToolStripMenuItem.Text = "Paste";
             this.pasteToolStripMenuItem.Click += new System.EventHandler(this.pasteToolStripMenuItem_Click);
             // 
@@ -671,7 +672,7 @@ private void InitializeComponent()
             // 
             this.fillToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
             this.fillToolStripMenuItem.Name = "fillToolStripMenuItem";
-            this.fillToolStripMenuItem.Size = new System.Drawing.Size(132, 22);
+            this.fillToolStripMenuItem.Size = new System.Drawing.Size(180, 22);
             this.fillToolStripMenuItem.Text = "Fill";
             this.fillToolStripMenuItem.Click += new System.EventHandler(this.fillToolStripMenuItem_Click);
             // 
@@ -679,7 +680,7 @@ private void InitializeComponent()
             // 
             this.eraseLayerToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
             this.eraseLayerToolStripMenuItem.Name = "eraseLayerToolStripMenuItem";
-            this.eraseLayerToolStripMenuItem.Size = new System.Drawing.Size(132, 22);
+            this.eraseLayerToolStripMenuItem.Size = new System.Drawing.Size(180, 22);
             this.eraseLayerToolStripMenuItem.Text = "Erase Layer";
             this.eraseLayerToolStripMenuItem.Click += new System.EventHandler(this.eraseLayerToolStripMenuItem_Click);
             // 
@@ -690,7 +691,7 @@ private void InitializeComponent()
             this.currentLayerOnlyToolStripMenuItem});
             this.selectToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
             this.selectToolStripMenuItem.Name = "selectToolStripMenuItem";
-            this.selectToolStripMenuItem.Size = new System.Drawing.Size(132, 22);
+            this.selectToolStripMenuItem.Size = new System.Drawing.Size(180, 22);
             this.selectToolStripMenuItem.Text = "Select....";
             // 
             // allLayersToolStripMenuItem
@@ -729,7 +730,7 @@ private void InitializeComponent()
             this.hideDarknessToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
             this.hideDarknessToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
             this.hideDarknessToolStripMenuItem.Name = "hideDarknessToolStripMenuItem";
-            this.hideDarknessToolStripMenuItem.Size = new System.Drawing.Size(137, 22);
+            this.hideDarknessToolStripMenuItem.Size = new System.Drawing.Size(136, 22);
             this.hideDarknessToolStripMenuItem.Text = "Darkness";
             this.hideDarknessToolStripMenuItem.Click += new System.EventHandler(this.hideDarknessToolStripMenuItem_Click);
             // 
@@ -739,7 +740,7 @@ private void InitializeComponent()
             this.hideFogToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
             this.hideFogToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
             this.hideFogToolStripMenuItem.Name = "hideFogToolStripMenuItem";
-            this.hideFogToolStripMenuItem.Size = new System.Drawing.Size(137, 22);
+            this.hideFogToolStripMenuItem.Size = new System.Drawing.Size(136, 22);
             this.hideFogToolStripMenuItem.Text = "Fog";
             this.hideFogToolStripMenuItem.Click += new System.EventHandler(this.hideFogToolStripMenuItem_Click);
             // 
@@ -749,7 +750,7 @@ private void InitializeComponent()
             this.hideOverlayToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
             this.hideOverlayToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
             this.hideOverlayToolStripMenuItem.Name = "hideOverlayToolStripMenuItem";
-            this.hideOverlayToolStripMenuItem.Size = new System.Drawing.Size(137, 22);
+            this.hideOverlayToolStripMenuItem.Size = new System.Drawing.Size(136, 22);
             this.hideOverlayToolStripMenuItem.Text = "Overlay";
             this.hideOverlayToolStripMenuItem.Click += new System.EventHandler(this.hideOverlayToolStripMenuItem_Click);
             // 
@@ -759,7 +760,7 @@ private void InitializeComponent()
             this.hideTilePreviewToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
             this.hideTilePreviewToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
             this.hideTilePreviewToolStripMenuItem.Name = "hideTilePreviewToolStripMenuItem";
-            this.hideTilePreviewToolStripMenuItem.Size = new System.Drawing.Size(137, 22);
+            this.hideTilePreviewToolStripMenuItem.Size = new System.Drawing.Size(136, 22);
             this.hideTilePreviewToolStripMenuItem.Text = "Tile Preview";
             this.hideTilePreviewToolStripMenuItem.Click += new System.EventHandler(this.hideTilePreviewToolStripMenuItem_Click);
             // 
@@ -769,7 +770,7 @@ private void InitializeComponent()
             this.hideResourcesToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
             this.hideResourcesToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
             this.hideResourcesToolStripMenuItem.Name = "hideResourcesToolStripMenuItem";
-            this.hideResourcesToolStripMenuItem.Size = new System.Drawing.Size(137, 22);
+            this.hideResourcesToolStripMenuItem.Size = new System.Drawing.Size(136, 22);
             this.hideResourcesToolStripMenuItem.Text = "Resources";
             this.hideResourcesToolStripMenuItem.Click += new System.EventHandler(this.hideResourcesToolStripMenuItem_Click);
             // 
@@ -777,7 +778,7 @@ private void InitializeComponent()
             // 
             this.mapGridToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
             this.mapGridToolStripMenuItem.Name = "mapGridToolStripMenuItem";
-            this.mapGridToolStripMenuItem.Size = new System.Drawing.Size(137, 22);
+            this.mapGridToolStripMenuItem.Size = new System.Drawing.Size(136, 22);
             this.mapGridToolStripMenuItem.Text = "Map Grid";
             this.mapGridToolStripMenuItem.Click += new System.EventHandler(this.mapGridToolStripMenuItem_Click);
             // 
@@ -797,7 +798,8 @@ private void InitializeComponent()
             this.shopEditorToolStripMenuItem,
             this.spellEditorToolStripMenuItem,
             this.variableEditorToolStripMenuItem,
-            this.timeEditorToolStripMenuItem});
+            this.timeEditorToolStripMenuItem,
+            this.mapTypeEditorToolStripMenuItem});
             this.contentEditorsToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
             this.contentEditorsToolStripMenuItem.Name = "contentEditorsToolStripMenuItem";
             this.contentEditorsToolStripMenuItem.Size = new System.Drawing.Size(101, 20);
@@ -974,7 +976,7 @@ private void InitializeComponent()
             this.packClientTexturesToolStripMenuItem});
             this.toolsToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
             this.toolsToolStripMenuItem.Name = "toolsToolStripMenuItem";
-            this.toolsToolStripMenuItem.Size = new System.Drawing.Size(47, 20);
+            this.toolsToolStripMenuItem.Size = new System.Drawing.Size(46, 20);
             this.toolsToolStripMenuItem.Text = "Tools";
             // 
             // packClientTexturesToolStripMenuItem
@@ -985,6 +987,14 @@ private void InitializeComponent()
             this.packClientTexturesToolStripMenuItem.Text = "Pack Client Textures";
             this.packClientTexturesToolStripMenuItem.Click += new System.EventHandler(this.packClientTexturesToolStripMenuItem_Click);
             // 
+            // mapTypeEditorToolStripMenuItem
+            // 
+            this.mapTypeEditorToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.mapTypeEditorToolStripMenuItem.Name = "mapTypeEditorToolStripMenuItem";
+            this.mapTypeEditorToolStripMenuItem.Size = new System.Drawing.Size(191, 22);
+            this.mapTypeEditorToolStripMenuItem.Text = "Map Type Editor";
+            this.mapTypeEditorToolStripMenuItem.Click += new System.EventHandler(this.mapTypeEditorToolStripMenuItem_Click);
+            // 
             // FrmMain
             // 
             this.AutoScaleDimensions = new System.Drawing.SizeF(96F, 96F);
@@ -1103,5 +1113,6 @@ private void InitializeComponent()
 		private ToolStripSeparator toolStripSeparator13;
 		private ToolStripMenuItem craftsEditorToolStripMenuItem;
         private ToolStripMenuItem packClientTexturesToolStripMenuItem;
+        private ToolStripMenuItem mapTypeEditorToolStripMenuItem;
     }
 }
\ No newline at end of file
diff --git a/Intersect.Editor/Forms/frmMain.cs b/Intersect.Editor/Forms/frmMain.cs
index 1c6240f2..7a80dd40 100644
--- a/Intersect.Editor/Forms/frmMain.cs
+++ b/Intersect.Editor/Forms/frmMain.cs
@@ -71,6 +71,8 @@ public partial class FrmMain : Form
 
         private FrmTime mTimeEditor;
 
+        private FrmMapType mMapTypeEditor;
+
         //General Editting Variables
         bool mTMouseDown;
 
@@ -1584,6 +1586,16 @@ private void TryOpenEditorMethod(GameObjectType type)
                             mTimeEditor.Show();
                         }
 
+                        break;
+
+                    case GameObjectType.MapType:
+                        if (mMapTypeEditor == null || mMapTypeEditor.Visible == false)
+                        {
+                            mMapTypeEditor = new FrmMapType();
+                            mMapTypeEditor.InitEditor();
+                            mMapTypeEditor.Show();
+                        }
+
                         break;
                     default:
                         return;
@@ -1737,6 +1749,10 @@ private void packTextures()
             Globals.PackingProgressForm.NotifyClose();
         }
 
+        private void mapTypeEditorToolStripMenuItem_Click(object sender, EventArgs e)
+        {
+            PacketSender.SendOpenEditor(GameObjectType.MapType);
+        }
     }
 
 }
diff --git a/Intersect.Editor/Forms/frmMain.resx b/Intersect.Editor/Forms/frmMain.resx
index d15b1a07..9369b71e 100644
--- a/Intersect.Editor/Forms/frmMain.resx
+++ b/Intersect.Editor/Forms/frmMain.resx
@@ -179,15 +179,15 @@
   <data name="toolStripBtnRedo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
     <value>
         iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
-        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAHBSURBVDhPjVJNSwJhEN4ygiIKgi7VqfoBUfYfomsfEAVB
-        dYiuWmQfdOjQKbwUeMjMpI9ThoeISCkPYnaxsETSykgUtUXU1YPFNPP2aivJ1gPDvrvzzDMzz7uCHADQ
-        kMvldBi+RCJRwPjA8x3GgiRJbfiEbDYbxHM7L/lBPp/vwmRg5+IBeuesUDNiBNWwEdTzVjA7/JBOp1+i
-        yRRoTK7fItSZiqe3rkAY3K4YY3o7hGMiOxdFeLkg4GiL1JmS1UNGWD28gVDkHYKRJCzve9gklOvWHJcE
-        aR1ezgR8PdrvJBXjeHbqQCQK23UIGsfNpeJfAvF4okA7U+I5KgL60UE7ksiMwVlWWIw/Beh7UaSSN2UC
-        SLzvQ7cpwVc4R2PreY6J0A3Io0wAX5ZMMhMNZz4iuPHqWjhFGdQtk8mE5KOuHHjoqh5xnU5OUwb9SNgx
-        rN11lUQmNy8hk5XiuIaa05SBxFYc3au3edkqJNK/dgrJVFrCaQY4TRmiKDaRiUfOANSNmpgI/c7+p7dP
-        nHKK05SBntSiyJ7j9hWaJyxMZOPEy4zFnIrTlIHEKhRZ94ZioLO4maH/vhU5UGQWO8cq34YgfAFRX9iR
-        iEttZQAAAABJRU5ErkJggg==
+        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAHASURBVDhPjVJNLwNhEF4qEiIkEhec8AOE+g/i6iMREgkO
+        4toSn3FwcJJeSBxU0fg4qfQgItrQQ1N1WVKk0Q0lot3URtrd9lAyZl5vaxvN8iSTfXfnmWdmnncFPQCg
+        Kp1OT2OEZFnOYnzg+RpjStO0BnyCqqoRPDfykh9kMpkWTIY3Tm+hfcIFZX12MPXawTzpgi3vHSSTycfX
+        xDtYHP7fItSZikdXz0HoXi8aAzYPRGMKO+dEeLkg4Ggz1JmSpT12WNi7BOnlDSIvCZjbCbJJKNdqOcgL
+        0jq8nAmE2qzfSSrG8TzUgUgU7gsJqge38sW/BOJxOUs7U+LhVQH0o4l2JJGxNV9BYS7+FKDvOZFi3hQI
+        IPGmA92mBF/hBI2t5DkmQjegjwIBfJl16ExcOw4RIYBXV8cpxqBuqVRK0o86vxukq7rHdZo5zRj0I2HH
+        qHXTnxcZXjmDlKrJuIaZ04yBxHocXbS5RbYKiXQuHkHiPanhNF2cZgxFUWrIxH1fGCr6HUyEfudb6fkT
+        pxzhNGOgJ+Uosu29eoLaIScTWT4UmbGYM3GaMZBYgiJLohSDaWeAGfrvW9EDRcaxc6z4bQjCFyc+2ILy
+        tHXhAAAAAElFTkSuQmCC
 </value>
   </data>
   <data name="toolStripBtnPen.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
diff --git a/Intersect.Editor/Intersect.Editor.csproj b/Intersect.Editor/Intersect.Editor.csproj
index 0a8e9137..2a147026 100644
--- a/Intersect.Editor/Intersect.Editor.csproj
+++ b/Intersect.Editor/Intersect.Editor.csproj
@@ -86,6 +86,12 @@
     <Compile Include="Core\Preferences.cs" />
     <Compile Include="Core\Program.cs" />
     <Compile Include="Entities\Animation.cs" />
+    <Compile Include="Forms\Editors\frmMapType.cs">
+      <SubType>Form</SubType>
+    </Compile>
+    <Compile Include="Forms\Editors\frmMapType.Designer.cs">
+      <DependentUpon>frmMapType.cs</DependentUpon>
+    </Compile>
     <Compile Include="Maps\MapGridItem.cs" />
     <Compile Include="Maps\MapSaveState.cs" />
     <Compile Include="Forms\Controls\SearchableDarkTreeView.cs">
@@ -783,6 +789,9 @@
     <EmbeddedResource Include="Forms\Editors\frmItem.resx">
       <DependentUpon>frmItem.cs</DependentUpon>
     </EmbeddedResource>
+    <EmbeddedResource Include="Forms\Editors\frmMapType.resx">
+      <DependentUpon>frmMapType.cs</DependentUpon>
+    </EmbeddedResource>
     <EmbeddedResource Include="Forms\Editors\frmNpc.resx">
       <DependentUpon>frmNpc.cs</DependentUpon>
     </EmbeddedResource>
diff --git a/Intersect.Editor/Localization/Strings.cs b/Intersect.Editor/Localization/Strings.cs
index 7432fe66..9798b467 100644
--- a/Intersect.Editor/Localization/Strings.cs
+++ b/Intersect.Editor/Localization/Strings.cs
@@ -3244,7 +3244,7 @@ public struct MapProperties
                 {"playerlightsize", @"Player Light Size"},
                 {"rhue", @"RHue"},
                 {"sound", @"Sound"},
-                {"zonetype", @"Zone Type"},
+                {"maptype", @"Map Type"},
                 {"weather", @"Weather"},
                 {"weatherxspeed", @"Weather X Speed"},
                 {"weatheryspeed", @"Weather Y Speed"},
@@ -3281,7 +3281,7 @@ public struct MapProperties
                 {"playerlightsizedesc", @"How large is the light around the player? (In pixels 0-1000)"},
                 {"rhuedesc", @"The amount of red in the overlay. (Range: 0 to 255)"},
                 {"sounddesc", @"Looping sound effect for this map."},
-                {"zonedesc", @"The type of map this is."},
+                {"maptypedesc", @"The type of map this is."},
                 {"weatherdesc", @"The animation for each weather particle."},
                 {
                     "weatherxspeeddesc",
diff --git a/Intersect.Editor/Maps/MapProperties.cs b/Intersect.Editor/Maps/MapProperties.cs
index 67d9a671..167c7036 100644
--- a/Intersect.Editor/Maps/MapProperties.cs
+++ b/Intersect.Editor/Maps/MapProperties.cs
@@ -78,23 +78,34 @@ public string Name
             }
         }
 
-        [CustomCategory("general"), CustomDescription("zonedesc"), CustomDisplayName("zonetype"),
-         DefaultValue("Normal"), TypeConverter(typeof(MapZoneProperty)), Browsable(true)]
-        public string ZoneType
+        [CustomCategory("general"), CustomDescription("maptypedesc"), CustomDisplayName("maptype"),
+         DefaultValue("None"), TypeConverter(typeof(MapTypeProperty)), Browsable(true)]
+        public string mapType
         {
-            get => Strings.MapProperties.zones[(int) mMyMap.ZoneType];
+            get
+            {
+                if (mMyMap.MapType == Guid.Empty)
+                {
+                    return "None";
+                }
+                return MapType.GetName(mMyMap.MapType);
+            }
             set
             {
-                Globals.MapEditorWindow.PrepUndoState();
-                for (byte i = 0; i < Enum.GetNames(typeof(MapZones)).Length; i++)
+                var maptypes = new Dictionary<string, Guid>();
+                maptypes.Add("None", Guid.Empty);
+                foreach (var itm in MapType.ItemPairs)
                 {
-                    if (Strings.MapProperties.zones[i] == value)
-                    {
-                        mMyMap.ZoneType = (MapZones) i;
-                    }
+                    maptypes.Add(itm.Value, itm.Key);
+                }
+                Guid wantedValue;
+                maptypes.TryGetValue(value, out wantedValue);
+                if (mMyMap.MapType != wantedValue)
+                {
+                    Globals.MapEditorWindow.PrepUndoState();
+                    mMyMap.MapType = wantedValue;
+                    Globals.MapEditorWindow.AddUndoState();
                 }
-
-                Globals.MapEditorWindow.AddUndoState();
             }
         }
 
@@ -616,6 +627,36 @@ public override StandardValuesCollection GetStandardValues(ITypeDescriptorContex
 
     }
 
+    public class MapTypeProperty : StringConverter
+    {
+
+        public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
+        {
+            //true means show a combobox
+            return true;
+        }
+
+        public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)
+        {
+            //true will limit to list. false will show the list, 
+            //but allow free-form entry
+            return false;
+        }
+
+        public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
+        {
+            var maptypelist = new List<string>
+            {
+                Strings.General.none
+            };
+
+            maptypelist.AddRange(MapType.Names);
+
+            return new StandardValuesCollection(maptypelist.ToArray());
+        }
+
+    }
+
     public class MapFogProperty : StringConverter
     {
 
diff --git a/Intersect.Editor/Networking/PacketHandler.cs b/Intersect.Editor/Networking/PacketHandler.cs
index 88586416..146e881e 100644
--- a/Intersect.Editor/Networking/PacketHandler.cs
+++ b/Intersect.Editor/Networking/PacketHandler.cs
@@ -516,6 +516,20 @@ private static void HandlePacket(GameObjectPacket packet)
                     }
 
                     break;
+
+                case GameObjectType.MapType:
+                    if (deleted)
+                    {
+                        var itm = MapType.Get(id);
+                        itm.Delete();
+                    }
+                    else
+                    {
+                        var itm = new MapType(id);
+                        itm.Load(json);
+                        MapType.Lookup.Set(id, itm);
+                    }
+                    break;
                 default:
                     throw new ArgumentOutOfRangeException();
             }
diff --git a/Intersect.Server/Database/DbInterface.cs b/Intersect.Server/Database/DbInterface.cs
index f6263171..36bd264d 100644
--- a/Intersect.Server/Database/DbInterface.cs
+++ b/Intersect.Server/Database/DbInterface.cs
@@ -673,6 +673,9 @@ private static void ClearGameObjects(GameObjectType type)
                     break;
                 case GameObjectType.Time:
                     break;
+                case GameObjectType.MapType:
+                    MapType.Lookup.Clear();
+                    break;
                 default:
                     throw new ArgumentOutOfRangeException(nameof(type), type, null);
             }
@@ -800,6 +803,12 @@ private static void LoadGameObjects(GameObjectType gameObjectType)
                         break;
                     case GameObjectType.Time:
                         break;
+                    case GameObjectType.MapType:
+                        foreach (var mpt in sGameDb.MapType)
+                        {
+                            MapType.Lookup.Set(mpt.Id, mpt);
+                        }
+                        break;
                     default:
                         throw new ArgumentOutOfRangeException(nameof(gameObjectType), gameObjectType, null);
                 }
@@ -884,6 +893,10 @@ public static IDatabaseObject AddGameObject(GameObjectType gameObjectType, Guid
                 case GameObjectType.Time:
                     break;
 
+                case GameObjectType.MapType:
+                    dbObj = new MapType(predefinedid);
+                    break;
+
                 case GameObjectType.Quest:
                     dbObj = new QuestBase(predefinedid);
                     ((QuestBase) dbObj).StartEvent = (EventBase) AddGameObject(GameObjectType.Event);
@@ -1010,6 +1023,12 @@ public static IDatabaseObject AddGameObject(GameObjectType gameObjectType, [NotN
                     case GameObjectType.Time:
                         break;
 
+                    case GameObjectType.MapType:
+                        sGameDb.MapType.Add((MapType)dbObj);
+                        MapType.Lookup.Set(dbObj.Id, dbObj);
+
+                        break;
+
                     default:
                         throw new ArgumentOutOfRangeException(nameof(gameObjectType), gameObjectType, null);
                 }
@@ -1117,6 +1136,10 @@ public static void DeleteGameObject(IDatabaseObject gameObject)
 
                         break;
                     case GameObjectType.Time:
+                        break;
+                    case GameObjectType.MapType:
+                        sGameDb.MapType.Remove((MapType)gameObject);
+
                         break;
                 }
 
diff --git a/Intersect.Server/Database/GameData/GameContext.cs b/Intersect.Server/Database/GameData/GameContext.cs
index 1afe0048..d95dffa2 100644
--- a/Intersect.Server/Database/GameData/GameContext.cs
+++ b/Intersect.Server/Database/GameData/GameContext.cs
@@ -7,6 +7,7 @@
 using Intersect.GameObjects;
 using Intersect.GameObjects.Crafting;
 using Intersect.GameObjects.Events;
+using Intersect.GameObjects.Maps;
 using Intersect.GameObjects.Maps.MapList;
 using Intersect.Server.Database.GameData.Migrations;
 using Intersect.Server.Maps;
@@ -95,6 +96,9 @@ public GameContext() : base(DefaultConnectionStringBuilder)
         //Time
         public DbSet<TimeBase> Time { get; set; }
 
+        // Map Types
+        public DbSet<MapType> MapType { get; set; }
+
         protected override void OnModelCreating(ModelBuilder modelBuilder)
         {
         }
diff --git a/Intersect.Server/Entities/Entity.cs b/Intersect.Server/Entities/Entity.cs
index b3acdf0c..06b23a86 100644
--- a/Intersect.Server/Entities/Entity.cs
+++ b/Intersect.Server/Entities/Entity.cs
@@ -407,10 +407,21 @@ public virtual int CanMove(int moveDir)
                             if (this is Player)
                             {
                                 //Check if this target player is passable....
-                                if (!Options.Instance.Passability.Passable[(int) targetMap.ZoneType])
+                                if (targetMap.MapType != Guid.Empty)
                                 {
-                                    return (int) EntityTypes.Player;
+                                    if (!MapType.Get(targetMap.MapType).WalkThroughPlayers)
+                                    {
+                                        return (int)EntityTypes.Player;
+                                    }
+                                }
+                                else
+                                {
+                                    return (int)EntityTypes.Player;
                                 }
+                                   // if (!Options.Instance.Passability.Passable[(int) targetMap.ZoneType])
+                               // {
+                                //    return (int) EntityTypes.Player;
+                                //}
                             }
                             else
                             {
@@ -1280,12 +1291,26 @@ byte projectileDir
                     }
                 }
 
-                if (MapInstance.Get(MapId).ZoneType == MapZones.Safe)
+                if (MapInstance.Get(MapId).MapType != Guid.Empty)
+                {
+                    if (!MapType.Get(MapInstance.Get(MapId).MapType).CanAttackPlayers)
+                    {
+                        return;
+                    }
+                }
+                else
                 {
                     return;
                 }
 
-                if (MapInstance.Get(target.MapId).ZoneType == MapZones.Safe)
+                if (MapInstance.Get(target.MapId).MapType != Guid.Empty)
+                {
+                    if (!MapType.Get(MapInstance.Get(target.MapId).MapType).CanAttackPlayers)
+                    {
+                        return;
+                    }
+                }
+                else
                 {
                     return;
                 }
@@ -1296,6 +1321,24 @@ byte projectileDir
                 }
             }
 
+            if (this is Player && target is Npc)
+            {
+                if (MapInstance.Get(MapId).MapType != Guid.Empty)
+                {
+                    if (!MapType.Get(MapInstance.Get(MapId).MapType).CanAttackNpcs)
+                    {
+                        return;
+                    }
+                }
+                if (MapInstance.Get(target.MapId).MapType != Guid.Empty)
+                {
+                    if (!MapType.Get(MapInstance.Get(target.MapId).MapType).CanAttackNpcs)
+                    {
+                        return;
+                    }
+                }
+            }
+
             if (parentSpell == null)
             {
                 Attack(
@@ -1387,6 +1430,25 @@ byte projectileDir
                     return;
                 }
 
+                // New Check for Attacking Npcs
+                if (target is Npc && this is Player)
+                {
+                    if (MapInstance.Get(MapId).MapType != Guid.Empty)
+                    {
+                        if (!MapType.Get(MapInstance.Get(MapId).MapType).CanAttackNpcs)
+                        {
+                            return;
+                        }
+                    }
+                    if (MapInstance.Get(MapId).MapType != Guid.Empty)
+                    {
+                        if (!MapType.Get(MapInstance.Get(target.MapId).MapType).CanAttackNpcs)
+                        {
+                            return;
+                        }
+                    }
+                }
+
                 //Check for parties and safe zones, friendly fire off (unless its healing)
                 if (target is Npc && this is Npc npc)
                 {
@@ -1404,12 +1466,25 @@ byte projectileDir
                     }
 
                     // Check if either the attacker or the defender is in a "safe zone" (Only apply if combat is PVP)
-                    if (MapInstance.Get(MapId).ZoneType == MapZones.Safe)
+                    if (MapInstance.Get(MapId).MapType != Guid.Empty)
+                    {
+                        if (!MapType.Get(MapInstance.Get(MapId).MapType).CanAttackPlayers)
+                        {
+                            return;
+                        }
+                    }
+                    else
                     {
                         return;
                     }
-
-                    if (MapInstance.Get(target.MapId).ZoneType == MapZones.Safe)
+                    if (MapInstance.Get(target.MapId).MapType != Guid.Empty)
+                    {
+                        if (!MapType.Get(MapInstance.Get(target.MapId).MapType).CanAttackPlayers)
+                        {
+                            return;
+                        }
+                    }
+                    else
                     {
                         return;
                     }
@@ -1594,13 +1669,38 @@ public virtual void TryAttack(Entity target)
                         targetPlayer.StartCommonEvent(evt, CommonEventTrigger.PlayerInteract, "", this.Name);
                     }
                 }
+                if (MapInstance.Get(MapId).MapType != Guid.Empty)
+                {
+                    if (!MapType.Get(MapInstance.Get(MapId).MapType).CanAttackPlayers)
+                    {
+                        return;
+                    }
+                }
+                else
+                {
+                    return;
+                }
 
-                if (MapInstance.Get(MapId)?.ZoneType == MapZones.Safe)
+                if (MapInstance.Get(target.MapId).MapType != Guid.Empty)
+                {
+                    if (!MapType.Get(MapInstance.Get(target.MapId).MapType).CanAttackPlayers)
+                    {
+                        return;
+                    }
+                }
+                else
                 {
                     return;
                 }
+            }
 
-                if (MapInstance.Get(target.MapId)?.ZoneType == MapZones.Safe)
+            if (target is Npc && this is Player)
+            {
+                if (!MapType.Get(MapInstance.Get(MapId).MapType).CanAttackNpcs)
+                {
+                    return;
+                }
+                if (!MapType.Get(MapInstance.Get(target.MapId).MapType).CanAttackNpcs)
                 {
                     return;
                 }
@@ -1875,14 +1975,28 @@ public virtual void TryAttack(Entity target)
                     //PVP Kill common events
                     if (this.GetType() == typeof(Player))
                     {
-                        if (MapInstance.Get(MapId).ZoneType != MapZones.Arena)
+                        if (MapInstance.Get(MapId).MapType != Guid.Empty)
+                        {
+                            if (!MapType.Get(MapInstance.Get(MapId).MapType).IsArena)
+                            {
+                                foreach (EventBase evt in EventBase.Lookup.Values)
+                                {
+                                    if (evt != null)
+                                    {
+                                        ((Player)this).StartCommonEvent(evt, CommonEventTrigger.PVPKill, "", enemy.Name);
+                                        ((Player)enemy).StartCommonEvent(evt, CommonEventTrigger.PVPDeath, "", this.Name);
+                                    }
+                                }
+                            }
+                        }
+                        else
                         {
                             foreach (EventBase evt in EventBase.Lookup.Values)
                             {
                                 if (evt != null)
                                 {
-                                    ((Player) this).StartCommonEvent(evt, CommonEventTrigger.PVPKill, "", enemy.Name);
-                                    ((Player) enemy).StartCommonEvent(evt, CommonEventTrigger.PVPDeath, "", this.Name);
+                                    ((Player)this).StartCommonEvent(evt, CommonEventTrigger.PVPKill, "", enemy.Name);
+                                    ((Player)enemy).StartCommonEvent(evt, CommonEventTrigger.PVPDeath, "", this.Name);
                                 }
                             }
                         }
diff --git a/Intersect.Server/Entities/Player.cs b/Intersect.Server/Entities/Player.cs
index 81a0d2d7..75c1f222 100644
--- a/Intersect.Server/Entities/Player.cs
+++ b/Intersect.Server/Entities/Player.cs
@@ -626,8 +626,21 @@ public override void Die(int dropitems = 0, Entity killer = null)
             {
                 evt.Value.PlayerHasDied = true;
             }
-
-            base.Die(dropitems, killer);
+            if (MapInstance.Get(MapId).MapType != Guid.Empty)
+            {
+                if (MapType.Get(MapInstance.Get(this.MapId).MapType).DropItemsOnDeath)
+                {
+                    base.Die(dropitems, killer);
+                }
+                else
+                {
+                    base.Die(0, killer);
+                }
+            }
+            else
+            {
+                base.Die(dropitems, killer);
+            }
             PacketSender.SendEntityDie(this);
             Reset();
             Respawn();
@@ -3623,6 +3636,15 @@ public void StartTrade(Player target)
                 return;
             }
 
+            if (MapInstance.Get(this.MapId).MapType != Guid.Empty && MapInstance.Get(target.MapId).MapType != Guid.Empty)
+            {
+                if (!MapType.Get(MapInstance.Get(this.MapId).MapType).CanTrade || !MapType.Get(MapInstance.Get(target.MapId).MapType).CanTrade)
+                {
+                    return;
+                }
+            }
+            
+
             // Set the status of both players to be in a trade
             Trading.Counterparty = target;
             target.Trading.Counterparty = this;
diff --git a/Intersect.Server/Intersect.Server.csproj b/Intersect.Server/Intersect.Server.csproj
index 1bbee3dc..0afbacf7 100644
--- a/Intersect.Server/Intersect.Server.csproj
+++ b/Intersect.Server/Intersect.Server.csproj
@@ -480,6 +480,14 @@
     <Compile Include="Entities\Pathfinding\SpatialAStar.cs" />
     <Compile Include="Entities\Pathfinding\PathfinderTarget.cs" />
     <Compile Include="Entities\Pathfinding\PriorityQueue.cs" />
+    <Compile Include="Migrations\Game\20200414162817_AddingMapTypesEditor.cs" />
+    <Compile Include="Migrations\Game\20200414162817_AddingMapTypesEditor.designer.cs">
+      <DependentUpon>20200414162817_AddingMapTypesEditor.cs</DependentUpon>
+    </Compile>
+    <Compile Include="Migrations\Game\20200415005435_AddingMoreMapTypeVars.cs" />
+    <Compile Include="Migrations\Game\20200415005435_AddingMoreMapTypeVars.designer.cs">
+      <DependentUpon>20200415005435_AddingMoreMapTypeVars.cs</DependentUpon>
+    </Compile>
     <Compile Include="Networking\Client.cs" />
     <Compile Include="Entities\Npc.cs" />
     <Compile Include="Networking\Helpers\NetDebug.cs" />
diff --git a/Intersect.Server/Migrations/Game/20200414162817_AddingMapTypesEditor.Designer.cs b/Intersect.Server/Migrations/Game/20200414162817_AddingMapTypesEditor.Designer.cs
new file mode 100644
index 00000000..f0c14cb3
--- /dev/null
+++ b/Intersect.Server/Migrations/Game/20200414162817_AddingMapTypesEditor.Designer.cs
@@ -0,0 +1,1062 @@
+﻿// <auto-generated />
+using System;
+using Intersect.Server.Database.GameData;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+namespace Intersect.Server.Migrations.Game
+{
+    [DbContext(typeof(GameContext))]
+    [Migration("20200414162817_AddingMapTypesEditor")]
+    partial class AddingMapTypesEditor
+    {
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder
+                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065");
+
+            modelBuilder.Entity("Intersect.GameObjects.AnimationBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("CompleteSound");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("Sound");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Animations");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ClassBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<Guid>("AttackAnimationId")
+                        .HasColumnName("AttackAnimation");
+
+                    b.Property<int>("AttackSpeedModifier");
+
+                    b.Property<int>("AttackSpeedValue");
+
+                    b.Property<long>("BaseExp");
+
+                    b.Property<int>("BasePoints");
+
+                    b.Property<int>("CritChance");
+
+                    b.Property<double>("CritMultiplier");
+
+                    b.Property<int>("Damage");
+
+                    b.Property<int>("DamageType");
+
+                    b.Property<long>("ExpIncrease");
+
+                    b.Property<string>("ExpOverridesJson")
+                        .HasColumnName("ExperienceOverrides");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<bool>("IncreasePercentage");
+
+                    b.Property<string>("JsonBaseStats")
+                        .HasColumnName("BaseStats");
+
+                    b.Property<string>("JsonBaseVitals")
+                        .HasColumnName("BaseVitals");
+
+                    b.Property<string>("JsonItems")
+                        .HasColumnName("Items");
+
+                    b.Property<string>("JsonSpells")
+                        .HasColumnName("Spells");
+
+                    b.Property<string>("JsonSprites")
+                        .HasColumnName("Sprites");
+
+                    b.Property<bool>("Locked");
+
+                    b.Property<string>("Name");
+
+                    b.Property<int>("PointIncrease");
+
+                    b.Property<string>("RegenJson")
+                        .HasColumnName("VitalRegen");
+
+                    b.Property<int>("Scaling");
+
+                    b.Property<int>("ScalingStat");
+
+                    b.Property<int>("SpawnDir");
+
+                    b.Property<Guid>("SpawnMapId")
+                        .HasColumnName("SpawnMap");
+
+                    b.Property<int>("SpawnX");
+
+                    b.Property<int>("SpawnY");
+
+                    b.Property<string>("StatIncreaseJson")
+                        .HasColumnName("StatIncreases");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<string>("VitalIncreaseJson")
+                        .HasColumnName("VitalIncreases");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Classes");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.Crafting.CraftBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("IngredientsJson")
+                        .HasColumnName("Ingredients");
+
+                    b.Property<Guid>("ItemId");
+
+                    b.Property<string>("Name");
+
+                    b.Property<int>("Quantity");
+
+                    b.Property<int>("Time");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Crafts");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.CraftingTableBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("CraftsJson")
+                        .HasColumnName("Crafts");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Name");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("CraftingTables");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.Events.EventBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("CommonEvent");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<bool>("Global");
+
+                    b.Property<Guid>("MapId");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("PagesJson")
+                        .HasColumnName("Pages");
+
+                    b.Property<int>("SpawnX");
+
+                    b.Property<int>("SpawnY");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Events");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ItemBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<Guid>("AnimationId")
+                        .HasColumnName("Animation");
+
+                    b.Property<Guid>("AttackAnimationId")
+                        .HasColumnName("AttackAnimation");
+
+                    b.Property<int>("AttackSpeedModifier");
+
+                    b.Property<int>("AttackSpeedValue");
+
+                    b.Property<bool>("Bound");
+
+                    b.Property<int>("Cooldown");
+
+                    b.Property<int>("CritChance");
+
+                    b.Property<double>("CritMultiplier");
+
+                    b.Property<int>("Damage");
+
+                    b.Property<int>("DamageType");
+
+                    b.Property<string>("Description");
+
+                    b.Property<bool>("DestroySpell");
+
+                    b.Property<Guid>("EquipmentAnimationId")
+                        .HasColumnName("EquipmentAnimation");
+
+                    b.Property<int>("EquipmentSlot");
+
+                    b.Property<Guid>("EventId")
+                        .HasColumnName("Event");
+
+                    b.Property<string>("FemalePaperdoll");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Icon");
+
+                    b.Property<int>("ItemType");
+
+                    b.Property<string>("JsonUsageRequirements")
+                        .HasColumnName("UsageRequirements");
+
+                    b.Property<string>("MalePaperdoll");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("PercentageStatsJson")
+                        .HasColumnName("PercentageStatsGiven");
+
+                    b.Property<string>("PercentageVitalsJson")
+                        .HasColumnName("PercentageVitalsGiven");
+
+                    b.Property<int>("Price");
+
+                    b.Property<Guid>("ProjectileId")
+                        .HasColumnName("Projectile");
+
+                    b.Property<bool>("QuickCast");
+
+                    b.Property<int>("Rarity");
+
+                    b.Property<int>("Scaling");
+
+                    b.Property<int>("ScalingStat");
+
+                    b.Property<int>("SlotCount");
+
+                    b.Property<int>("Speed");
+
+                    b.Property<Guid>("SpellId")
+                        .HasColumnName("Spell");
+
+                    b.Property<bool>("Stackable");
+
+                    b.Property<int>("StatGrowth");
+
+                    b.Property<string>("StatsJson")
+                        .HasColumnName("StatsGiven");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<int>("Tool");
+
+                    b.Property<bool>("TwoHanded");
+
+                    b.Property<string>("VitalsJson")
+                        .HasColumnName("VitalsGiven");
+
+                    b.Property<string>("VitalsRegenJson")
+                        .HasColumnName("VitalsRegen");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Items");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.Maps.MapList.MapList", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("JsonData")
+                        .HasColumnName("JsonData");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("MapFolders");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.Maps.MapType", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("CanAttackNpcs");
+
+                    b.Property<bool>("CanAttackPlayers");
+
+                    b.Property<bool>("DropItemsOnDeath");
+
+                    b.Property<string>("MapNameColor");
+
+                    b.Property<string>("Name");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<bool>("WalkThroughPlayers");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("MapType");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.NpcBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("Aggressive");
+
+                    b.Property<bool>("AttackAllies");
+
+                    b.Property<Guid>("AttackAnimationId")
+                        .HasColumnName("AttackAnimation");
+
+                    b.Property<string>("AttackOnSightConditionsJson")
+                        .HasColumnName("AttackOnSightConditions");
+
+                    b.Property<int>("AttackSpeedModifier");
+
+                    b.Property<int>("AttackSpeedValue");
+
+                    b.Property<string>("CraftsJson")
+                        .HasColumnName("Spells");
+
+                    b.Property<int>("CritChance");
+
+                    b.Property<double>("CritMultiplier");
+
+                    b.Property<int>("Damage");
+
+                    b.Property<int>("DamageType");
+
+                    b.Property<long>("Experience");
+
+                    b.Property<byte>("FleeHealthPercentage");
+
+                    b.Property<bool>("FocusHighestDamageDealer");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("JsonAggroList")
+                        .HasColumnName("AggroList");
+
+                    b.Property<string>("JsonDrops")
+                        .HasColumnName("Drops");
+
+                    b.Property<string>("JsonMaxVital")
+                        .HasColumnName("MaxVital");
+
+                    b.Property<string>("JsonStat")
+                        .HasColumnName("Stats");
+
+                    b.Property<int>("Level");
+
+                    b.Property<byte>("Movement");
+
+                    b.Property<string>("Name");
+
+                    b.Property<bool>("NpcVsNpcEnabled");
+
+                    b.Property<Guid>("OnDeathEventId")
+                        .HasColumnName("OnDeathEvent");
+
+                    b.Property<Guid>("OnDeathPartyEventId")
+                        .HasColumnName("OnDeathPartyEvent");
+
+                    b.Property<string>("PlayerCanAttackConditionsJson")
+                        .HasColumnName("PlayerCanAttackConditions");
+
+                    b.Property<string>("PlayerFriendConditionsJson")
+                        .HasColumnName("PlayerFriendConditions");
+
+                    b.Property<string>("RegenJson")
+                        .HasColumnName("VitalRegen");
+
+                    b.Property<int>("Scaling");
+
+                    b.Property<int>("ScalingStat");
+
+                    b.Property<int>("SightRange");
+
+                    b.Property<int>("SpawnDuration");
+
+                    b.Property<int>("SpellFrequency");
+
+                    b.Property<string>("Sprite");
+
+                    b.Property<bool>("Swarm");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Npcs");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.PlayerVariableBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("TextId");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<byte>("Type");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("PlayerVariables");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ProjectileBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<Guid>("AmmoItemId")
+                        .HasColumnName("Ammo");
+
+                    b.Property<int>("AmmoRequired");
+
+                    b.Property<string>("AnimationsJson")
+                        .HasColumnName("Animations");
+
+                    b.Property<int>("Delay");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<bool>("GrappleHook");
+
+                    b.Property<bool>("IgnoreActiveResources");
+
+                    b.Property<bool>("IgnoreExhaustedResources");
+
+                    b.Property<bool>("IgnoreMapBlocks");
+
+                    b.Property<bool>("IgnoreZDimension");
+
+                    b.Property<int>("Knockback");
+
+                    b.Property<string>("Name");
+
+                    b.Property<bool>("PierceTarget");
+
+                    b.Property<int>("Quantity");
+
+                    b.Property<int>("Range");
+
+                    b.Property<string>("SpawnsJson")
+                        .HasColumnName("SpawnLocations");
+
+                    b.Property<int>("Speed");
+
+                    b.Property<Guid>("SpellId")
+                        .HasColumnName("Spell");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Projectiles");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.QuestBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("BeforeDescription");
+
+                    b.Property<string>("EndDescription");
+
+                    b.Property<Guid>("EndEventId")
+                        .HasColumnName("EndEvent");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("InProgressDescription");
+
+                    b.Property<string>("JsonRequirements")
+                        .HasColumnName("Requirements");
+
+                    b.Property<bool>("LogAfterComplete");
+
+                    b.Property<bool>("LogBeforeOffer");
+
+                    b.Property<string>("Name");
+
+                    b.Property<bool>("Quitable");
+
+                    b.Property<bool>("Repeatable");
+
+                    b.Property<string>("StartDescription");
+
+                    b.Property<Guid>("StartEventId")
+                        .HasColumnName("StartEvent");
+
+                    b.Property<string>("TasksJson")
+                        .HasColumnName("Tasks");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Quests");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ResourceBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<Guid>("AnimationId")
+                        .HasColumnName("Animation");
+
+                    b.Property<Guid>("EventId")
+                        .HasColumnName("Event");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("JsonDrops")
+                        .HasColumnName("Drops");
+
+                    b.Property<string>("JsonHarvestingRequirements")
+                        .HasColumnName("HarvestingRequirements");
+
+                    b.Property<int>("MaxHp");
+
+                    b.Property<int>("MinHp");
+
+                    b.Property<string>("Name");
+
+                    b.Property<int>("SpawnDuration");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<int>("Tool");
+
+                    b.Property<int>("VitalRegen");
+
+                    b.Property<bool>("WalkableAfter");
+
+                    b.Property<bool>("WalkableBefore");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Resources");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ServerVariableBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Json")
+                        .HasColumnName("Value");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("TextId");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<byte>("Type");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("ServerVariables");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ShopBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("BuyingWhitelist");
+
+                    b.Property<Guid>("DefaultCurrencyId")
+                        .HasColumnName("DefaultCurrency");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("JsonBuyingItems")
+                        .HasColumnName("BuyingItems");
+
+                    b.Property<string>("JsonSellingItems")
+                        .HasColumnName("SellingItems");
+
+                    b.Property<string>("Name");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Shops");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.SpellBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("Bound");
+
+                    b.Property<Guid>("CastAnimationId")
+                        .HasColumnName("CastAnimation");
+
+                    b.Property<int>("CastDuration");
+
+                    b.Property<int>("CooldownDuration");
+
+                    b.Property<string>("Description");
+
+                    b.Property<Guid>("EventId")
+                        .HasColumnName("Event");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<Guid>("HitAnimationId")
+                        .HasColumnName("HitAnimation");
+
+                    b.Property<string>("Icon");
+
+                    b.Property<string>("JsonCastRequirements")
+                        .HasColumnName("CastRequirements");
+
+                    b.Property<string>("Name");
+
+                    b.Property<int>("SpellType");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<string>("VitalCostJson")
+                        .HasColumnName("VitalCost");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Spells");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.TilesetBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("Name");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Tilesets");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.TimeBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("DaylightHuesJson")
+                        .HasColumnName("DaylightHues");
+
+                    b.Property<int>("RangeInterval");
+
+                    b.Property<float>("Rate");
+
+                    b.Property<bool>("SyncTime");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Time");
+                });
+
+            modelBuilder.Entity("Intersect.Server.Maps.MapInstance", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<int>("AHue");
+
+                    b.Property<byte[]>("AttributeData")
+                        .HasColumnName("Attributes");
+
+                    b.Property<int>("BHue");
+
+                    b.Property<int>("Brightness");
+
+                    b.Property<Guid>("Down");
+
+                    b.Property<string>("EventIdsJson")
+                        .HasColumnName("Events");
+
+                    b.Property<string>("Fog");
+
+                    b.Property<int>("FogTransparency");
+
+                    b.Property<int>("FogXSpeed");
+
+                    b.Property<int>("FogYSpeed");
+
+                    b.Property<int>("GHue");
+
+                    b.Property<bool>("IsIndoors");
+
+                    b.Property<Guid>("Left");
+
+                    b.Property<string>("LightsJson")
+                        .HasColumnName("Lights");
+
+                    b.Property<Guid>("MapType");
+
+                    b.Property<string>("Music");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("NpcSpawnsJson")
+                        .HasColumnName("NpcSpawns");
+
+                    b.Property<string>("OverlayGraphic");
+
+                    b.Property<string>("Panorama");
+
+                    b.Property<string>("PlayerLightColorJson")
+                        .HasColumnName("PlayerLightColor");
+
+                    b.Property<float>("PlayerLightExpand");
+
+                    b.Property<byte>("PlayerLightIntensity");
+
+                    b.Property<int>("PlayerLightSize");
+
+                    b.Property<int>("RHue");
+
+                    b.Property<int>("Revision");
+
+                    b.Property<Guid>("Right");
+
+                    b.Property<string>("Sound");
+
+                    b.Property<byte[]>("TileData");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<Guid>("Up");
+
+                    b.Property<Guid>("WeatherAnimationId")
+                        .HasColumnName("WeatherAnimation");
+
+                    b.Property<int>("WeatherIntensity");
+
+                    b.Property<int>("WeatherXSpeed");
+
+                    b.Property<int>("WeatherYSpeed");
+
+                    b.Property<int>("ZoneType");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Maps");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.AnimationBase", b =>
+                {
+                    b.OwnsOne("Intersect.GameObjects.AnimationLayer", "Lower", b1 =>
+                        {
+                            b1.Property<Guid>("AnimationBaseId");
+
+                            b1.Property<bool>("AlternateRenderLayer");
+
+                            b1.Property<bool>("DisableRotations");
+
+                            b1.Property<int>("FrameCount");
+
+                            b1.Property<int>("FrameSpeed");
+
+                            b1.Property<string>("Light");
+
+                            b1.Property<int>("LoopCount");
+
+                            b1.Property<string>("Sprite");
+
+                            b1.Property<int>("XFrames");
+
+                            b1.Property<int>("YFrames");
+
+                            b1.ToTable("Animations");
+
+                            b1.HasOne("Intersect.GameObjects.AnimationBase")
+                                .WithOne("Lower")
+                                .HasForeignKey("Intersect.GameObjects.AnimationLayer", "AnimationBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.AnimationLayer", "Upper", b1 =>
+                        {
+                            b1.Property<Guid>("AnimationBaseId");
+
+                            b1.Property<bool>("AlternateRenderLayer");
+
+                            b1.Property<bool>("DisableRotations");
+
+                            b1.Property<int>("FrameCount");
+
+                            b1.Property<int>("FrameSpeed");
+
+                            b1.Property<string>("Light");
+
+                            b1.Property<int>("LoopCount");
+
+                            b1.Property<string>("Sprite");
+
+                            b1.Property<int>("XFrames");
+
+                            b1.Property<int>("YFrames");
+
+                            b1.ToTable("Animations");
+
+                            b1.HasOne("Intersect.GameObjects.AnimationBase")
+                                .WithOne("Upper")
+                                .HasForeignKey("Intersect.GameObjects.AnimationLayer", "AnimationBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ItemBase", b =>
+                {
+                    b.OwnsOne("Intersect.GameObjects.ConsumableData", "Consumable", b1 =>
+                        {
+                            b1.Property<Guid>("ItemBaseId");
+
+                            b1.Property<int>("Percentage");
+
+                            b1.Property<byte>("Type");
+
+                            b1.Property<int>("Value");
+
+                            b1.ToTable("Items");
+
+                            b1.HasOne("Intersect.GameObjects.ItemBase")
+                                .WithOne("Consumable")
+                                .HasForeignKey("Intersect.GameObjects.ConsumableData", "ItemBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.EffectData", "Effect", b1 =>
+                        {
+                            b1.Property<Guid>("ItemBaseId");
+
+                            b1.Property<int>("Percentage");
+
+                            b1.Property<byte>("Type");
+
+                            b1.ToTable("Items");
+
+                            b1.HasOne("Intersect.GameObjects.ItemBase")
+                                .WithOne("Effect")
+                                .HasForeignKey("Intersect.GameObjects.EffectData", "ItemBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ResourceBase", b =>
+                {
+                    b.OwnsOne("Intersect.GameObjects.ResourceState", "Exhausted", b1 =>
+                        {
+                            b1.Property<Guid>("ResourceBaseId");
+
+                            b1.Property<string>("Graphic");
+
+                            b1.Property<bool>("GraphicFromTileset");
+
+                            b1.Property<int>("Height");
+
+                            b1.Property<bool>("RenderBelowEntities");
+
+                            b1.Property<int>("Width");
+
+                            b1.Property<int>("X");
+
+                            b1.Property<int>("Y");
+
+                            b1.ToTable("Resources");
+
+                            b1.HasOne("Intersect.GameObjects.ResourceBase")
+                                .WithOne("Exhausted")
+                                .HasForeignKey("Intersect.GameObjects.ResourceState", "ResourceBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.ResourceState", "Initial", b1 =>
+                        {
+                            b1.Property<Guid>("ResourceBaseId");
+
+                            b1.Property<string>("Graphic");
+
+                            b1.Property<bool>("GraphicFromTileset");
+
+                            b1.Property<int>("Height");
+
+                            b1.Property<bool>("RenderBelowEntities");
+
+                            b1.Property<int>("Width");
+
+                            b1.Property<int>("X");
+
+                            b1.Property<int>("Y");
+
+                            b1.ToTable("Resources");
+
+                            b1.HasOne("Intersect.GameObjects.ResourceBase")
+                                .WithOne("Initial")
+                                .HasForeignKey("Intersect.GameObjects.ResourceState", "ResourceBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.SpellBase", b =>
+                {
+                    b.OwnsOne("Intersect.GameObjects.SpellCombatData", "Combat", b1 =>
+                        {
+                            b1.Property<Guid>("SpellBaseId");
+
+                            b1.Property<int>("CastRange");
+
+                            b1.Property<int>("CritChance");
+
+                            b1.Property<double>("CritMultiplier");
+
+                            b1.Property<int>("DamageType");
+
+                            b1.Property<int>("Duration");
+
+                            b1.Property<int>("Effect");
+
+                            b1.Property<bool>("Friendly");
+
+                            b1.Property<int>("HitRadius");
+
+                            b1.Property<bool>("HoTDoT");
+
+                            b1.Property<int>("HotDotInterval");
+
+                            b1.Property<int>("OnHitDuration")
+                                .HasColumnName("OnHit");
+
+                            b1.Property<string>("PercentageStatDiffJson")
+                                .HasColumnName("PercentageStatDiff");
+
+                            b1.Property<Guid>("ProjectileId")
+                                .HasColumnName("Projectile");
+
+                            b1.Property<int>("Scaling");
+
+                            b1.Property<int>("ScalingStat");
+
+                            b1.Property<string>("StatDiffJson")
+                                .HasColumnName("StatDiff");
+
+                            b1.Property<int>("TargetType");
+
+                            b1.Property<string>("TransformSprite");
+
+                            b1.Property<int>("TrapDuration")
+                                .HasColumnName("Trap");
+
+                            b1.Property<string>("VitalDiffJson")
+                                .HasColumnName("VitalDiff");
+
+                            b1.ToTable("Spells");
+
+                            b1.HasOne("Intersect.GameObjects.SpellBase")
+                                .WithOne("Combat")
+                                .HasForeignKey("Intersect.GameObjects.SpellCombatData", "SpellBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.SpellDashOpts", "Dash", b1 =>
+                        {
+                            b1.Property<Guid>("SpellBaseId");
+
+                            b1.Property<bool>("IgnoreActiveResources");
+
+                            b1.Property<bool>("IgnoreInactiveResources");
+
+                            b1.Property<bool>("IgnoreMapBlocks");
+
+                            b1.Property<bool>("IgnoreZDimensionAttributes");
+
+                            b1.ToTable("Spells");
+
+                            b1.HasOne("Intersect.GameObjects.SpellBase")
+                                .WithOne("Dash")
+                                .HasForeignKey("Intersect.GameObjects.SpellDashOpts", "SpellBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.SpellWarpData", "Warp", b1 =>
+                        {
+                            b1.Property<Guid>("SpellBaseId");
+
+                            b1.Property<int>("Dir");
+
+                            b1.Property<Guid>("MapId");
+
+                            b1.Property<int>("X");
+
+                            b1.Property<int>("Y");
+
+                            b1.ToTable("Spells");
+
+                            b1.HasOne("Intersect.GameObjects.SpellBase")
+                                .WithOne("Warp")
+                                .HasForeignKey("Intersect.GameObjects.SpellWarpData", "SpellBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Intersect.Server/Migrations/Game/20200414162817_AddingMapTypesEditor.cs b/Intersect.Server/Migrations/Game/20200414162817_AddingMapTypesEditor.cs
new file mode 100644
index 00000000..778ac21e
--- /dev/null
+++ b/Intersect.Server/Migrations/Game/20200414162817_AddingMapTypesEditor.cs
@@ -0,0 +1,45 @@
+﻿using System;
+using Microsoft.EntityFrameworkCore.Migrations;
+
+namespace Intersect.Server.Migrations.Game
+{
+    public partial class AddingMapTypesEditor : Migration
+    {
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.AddColumn<Guid>(
+                name: "MapType",
+                table: "Maps",
+                nullable: false,
+                defaultValue: new Guid("00000000-0000-0000-0000-000000000000"));
+
+            migrationBuilder.CreateTable(
+                name: "MapType",
+                columns: table => new
+                {
+                    Id = table.Column<Guid>(nullable: false),
+                    TimeCreated = table.Column<long>(nullable: false),
+                    Name = table.Column<string>(nullable: true),
+                    WalkThroughPlayers = table.Column<bool>(nullable: false),
+                    CanAttackNpcs = table.Column<bool>(nullable: false),
+                    CanAttackPlayers = table.Column<bool>(nullable: false),
+                    DropItemsOnDeath = table.Column<bool>(nullable: false),
+                    MapNameColor = table.Column<string>(nullable: true)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_MapType", x => x.Id);
+                });
+        }
+
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropTable(
+                name: "MapType");
+
+            migrationBuilder.DropColumn(
+                name: "MapType",
+                table: "Maps");
+        }
+    }
+}
diff --git a/Intersect.Server/Migrations/Game/20200415005435_AddingMoreMapTypeVars.Designer.cs b/Intersect.Server/Migrations/Game/20200415005435_AddingMoreMapTypeVars.Designer.cs
new file mode 100644
index 00000000..3f517139
--- /dev/null
+++ b/Intersect.Server/Migrations/Game/20200415005435_AddingMoreMapTypeVars.Designer.cs
@@ -0,0 +1,1066 @@
+﻿// <auto-generated />
+using System;
+using Intersect.Server.Database.GameData;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+namespace Intersect.Server.Migrations.Game
+{
+    [DbContext(typeof(GameContext))]
+    [Migration("20200415005435_AddingMoreMapTypeVars")]
+    partial class AddingMoreMapTypeVars
+    {
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder
+                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065");
+
+            modelBuilder.Entity("Intersect.GameObjects.AnimationBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("CompleteSound");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("Sound");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Animations");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ClassBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<Guid>("AttackAnimationId")
+                        .HasColumnName("AttackAnimation");
+
+                    b.Property<int>("AttackSpeedModifier");
+
+                    b.Property<int>("AttackSpeedValue");
+
+                    b.Property<long>("BaseExp");
+
+                    b.Property<int>("BasePoints");
+
+                    b.Property<int>("CritChance");
+
+                    b.Property<double>("CritMultiplier");
+
+                    b.Property<int>("Damage");
+
+                    b.Property<int>("DamageType");
+
+                    b.Property<long>("ExpIncrease");
+
+                    b.Property<string>("ExpOverridesJson")
+                        .HasColumnName("ExperienceOverrides");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<bool>("IncreasePercentage");
+
+                    b.Property<string>("JsonBaseStats")
+                        .HasColumnName("BaseStats");
+
+                    b.Property<string>("JsonBaseVitals")
+                        .HasColumnName("BaseVitals");
+
+                    b.Property<string>("JsonItems")
+                        .HasColumnName("Items");
+
+                    b.Property<string>("JsonSpells")
+                        .HasColumnName("Spells");
+
+                    b.Property<string>("JsonSprites")
+                        .HasColumnName("Sprites");
+
+                    b.Property<bool>("Locked");
+
+                    b.Property<string>("Name");
+
+                    b.Property<int>("PointIncrease");
+
+                    b.Property<string>("RegenJson")
+                        .HasColumnName("VitalRegen");
+
+                    b.Property<int>("Scaling");
+
+                    b.Property<int>("ScalingStat");
+
+                    b.Property<int>("SpawnDir");
+
+                    b.Property<Guid>("SpawnMapId")
+                        .HasColumnName("SpawnMap");
+
+                    b.Property<int>("SpawnX");
+
+                    b.Property<int>("SpawnY");
+
+                    b.Property<string>("StatIncreaseJson")
+                        .HasColumnName("StatIncreases");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<string>("VitalIncreaseJson")
+                        .HasColumnName("VitalIncreases");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Classes");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.Crafting.CraftBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("IngredientsJson")
+                        .HasColumnName("Ingredients");
+
+                    b.Property<Guid>("ItemId");
+
+                    b.Property<string>("Name");
+
+                    b.Property<int>("Quantity");
+
+                    b.Property<int>("Time");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Crafts");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.CraftingTableBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("CraftsJson")
+                        .HasColumnName("Crafts");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Name");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("CraftingTables");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.Events.EventBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("CommonEvent");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<bool>("Global");
+
+                    b.Property<Guid>("MapId");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("PagesJson")
+                        .HasColumnName("Pages");
+
+                    b.Property<int>("SpawnX");
+
+                    b.Property<int>("SpawnY");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Events");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ItemBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<Guid>("AnimationId")
+                        .HasColumnName("Animation");
+
+                    b.Property<Guid>("AttackAnimationId")
+                        .HasColumnName("AttackAnimation");
+
+                    b.Property<int>("AttackSpeedModifier");
+
+                    b.Property<int>("AttackSpeedValue");
+
+                    b.Property<bool>("Bound");
+
+                    b.Property<int>("Cooldown");
+
+                    b.Property<int>("CritChance");
+
+                    b.Property<double>("CritMultiplier");
+
+                    b.Property<int>("Damage");
+
+                    b.Property<int>("DamageType");
+
+                    b.Property<string>("Description");
+
+                    b.Property<bool>("DestroySpell");
+
+                    b.Property<Guid>("EquipmentAnimationId")
+                        .HasColumnName("EquipmentAnimation");
+
+                    b.Property<int>("EquipmentSlot");
+
+                    b.Property<Guid>("EventId")
+                        .HasColumnName("Event");
+
+                    b.Property<string>("FemalePaperdoll");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Icon");
+
+                    b.Property<int>("ItemType");
+
+                    b.Property<string>("JsonUsageRequirements")
+                        .HasColumnName("UsageRequirements");
+
+                    b.Property<string>("MalePaperdoll");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("PercentageStatsJson")
+                        .HasColumnName("PercentageStatsGiven");
+
+                    b.Property<string>("PercentageVitalsJson")
+                        .HasColumnName("PercentageVitalsGiven");
+
+                    b.Property<int>("Price");
+
+                    b.Property<Guid>("ProjectileId")
+                        .HasColumnName("Projectile");
+
+                    b.Property<bool>("QuickCast");
+
+                    b.Property<int>("Rarity");
+
+                    b.Property<int>("Scaling");
+
+                    b.Property<int>("ScalingStat");
+
+                    b.Property<int>("SlotCount");
+
+                    b.Property<int>("Speed");
+
+                    b.Property<Guid>("SpellId")
+                        .HasColumnName("Spell");
+
+                    b.Property<bool>("Stackable");
+
+                    b.Property<int>("StatGrowth");
+
+                    b.Property<string>("StatsJson")
+                        .HasColumnName("StatsGiven");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<int>("Tool");
+
+                    b.Property<bool>("TwoHanded");
+
+                    b.Property<string>("VitalsJson")
+                        .HasColumnName("VitalsGiven");
+
+                    b.Property<string>("VitalsRegenJson")
+                        .HasColumnName("VitalsRegen");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Items");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.Maps.MapList.MapList", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("JsonData")
+                        .HasColumnName("JsonData");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("MapFolders");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.Maps.MapType", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("CanAttackNpcs");
+
+                    b.Property<bool>("CanAttackPlayers");
+
+                    b.Property<bool>("CanTrade");
+
+                    b.Property<bool>("DropItemsOnDeath");
+
+                    b.Property<bool>("IsArena");
+
+                    b.Property<string>("MapNameColor");
+
+                    b.Property<string>("Name");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<bool>("WalkThroughPlayers");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("MapType");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.NpcBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("Aggressive");
+
+                    b.Property<bool>("AttackAllies");
+
+                    b.Property<Guid>("AttackAnimationId")
+                        .HasColumnName("AttackAnimation");
+
+                    b.Property<string>("AttackOnSightConditionsJson")
+                        .HasColumnName("AttackOnSightConditions");
+
+                    b.Property<int>("AttackSpeedModifier");
+
+                    b.Property<int>("AttackSpeedValue");
+
+                    b.Property<string>("CraftsJson")
+                        .HasColumnName("Spells");
+
+                    b.Property<int>("CritChance");
+
+                    b.Property<double>("CritMultiplier");
+
+                    b.Property<int>("Damage");
+
+                    b.Property<int>("DamageType");
+
+                    b.Property<long>("Experience");
+
+                    b.Property<byte>("FleeHealthPercentage");
+
+                    b.Property<bool>("FocusHighestDamageDealer");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("JsonAggroList")
+                        .HasColumnName("AggroList");
+
+                    b.Property<string>("JsonDrops")
+                        .HasColumnName("Drops");
+
+                    b.Property<string>("JsonMaxVital")
+                        .HasColumnName("MaxVital");
+
+                    b.Property<string>("JsonStat")
+                        .HasColumnName("Stats");
+
+                    b.Property<int>("Level");
+
+                    b.Property<byte>("Movement");
+
+                    b.Property<string>("Name");
+
+                    b.Property<bool>("NpcVsNpcEnabled");
+
+                    b.Property<Guid>("OnDeathEventId")
+                        .HasColumnName("OnDeathEvent");
+
+                    b.Property<Guid>("OnDeathPartyEventId")
+                        .HasColumnName("OnDeathPartyEvent");
+
+                    b.Property<string>("PlayerCanAttackConditionsJson")
+                        .HasColumnName("PlayerCanAttackConditions");
+
+                    b.Property<string>("PlayerFriendConditionsJson")
+                        .HasColumnName("PlayerFriendConditions");
+
+                    b.Property<string>("RegenJson")
+                        .HasColumnName("VitalRegen");
+
+                    b.Property<int>("Scaling");
+
+                    b.Property<int>("ScalingStat");
+
+                    b.Property<int>("SightRange");
+
+                    b.Property<int>("SpawnDuration");
+
+                    b.Property<int>("SpellFrequency");
+
+                    b.Property<string>("Sprite");
+
+                    b.Property<bool>("Swarm");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Npcs");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.PlayerVariableBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("TextId");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<byte>("Type");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("PlayerVariables");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ProjectileBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<Guid>("AmmoItemId")
+                        .HasColumnName("Ammo");
+
+                    b.Property<int>("AmmoRequired");
+
+                    b.Property<string>("AnimationsJson")
+                        .HasColumnName("Animations");
+
+                    b.Property<int>("Delay");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<bool>("GrappleHook");
+
+                    b.Property<bool>("IgnoreActiveResources");
+
+                    b.Property<bool>("IgnoreExhaustedResources");
+
+                    b.Property<bool>("IgnoreMapBlocks");
+
+                    b.Property<bool>("IgnoreZDimension");
+
+                    b.Property<int>("Knockback");
+
+                    b.Property<string>("Name");
+
+                    b.Property<bool>("PierceTarget");
+
+                    b.Property<int>("Quantity");
+
+                    b.Property<int>("Range");
+
+                    b.Property<string>("SpawnsJson")
+                        .HasColumnName("SpawnLocations");
+
+                    b.Property<int>("Speed");
+
+                    b.Property<Guid>("SpellId")
+                        .HasColumnName("Spell");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Projectiles");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.QuestBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("BeforeDescription");
+
+                    b.Property<string>("EndDescription");
+
+                    b.Property<Guid>("EndEventId")
+                        .HasColumnName("EndEvent");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("InProgressDescription");
+
+                    b.Property<string>("JsonRequirements")
+                        .HasColumnName("Requirements");
+
+                    b.Property<bool>("LogAfterComplete");
+
+                    b.Property<bool>("LogBeforeOffer");
+
+                    b.Property<string>("Name");
+
+                    b.Property<bool>("Quitable");
+
+                    b.Property<bool>("Repeatable");
+
+                    b.Property<string>("StartDescription");
+
+                    b.Property<Guid>("StartEventId")
+                        .HasColumnName("StartEvent");
+
+                    b.Property<string>("TasksJson")
+                        .HasColumnName("Tasks");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Quests");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ResourceBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<Guid>("AnimationId")
+                        .HasColumnName("Animation");
+
+                    b.Property<Guid>("EventId")
+                        .HasColumnName("Event");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("JsonDrops")
+                        .HasColumnName("Drops");
+
+                    b.Property<string>("JsonHarvestingRequirements")
+                        .HasColumnName("HarvestingRequirements");
+
+                    b.Property<int>("MaxHp");
+
+                    b.Property<int>("MinHp");
+
+                    b.Property<string>("Name");
+
+                    b.Property<int>("SpawnDuration");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<int>("Tool");
+
+                    b.Property<int>("VitalRegen");
+
+                    b.Property<bool>("WalkableAfter");
+
+                    b.Property<bool>("WalkableBefore");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Resources");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ServerVariableBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Json")
+                        .HasColumnName("Value");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("TextId");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<byte>("Type");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("ServerVariables");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ShopBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("BuyingWhitelist");
+
+                    b.Property<Guid>("DefaultCurrencyId")
+                        .HasColumnName("DefaultCurrency");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("JsonBuyingItems")
+                        .HasColumnName("BuyingItems");
+
+                    b.Property<string>("JsonSellingItems")
+                        .HasColumnName("SellingItems");
+
+                    b.Property<string>("Name");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Shops");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.SpellBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("Bound");
+
+                    b.Property<Guid>("CastAnimationId")
+                        .HasColumnName("CastAnimation");
+
+                    b.Property<int>("CastDuration");
+
+                    b.Property<int>("CooldownDuration");
+
+                    b.Property<string>("Description");
+
+                    b.Property<Guid>("EventId")
+                        .HasColumnName("Event");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<Guid>("HitAnimationId")
+                        .HasColumnName("HitAnimation");
+
+                    b.Property<string>("Icon");
+
+                    b.Property<string>("JsonCastRequirements")
+                        .HasColumnName("CastRequirements");
+
+                    b.Property<string>("Name");
+
+                    b.Property<int>("SpellType");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<string>("VitalCostJson")
+                        .HasColumnName("VitalCost");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Spells");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.TilesetBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("Name");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Tilesets");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.TimeBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("DaylightHuesJson")
+                        .HasColumnName("DaylightHues");
+
+                    b.Property<int>("RangeInterval");
+
+                    b.Property<float>("Rate");
+
+                    b.Property<bool>("SyncTime");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Time");
+                });
+
+            modelBuilder.Entity("Intersect.Server.Maps.MapInstance", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<int>("AHue");
+
+                    b.Property<byte[]>("AttributeData")
+                        .HasColumnName("Attributes");
+
+                    b.Property<int>("BHue");
+
+                    b.Property<int>("Brightness");
+
+                    b.Property<Guid>("Down");
+
+                    b.Property<string>("EventIdsJson")
+                        .HasColumnName("Events");
+
+                    b.Property<string>("Fog");
+
+                    b.Property<int>("FogTransparency");
+
+                    b.Property<int>("FogXSpeed");
+
+                    b.Property<int>("FogYSpeed");
+
+                    b.Property<int>("GHue");
+
+                    b.Property<bool>("IsIndoors");
+
+                    b.Property<Guid>("Left");
+
+                    b.Property<string>("LightsJson")
+                        .HasColumnName("Lights");
+
+                    b.Property<Guid>("MapType");
+
+                    b.Property<string>("Music");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("NpcSpawnsJson")
+                        .HasColumnName("NpcSpawns");
+
+                    b.Property<string>("OverlayGraphic");
+
+                    b.Property<string>("Panorama");
+
+                    b.Property<string>("PlayerLightColorJson")
+                        .HasColumnName("PlayerLightColor");
+
+                    b.Property<float>("PlayerLightExpand");
+
+                    b.Property<byte>("PlayerLightIntensity");
+
+                    b.Property<int>("PlayerLightSize");
+
+                    b.Property<int>("RHue");
+
+                    b.Property<int>("Revision");
+
+                    b.Property<Guid>("Right");
+
+                    b.Property<string>("Sound");
+
+                    b.Property<byte[]>("TileData");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<Guid>("Up");
+
+                    b.Property<Guid>("WeatherAnimationId")
+                        .HasColumnName("WeatherAnimation");
+
+                    b.Property<int>("WeatherIntensity");
+
+                    b.Property<int>("WeatherXSpeed");
+
+                    b.Property<int>("WeatherYSpeed");
+
+                    b.Property<int>("ZoneType");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Maps");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.AnimationBase", b =>
+                {
+                    b.OwnsOne("Intersect.GameObjects.AnimationLayer", "Lower", b1 =>
+                        {
+                            b1.Property<Guid>("AnimationBaseId");
+
+                            b1.Property<bool>("AlternateRenderLayer");
+
+                            b1.Property<bool>("DisableRotations");
+
+                            b1.Property<int>("FrameCount");
+
+                            b1.Property<int>("FrameSpeed");
+
+                            b1.Property<string>("Light");
+
+                            b1.Property<int>("LoopCount");
+
+                            b1.Property<string>("Sprite");
+
+                            b1.Property<int>("XFrames");
+
+                            b1.Property<int>("YFrames");
+
+                            b1.ToTable("Animations");
+
+                            b1.HasOne("Intersect.GameObjects.AnimationBase")
+                                .WithOne("Lower")
+                                .HasForeignKey("Intersect.GameObjects.AnimationLayer", "AnimationBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.AnimationLayer", "Upper", b1 =>
+                        {
+                            b1.Property<Guid>("AnimationBaseId");
+
+                            b1.Property<bool>("AlternateRenderLayer");
+
+                            b1.Property<bool>("DisableRotations");
+
+                            b1.Property<int>("FrameCount");
+
+                            b1.Property<int>("FrameSpeed");
+
+                            b1.Property<string>("Light");
+
+                            b1.Property<int>("LoopCount");
+
+                            b1.Property<string>("Sprite");
+
+                            b1.Property<int>("XFrames");
+
+                            b1.Property<int>("YFrames");
+
+                            b1.ToTable("Animations");
+
+                            b1.HasOne("Intersect.GameObjects.AnimationBase")
+                                .WithOne("Upper")
+                                .HasForeignKey("Intersect.GameObjects.AnimationLayer", "AnimationBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ItemBase", b =>
+                {
+                    b.OwnsOne("Intersect.GameObjects.ConsumableData", "Consumable", b1 =>
+                        {
+                            b1.Property<Guid>("ItemBaseId");
+
+                            b1.Property<int>("Percentage");
+
+                            b1.Property<byte>("Type");
+
+                            b1.Property<int>("Value");
+
+                            b1.ToTable("Items");
+
+                            b1.HasOne("Intersect.GameObjects.ItemBase")
+                                .WithOne("Consumable")
+                                .HasForeignKey("Intersect.GameObjects.ConsumableData", "ItemBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.EffectData", "Effect", b1 =>
+                        {
+                            b1.Property<Guid>("ItemBaseId");
+
+                            b1.Property<int>("Percentage");
+
+                            b1.Property<byte>("Type");
+
+                            b1.ToTable("Items");
+
+                            b1.HasOne("Intersect.GameObjects.ItemBase")
+                                .WithOne("Effect")
+                                .HasForeignKey("Intersect.GameObjects.EffectData", "ItemBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ResourceBase", b =>
+                {
+                    b.OwnsOne("Intersect.GameObjects.ResourceState", "Exhausted", b1 =>
+                        {
+                            b1.Property<Guid>("ResourceBaseId");
+
+                            b1.Property<string>("Graphic");
+
+                            b1.Property<bool>("GraphicFromTileset");
+
+                            b1.Property<int>("Height");
+
+                            b1.Property<bool>("RenderBelowEntities");
+
+                            b1.Property<int>("Width");
+
+                            b1.Property<int>("X");
+
+                            b1.Property<int>("Y");
+
+                            b1.ToTable("Resources");
+
+                            b1.HasOne("Intersect.GameObjects.ResourceBase")
+                                .WithOne("Exhausted")
+                                .HasForeignKey("Intersect.GameObjects.ResourceState", "ResourceBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.ResourceState", "Initial", b1 =>
+                        {
+                            b1.Property<Guid>("ResourceBaseId");
+
+                            b1.Property<string>("Graphic");
+
+                            b1.Property<bool>("GraphicFromTileset");
+
+                            b1.Property<int>("Height");
+
+                            b1.Property<bool>("RenderBelowEntities");
+
+                            b1.Property<int>("Width");
+
+                            b1.Property<int>("X");
+
+                            b1.Property<int>("Y");
+
+                            b1.ToTable("Resources");
+
+                            b1.HasOne("Intersect.GameObjects.ResourceBase")
+                                .WithOne("Initial")
+                                .HasForeignKey("Intersect.GameObjects.ResourceState", "ResourceBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.SpellBase", b =>
+                {
+                    b.OwnsOne("Intersect.GameObjects.SpellCombatData", "Combat", b1 =>
+                        {
+                            b1.Property<Guid>("SpellBaseId");
+
+                            b1.Property<int>("CastRange");
+
+                            b1.Property<int>("CritChance");
+
+                            b1.Property<double>("CritMultiplier");
+
+                            b1.Property<int>("DamageType");
+
+                            b1.Property<int>("Duration");
+
+                            b1.Property<int>("Effect");
+
+                            b1.Property<bool>("Friendly");
+
+                            b1.Property<int>("HitRadius");
+
+                            b1.Property<bool>("HoTDoT");
+
+                            b1.Property<int>("HotDotInterval");
+
+                            b1.Property<int>("OnHitDuration")
+                                .HasColumnName("OnHit");
+
+                            b1.Property<string>("PercentageStatDiffJson")
+                                .HasColumnName("PercentageStatDiff");
+
+                            b1.Property<Guid>("ProjectileId")
+                                .HasColumnName("Projectile");
+
+                            b1.Property<int>("Scaling");
+
+                            b1.Property<int>("ScalingStat");
+
+                            b1.Property<string>("StatDiffJson")
+                                .HasColumnName("StatDiff");
+
+                            b1.Property<int>("TargetType");
+
+                            b1.Property<string>("TransformSprite");
+
+                            b1.Property<int>("TrapDuration")
+                                .HasColumnName("Trap");
+
+                            b1.Property<string>("VitalDiffJson")
+                                .HasColumnName("VitalDiff");
+
+                            b1.ToTable("Spells");
+
+                            b1.HasOne("Intersect.GameObjects.SpellBase")
+                                .WithOne("Combat")
+                                .HasForeignKey("Intersect.GameObjects.SpellCombatData", "SpellBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.SpellDashOpts", "Dash", b1 =>
+                        {
+                            b1.Property<Guid>("SpellBaseId");
+
+                            b1.Property<bool>("IgnoreActiveResources");
+
+                            b1.Property<bool>("IgnoreInactiveResources");
+
+                            b1.Property<bool>("IgnoreMapBlocks");
+
+                            b1.Property<bool>("IgnoreZDimensionAttributes");
+
+                            b1.ToTable("Spells");
+
+                            b1.HasOne("Intersect.GameObjects.SpellBase")
+                                .WithOne("Dash")
+                                .HasForeignKey("Intersect.GameObjects.SpellDashOpts", "SpellBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.SpellWarpData", "Warp", b1 =>
+                        {
+                            b1.Property<Guid>("SpellBaseId");
+
+                            b1.Property<int>("Dir");
+
+                            b1.Property<Guid>("MapId");
+
+                            b1.Property<int>("X");
+
+                            b1.Property<int>("Y");
+
+                            b1.ToTable("Spells");
+
+                            b1.HasOne("Intersect.GameObjects.SpellBase")
+                                .WithOne("Warp")
+                                .HasForeignKey("Intersect.GameObjects.SpellWarpData", "SpellBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Intersect.Server/Migrations/Game/20200415005435_AddingMoreMapTypeVars.cs b/Intersect.Server/Migrations/Game/20200415005435_AddingMoreMapTypeVars.cs
new file mode 100644
index 00000000..336a5b4d
--- /dev/null
+++ b/Intersect.Server/Migrations/Game/20200415005435_AddingMoreMapTypeVars.cs
@@ -0,0 +1,33 @@
+﻿using Microsoft.EntityFrameworkCore.Migrations;
+
+namespace Intersect.Server.Migrations.Game
+{
+    public partial class AddingMoreMapTypeVars : Migration
+    {
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.AddColumn<bool>(
+                name: "CanTrade",
+                table: "MapType",
+                nullable: false,
+                defaultValue: false);
+
+            migrationBuilder.AddColumn<bool>(
+                name: "IsArena",
+                table: "MapType",
+                nullable: false,
+                defaultValue: false);
+        }
+
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropColumn(
+                name: "CanTrade",
+                table: "MapType");
+
+            migrationBuilder.DropColumn(
+                name: "IsArena",
+                table: "MapType");
+        }
+    }
+}
diff --git a/Intersect.Server/Migrations/Game/GameContextModelSnapshot.cs b/Intersect.Server/Migrations/Game/GameContextModelSnapshot.cs
index fbfd65a8..a1fa65a1 100644
--- a/Intersect.Server/Migrations/Game/GameContextModelSnapshot.cs
+++ b/Intersect.Server/Migrations/Game/GameContextModelSnapshot.cs
@@ -309,6 +309,34 @@ protected override void BuildModel(ModelBuilder modelBuilder)
                     b.ToTable("MapFolders");
                 });
 
+            modelBuilder.Entity("Intersect.GameObjects.Maps.MapType", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("CanAttackNpcs");
+
+                    b.Property<bool>("CanAttackPlayers");
+
+                    b.Property<bool>("CanTrade");
+
+                    b.Property<bool>("DropItemsOnDeath");
+
+                    b.Property<bool>("IsArena");
+
+                    b.Property<string>("MapNameColor");
+
+                    b.Property<string>("Name");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<bool>("WalkThroughPlayers");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("MapType");
+                });
+
             modelBuilder.Entity("Intersect.GameObjects.NpcBase", b =>
                 {
                     b.Property<Guid>("Id")
@@ -723,6 +751,8 @@ protected override void BuildModel(ModelBuilder modelBuilder)
                     b.Property<string>("LightsJson")
                         .HasColumnName("Lights");
 
+                    b.Property<Guid>("MapType");
+
                     b.Property<string>("Music");
 
                     b.Property<string>("Name");
diff --git a/Intersect.Server/Networking/PacketHandler.cs b/Intersect.Server/Networking/PacketHandler.cs
index dec4c9da..7c5f88f3 100644
--- a/Intersect.Server/Networking/PacketHandler.cs
+++ b/Intersect.Server/Networking/PacketHandler.cs
@@ -2715,6 +2715,9 @@ public void HandlePacket(Client client, Player player, Network.Packets.Editor.De
                     break;
                 case GameObjectType.Time:
                     break;
+                case GameObjectType.MapType:
+                    obj = MapType.Get(id);
+                    break;
                 default:
                     throw new ArgumentOutOfRangeException();
             }
@@ -2817,6 +2820,9 @@ public void HandlePacket(Client client, Player player, Network.Packets.Editor.Sa
                     break;
                 case GameObjectType.Time:
                     break;
+                case GameObjectType.MapType:
+                    obj = MapType.Get(id);
+                    break;
                 default:
                     throw new ArgumentOutOfRangeException();
             }
diff --git a/Intersect.Server/Networking/PacketSender.cs b/Intersect.Server/Networking/PacketSender.cs
index 4679a619..f35c8459 100644
--- a/Intersect.Server/Networking/PacketSender.cs
+++ b/Intersect.Server/Networking/PacketSender.cs
@@ -8,6 +8,7 @@
 using Intersect.GameObjects;
 using Intersect.GameObjects.Crafting;
 using Intersect.GameObjects.Events;
+using Intersect.GameObjects.Maps;
 using Intersect.GameObjects.Maps.MapList;
 using Intersect.Logging;
 using Intersect.Models;
@@ -1445,6 +1449,12 @@ public static void SendGameObjects(Client client, GameObjectType type, List<Game
                     break;
                 case GameObjectType.Time:
                     break;
+                case GameObjectType.MapType:
+                    foreach (var obj in MapType.Lookup)
+                    {
+                        SendGameObject(client, obj.Value, false, false, packetList);
+                    }
+                    break;
                 default:
                     throw new ArgumentOutOfRangeException(nameof(type), type, null);
             }
-- 
2.26.0.windows.1

